<!ENTITY % gvextra SYSTEM "http://www.greenvulcano.com/gvesb/dtds/Extra.dtd">
%gvextra;

<!ENTITY % flow-nodes "GVOperationNode|GVNodeCheck|ChangeGVBufferNode|GVWaitNode|GVNotificationNode|GVIteratorOperationNode|GVCoreCallNode|GVSubFlowCallNode|GVEndNode|GVSavePointNode|GVSubFlowSpawnNode|GVSubFlowParallelNode|GVSubFlowSplittedNode">
<!ENTITY % filters    "IDFilter|RetCodeFilter|SystemFilter|ServiceFilter|PropertyFilter">
<!ENTITY % j2ee-calls "j2ee-ejb-call|j2ee-jca-call|jmx-call %extra-j2ee-calls;">
<!ENTITY % comm-calls "smtp-call|pop-call|imap-call|imap-manage-call|pop-uid-remove-call|exchange-send-call|exchange-receive-call|exchange-manage-call|ws-call|rest-call|http-call %extra-comm-calls;">
<!ENTITY % file-calls "filereader-call|filewriter-call|filemanager-call|fsmonitor-call|remotemanager-call|rsh-call|rsh-filereader-call|rsh-filewriter-call %extra-file-calls;">
<!ENTITY % db-calls   "db-call|ldap-search-call|ldap-update-call %extra-db-calls;">
<!ENTITY % util-calls "extract-data-call|routed-call|birt-report-call|test-service-call|generic-call %extra-util-calls;">
<!ENTITY % calls      "%j2ee-calls;|%comm-calls;|%db-calls;|%util-calls;|%file-calls;">
<!ENTITY % enqueue "jms-enqueue|routed-enqueue  %extra-enqueue;">
<!ENTITY % dequeue "jms-dequeue|routed-dequeue  %extra-dequeue;">
<!ENTITY % vcl_ops "%calls;|%dequeue;|%enqueue;">
<!ENTITY % proxy_ops "proxy-call|proxy-enqueue"> <!--|proxy-dequeue">-->
<!ENTITY % properties "Property|PropertyCompare">
<!ENTITY % notification-nodes "Log4JNotification|JMXNotification">
<!ENTITY % conditions "GVBufferCondition|ExceptionCondition|ScriptCondition|IdentityCondition">
<!ENTITY % internal-services "gvdte-service|xml-validation-service|json-validation-service|script-service">
<!ENTITY % ShellCommands       "(cmd|cmd-array-elem+), env-property*">
<!ENTITY % connections "DataSourceConnection|JdbcConnection">
<!ENTITY % Resolver            "(XPathParamResolver|GVBufferParamResolver)">
<!ENTITY % Formatter           "(Simpleformatter|DMLWriteFormatter|CallSPFormatter|QueryFormatter)">
<!ENTITY % DataTypes           "(string|int|long|float|date|binary|blob|clob)">
<!ENTITY % GVBufferGetMethods  "(getSystem|getService|getId|getRetCode|getObject|getProperty)">
<!ENTITY % GVBufferSetMethods  "(setSystem|setService|setRetCode|setObject|setProperty)">
<!ENTITY % QueryBaseFormatter  "(QueryXMLBaseFormatter)">
<!ENTITY % CallSPBaseFormatter "(CallSPSimpleBaseFormatter)">
<!ENTITY % JavaType            "(string|int|long|byte_array)">
<!ENTITY % statement_type "select|insert|update|callsp">
<!ENTITY % remote_managers "FTPManager|FTPSManager|SFTPManager %extra-remote-manager;">
<!ENTITY % fs-monitor "LocalFileSystemMonitor|RemoteFileSystemMonitor">
<!ENTITY % fs-monitor-status "InMemoryMonitorStatus|FileMonitorStatus">
<!ENTITY % file-commands "FileSearchCommand|FileMoveCommand|FileDeleteCommand|FileCopyCommand|FileZipCommand|FileUnZipCommand">
<!ENTITY % remote-file-commands "RemoteSearchCommand|RemoteMoveCommand|RemoteDeleteCommand|RemoteDownloadCommand|RemoteUploadCommand">
<!ENTITY % jmx-op "(invoke-method|set-attribute|get-attribute)">
<!ENTITY % preFwdValidators "DUMMY %extra-pre-fwd-validators;">

<!--
    Configuration file for GreenVulcanoESB core modules.
-->
<!ELEMENT GVCore (GVCryptoHelper?,GVXPath?,GVForwards?,GVPoolManager?,GVServices?,GVSystems?,GVPolicy?,GVConcurrencyHandler?,GVBufferDump?,GVDataTransformation?,GVTaskManagerConfiguration?)>
<!--
    GreenVulcanoESB current version.
-->
<!ATTLIST GVCore version    CDATA   #FIXED  "1.0">

<!--
    Manages the configuration of key store and keys used by GreenVulcanoESB cypher framework.

    #SortChild
-->
<!ELEMENT GVCryptoHelper (Description?, KeyStoreID*, KeyID*)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVCryptoHelper type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'CRYPTO_HELPER'.
-->
<!ATTLIST GVCryptoHelper name    CDATA   #FIXED  "CRYPTO_HELPER">

<!--
    Key store access information.

    #Label: @id
    #Unique: ../KeyStoreID/@id
    #SelectOnInsert
    #Icon: GVKeyStoreID.png
-->
<!ELEMENT KeyStoreID (Description)?>
<!--
    Key store identifier.

    #NotNull
-->
<!ATTLIST KeyStoreID id CDATA #REQUIRED>
<!--
    The keystore type.
    Default to JCEKS.
-->
<!ATTLIST KeyStoreID key-store-type (JKS|JCEKS|PKCS12) #IMPLIED>
<!--
    The keystore provider.
    Default to SunJCE.
-->
<!ATTLIST KeyStoreID key-store-prv (SUN|SunJCE|BC) #IMPLIED>
<!--
    The keystore name.

    #NotNull
-->
<!ATTLIST KeyStoreID key-store-name CDATA #REQUIRED>
<!--
    The keystore password.

    #NotNull
    #Encrypted
-->
<!ATTLIST KeyStoreID key-store-pwd CDATA #REQUIRED>

<!--
    Key access information.

    #Label: @id
    #Unique: ../KeyID/@id
    #SelectOnInsert
    #Icon: GVKeyID.png
-->
<!ELEMENT KeyID (Description)?>
<!--
    The Key identifier.

    #NotNull
-->
<!ATTLIST KeyID id CDATA #REQUIRED>
<!--
    The Key type.
-->
<!ATTLIST KeyID key-type (3DES| DES | RSA) #REQUIRED>
<!--
    The keystore identifier.

    #References: ../KeyStoreID/@id
    #NotNull
-->
<!ATTLIST KeyID key-store-id CDATA #REQUIRED>
<!--
    The Key/Certificate alias.

    #NotNull
-->
<!ATTLIST KeyID key-alias CDATA #REQUIRED>
<!--
    The Key password.

    #NotNull
    #Encrypted
-->
<!ATTLIST KeyID key-pwd CDATA #IMPLIED>

<!--
    Root element for XPath engine configuration.
-->
<!ELEMENT GVXPath (Description?,XPath)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVXPath type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'XPATH'.
-->
<!ATTLIST GVXPath name    CDATA   #FIXED  "XPATH">

<!--
    Set XPath properties.

    #SortChild
    #Table: | XPath Extensions | XPathExtension | Function | @function-name | Namespace | @namespace | Class | @class | Description | Description
    #Table: | Namespaces | XPathNamespace | Prefix | @prefix | Namespace | @namespace | Description | description

    #Template:
        <xsl:template match="XPath">
            <xsl:value-of select="description"/>
        </xsl:template>
-->
<!ELEMENT XPath  (Description?,XPathExtension*,XPathNamespace*)>
<!--
    Defines the XPath library to be used::
    - it.greenvulcano.util.xpath.search.jaxen.JaxenXPathAPIFactoryImpl (default)
    - it.greenvulcano.util.xpath.search.xalan.XalanXPathAPIFactoryImpl

    #Choice: it.greenvulcano.util.xpath.search.jaxen.JaxenXPathAPIFactoryImpl | it.greenvulcano.util.xpath.search.xalan.XalanXPathAPIFactoryImpl
-->
<!ATTLIST XPath xpath-factory CDATA #REQUIRED>

<!--
    Defines a XPath extension function.
    The defined function are bind on 'gvesb:' prefix.

    #Label: @function-name
    #SelectOnInsert
-->
<!ELEMENT XPathExtension (Description?)>
<!--
    Extension function name.

    #NotNull
    #Unique: ../XPathExtension/@function-name
-->
<!ATTLIST XPathExtension function-name CDATA #REQUIRED>
<!--
    Extension function implementation.
    The class must have a default constructor and must implement the
    it.greenvulcano.util.xpath.search.XPathFunction interface.

    #NotNull
-->
<!ATTLIST XPathExtension class CDATA #REQUIRED>
<!--
    Function namespace.
    If not defined the value is set to "urn:gvesb/functions"
    automatically installed with the prefix "gvf".

    #References: parent::XPath/XPathNamespace/@namespace
-->
<!ATTLIST XPathExtension namespace CDATA #IMPLIED>

<!--
    Defines a namespace that can be used in XPath.
    The 'gvesb' prefix is reserved.

    #CompositeLabel: || @prefix | : | @namespace
    #SelectOnInsert
-->
<!ELEMENT XPathNamespace (Description?)>
<!--
    Namespace prefix.

    #NotNull
    #Warn: {{self::XPathNamespace[@prefix='gvesb']}} The 'gvesb' prefix is reserved.
    #Unique: parent::XPath/XPathNamespace/@prefix
-->
<!ATTLIST XPathNamespace prefix CDATA #REQUIRED>
<!--
    Namespace.
    If not set, the prefix is associated to the default namespace.

    #NotNull
-->
<!ATTLIST XPathNamespace namespace CDATA #IMPLIED>

<!--
    GreenVulcano ESB JMS Forward configuration.

    #SortChild
-->
<!ELEMENT GVForwards (Description?, ForwardConfiguration*)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVForwards type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'JMS_FORWARD'.
-->
<!ATTLIST GVForwards name    CDATA   #FIXED  "JMS_FORWARD">
<!--
    #CompositeLabel: || @name | - | @forwardName
-->
<!ELEMENT ForwardConfiguration (Description?, ForwardDeployment, PreProcessor?, ErrorHandler*)>

<!--
    Forward configuration name.

    #Unique: /GVCore/GVForwards/ForwardConfiguration/@name
    #NotNull
-->
<!ATTLIST ForwardConfiguration name CDATA #REQUIRED>

<!--
    Forward name. References the Core workflow of type "Forward".

    #References: /GVCore/GVServices/Services/Service/Operation/@forward-name
    #NotNull
-->
<!ATTLIST ForwardConfiguration forwardName CDATA #REQUIRED>

<!--
    Property that defines if the forward must be activated.
-->
<!ATTLIST ForwardConfiguration enabled (true|false) #REQUIRED>

<!--
    Default System name to be used to invoke the workflow.
    Can be extracted from the received JMS message.

    #NotNull
-->
<!ATTLIST ForwardConfiguration flow-system CDATA #IMPLIED>

<!--
    Default Service name to be used to invoke the workflow.
    Can be extracted from the received JMS message.

    #NotNull
-->
<!ATTLIST ForwardConfiguration flow-service CDATA #IMPLIED>

<!--
    Sleep in ms to perform in case of error.
    Default to 2000 and if <= 0 disable the sleep.

    #NotNull
-->
<!ATTLIST ForwardConfiguration sleep-timeout CDATA #IMPLIED>

<!--
    Data Provider to be used for extract data from the received JMS message.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST ForwardConfiguration ref-dp CDATA #IMPLIED>
<!--
    If true the dequeued message is dumped on log file, at DEBUG severity level.
    Default false.
-->
<!ATTLIST ForwardConfiguration dump-message (true|false) #IMPLIED>
<!--
    If true ALL forward operations are logged on log file, at DEBUG severity level.
    Use with caution.
    Default false.
-->
<!ATTLIST ForwardConfiguration full-debug (true|false) #IMPLIED>

<!--
    Define JMS details for Forward configuration.
-->
<!ELEMENT ForwardDeployment (Description?, message-selector?, JNDIHelper?, XAHelper?)>
<!--
    JMS Connection factory JNDI name.

    #NotNull
-->
<!ATTLIST ForwardDeployment connection-factory                  CDATA #REQUIRED>
<!--
    Property that defines the type of destination.
-->
<!ATTLIST ForwardDeployment destination-type              (queue|topic) #REQUIRED>
<!--
    Destination JNDI name.

    #NotNull
-->
<!ATTLIST ForwardDeployment destination         CDATA #REQUIRED>
<!--
    The transacted attribute specifies if the JMS dequeue must be executed in a XA transaction.

-->
<!ATTLIST ForwardDeployment transacted                       (true|false) #REQUIRED>
<!--
    XA transaction timeout.
    Default to 30 seconds.

    #NotNull
-->
<!ATTLIST ForwardDeployment transaction-timeout-sec         CDATA #IMPLIED>
<!--
    Defines the timeout between reconnection attempt on JMS connection failure.
    Default to 10 seconds.

    #NotNull
-->
<!ATTLIST ForwardDeployment reconnect-interval-sec             CDATA #IMPLIED>
<!--
    This specifies the lower limit to the number of concurrent Listeners.
    Defaults to 1.

    #Pattern: ! [0-9]+ ! Enter an integer
-->
<!ATTLIST ForwardDeployment initial-size                    CDATA #IMPLIED>
<!--
    This specifies the upper limit to the number of concurrent Listeners.
    Defaults to 10.

    #Pattern: ! [0-9]+ ! Enter an integer
-->
<!ATTLIST ForwardDeployment maximum-size                    CDATA #IMPLIED>
<!--
    Defines the receive timeout of Listener.
    If XA transaction are active this timeout is contained in the XA transaction timeout.
    Default to 1 second.

    #Pattern: ! [0-9]+ ! Enter an integer
-->
<!ATTLIST ForwardDeployment receive-timeout-sec             CDATA #IMPLIED>
<!--
    Defines the number of receive operations (succesfull or not) performd by the Listener before reinitialization.
    Default to 60 operations.
    A value of -1 means ignore count.

    #Pattern: ! [-]?[0-9]+ ! Enter an integer
-->
<!ATTLIST ForwardDeployment read-block-count             CDATA #IMPLIED>

<!--
    Handle the invocation of an error service, if configured.
    The ErrorHandler are checked in the same sequence as they are configured.
    If the ExceptionCondition element ISN'T configured the handler is active by default,
    and if it's the first of the list then the others are never checked.
    The ExceptionCondition element must be configured to handle only GVPublicException.

    #Label: @name
-->
<!ELEMENT ErrorHandler (Description?, ExceptionCondition?)>

<!--
    Instance name, used in log messages.

    #Unique: ../ErrorHandler/@name
    #NotNull
-->
<!ATTLIST ErrorHandler name CDATA #REQUIRED>

<!--
    Service to be used in errore service invocation.

    #References: /GVCore/GVServices/Services/Service/@id-service
-->
<!ATTLIST ErrorHandler error-id_service CDATA #REQUIRED>

<!--
    System to be used in errore service invocation.

    #References: /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST ErrorHandler error-id_system CDATA #IMPLIED>

<!--
    Operation to be used in errore service invocation.

    #References: /GVCore/GVServices/Services/Service[@id-service=current()/@error-id_service]/Operation[@name!='Forward']/@name
    #References: /GVCore/GVServices/Services/Service[@id-service=current()/@error-id_service]/Operation[@name='Forward']/@forward-name
-->
<!ATTLIST ErrorHandler error-operation CDATA #REQUIRED>

<!--
    Name of the property to be used to contain the original System.

    #NotNull
-->
<!ATTLIST ErrorHandler original-system-field CDATA #REQUIRED>

<!--
    Name of the property to be used to contain the original Service.

    #NotNull
-->
<!ATTLIST ErrorHandler original-service-field CDATA #REQUIRED>

<!--
    Defines a checker for Exceptions.
    Can match an Exception versus more definitions.

    #Label: @condition
    #SortChild
-->
<!ELEMENT ExceptionCondition (Description?, ExceptionDef+)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ExceptionCondition	type CDATA #FIXED "condition">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ExceptionCondition	class CDATA #FIXED "it.greenvulcano.gvesb.internal.condition.ExceptionCondition">
<!--
    This attribute defines the name of the condition.
    Unique inside the 'Conditions' element.

    #NotNull
    #Unique: ../*[@type='condition']/@condition
-->
<!ATTLIST ExceptionCondition	condition CDATA #REQUIRED>
<!--
    If true an error during execution cause an Exception to be thrown.
    If false an error during execution cause the condition to return "false".
    Default to "false".
-->
<!ATTLIST ExceptionCondition	throw-exception (true|false) #IMPLIED>
<!--
    Perform a test on Exceptions.

    #Label: @exception-class
    #SelectOnInsert
    #Template:
        <xsl:template match="ExceptionDef">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            Definition:<br/>
            <xsl:if test="@exception-class">
                Class: <b><xsl:value-of select="@exception-class"/></b><br/>
                Strict class check: <b><xsl:value-of select="@strict-class-check"/></b><br/>
            </xsl:if>
            <xsl:if test="@follow-exc-chain">
                Follow exc-chain: <b><xsl:value-of select="@follow-exc-chain"/></b><br/>
            </xsl:if>
            <xsl:if test="@min-code">
                Min error code: <b><xsl:value-of select="@min-code"/></b><br/>
            </xsl:if>
            <xsl:if test="@max-code">
                Max error code: <b><xsl:value-of select="@max-code"/></b>
            </xsl:if>
            <xsl:if test="@message-filter">
                Message filter: <b><xsl:value-of select="@message-filter"/></b><br/>
                Filter type: <b><xsl:value-of select="@filter-type"/></b><br/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT ExceptionDef (Description)?>
<!--
    Defines the Exception class.

    #NotNull
-->
<!ATTLIST ExceptionDef	exception-class CDATA #IMPLIED>
<!--
    Defines if the Exception to check must be of the given class or a subclass.
    Is used only if 'exception-class' is defined.

    #Warn: {{../ExceptionDef[@strict-class-check and not(@exception-class)]}} The 'exception-class' and 'strict-class-check' attributes must be defined together
-->
<!ATTLIST ExceptionDef	strict-class-check (no|yes) #IMPLIED>
<!--
    Defines if follow the exception chain and perform the check on every element.

-->
<!ATTLIST ExceptionDef	follow-exc-chain (no|yes) #IMPLIED>
<!--
    Defines a lower bound for Exception code check.
    Used only if the exception class is of type it.greenvulcano.gvesb.buffer.GVException.

    #NotNull
-->
<!ATTLIST ExceptionDef	min-code CDATA #IMPLIED>
<!--
    Defines an upper bound for Exception code check.
    Used only if the exception class is of type it.greenvulcano.gvesb.buffer.GVException.

    #NotNull
-->
<!ATTLIST ExceptionDef	max-code CDATA #IMPLIED>
<!--
    Defines a filter to apply on exception message.

    #NotNull
-->
<!ATTLIST ExceptionDef	message-filter CDATA #IMPLIED>
<!--
    Set the filter as text pattern or regular expression.

    #Warn: {{../ExceptionDef[@filter-type and not(@message-filter)]}} The 'message-filter' and 'filter-type' attributes must be defined together
-->
<!ATTLIST ExceptionDef	filter-type (text|reg-exp) #IMPLIED>

<!--

-->
<!ELEMENT PreProcessor (Validators?)>

<!--

-->
<!ELEMENT Validators ((%preFwdValidators;)*)>


<!ELEMENT GVDataTransformation (Description?,DataSourceSets,Startup?,Transformations)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVDataTransformation type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'GVDT'.
-->
<!ATTLIST GVDataTransformation name    CDATA   #FIXED  "GVDT">
<!--
    Set if must be performed a hex dump of byte[] buffers.
    Default to "true".
-->
<!ATTLIST GVDataTransformation make-hex-dump (false | true) #IMPLIED >

<!--
    #SortChild
-->
<!ELEMENT DataSourceSets (Description?, DataSourceSet+)>

<!--
    Defines the sources of configuration data.

    #SortChild
    #Template:

        <xsl:template match="DataSourceSet">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Configured DataSources:</td>
                    <td width="20"></td>
                    <td>
                        <table cellpadding="0" cellspacing="0">
                            <tr>
                                <td><b><i>Name</i></b></td>
                                <td width="20"></td>
                                <td><b><i>Type</i></b></td>
                            </tr>
                            <xsl:for-each select="./*[@type='datasource'][@name!='']">
                                <tr>
                                    <td><b><xsl:value-of select="@name"/></b></td>
                                    <td width="20"></td>
                                    <td><b><xsl:value-of select="name(.)"/></b></td>
                                </tr>
                            </xsl:for-each>
                        </table>
                    </td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT DataSourceSet (Description?,(LocalFSDataSource)+)>
<!--
    DataSourceSet name.
    Must be presenta a DataSourceSet with name = "Default"

    #Unique: ../DataSourceSet/@name
    #NotNull
-->
<!ATTLIST DataSourceSet name CDATA #REQUIRED>

<!--
    Defines a configuration source on local file system.

    #Label: @name
-->
<!ELEMENT LocalFSDataSource (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST LocalFSDataSource type CDATA #FIXED "datasource">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST LocalFSDataSource class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.config.LocalFSDataSource">
<!--
    Datasource name.

    #Unique: ../*[@type='datasource']/@name
    #NotNull
-->
<!ATTLIST LocalFSDataSource name CDATA #REQUIRED >
<!--
    Base directory for configuration information.
    #NotNull
-->
<!ATTLIST LocalFSDataSource repositoryHome CDATA #REQUIRED >
<!--
    Defines the data format handled by the DataSource, the format is the comma separated list of file extensions.

    #NotNull
-->
<!ATTLIST LocalFSDataSource formatHandled CDATA #REQUIRED >
<!--
    Defines if the requested resources ca nbe cached, to speed up future access.
-->
<!ATTLIST LocalFSDataSource cache (no | yes) #IMPLIED >
<!--
    Defines a formatHandled specific handler.
-->
<!ATTLIST LocalFSDataSource formatHandlerClass CDATA #IMPLIED >

<!--
    Contains the transformation configuration.

    #SortChild
    #Template:

        <xsl:template match="Transformations">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Configured Transformations:</td>
                    <td width="20"></td>
                    <td>
                        <table cellpadding="0" cellspacing="0">
                            <tr>
                                <td><b><i>Name</i></b></td>
                                <td width="20"></td>
                                <td><b><i>Type</i></b></td>
                                <td width="20"></td>
                                <td><b><i>TransformationAlias</i></b></td>
                            </tr>
                            <xsl:for-each select="./*[@type='transformation'][@name!='']">
                                <tr>
                                    <td><b><xsl:value-of select="@name"/></b></td>
                                    <td width="20"></td>
                                    <td><b><xsl:value-of select="name(.)"/></b></td>
                                    <td width="20"></td>
                                    <td>
                                        <xsl:if test="TransformationAlias">
                                            <xsl:for-each select="TransformationAlias">
                                                <b><xsl:value-of select="@name"/></b><br/>
                                            </xsl:for-each>
                                        </xsl:if>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </table>
                    </td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT Transformations (Description?,(SequenceTransformation|XSLTransformation|Bin2XMLTransformation|XML2BinTransformation|AddTagTransformation|CSV2XMLTransformation|XSLFOPTransformation|JSON2XMLTransformation|XML2JSONTransformation|Base64Transformation|CryptoTransformation|OverWriteBytesTransformation|ChangeCharTransformation|XQTransformation %extra-dte-transformers;)*)>

<!--
    Global validation flag.
-->
<!ATTLIST Transformations validate %validateValues; #IMPLIED>

<!--
    Defines operation to perform at DTE startup.
-->
<!ELEMENT Startup (Description?,ToPreload?)>

<!--
    Defines the list of transformation to preload at start-up.

    #SortChild
    #Template:

        <xsl:template match="ToPreload">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Transformations to preload:</td>
                    <td width="20"></td>
                    <td>
                        <xsl:for-each select="Preload">
                            <b><xsl:value-of select="@Transformation"/></b><br/>
                        </xsl:for-each>
                    </td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT ToPreload (Description?,Preload*)>

<!--
    Define a transformation to preload.

    #Label: @Transformation
    #Template:

        <xsl:template match="Preload">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr>
                    <td>Transformation:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@Transformation"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT Preload (Description?)>
<!--
    Name of the transformation to preload.

    #References: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
-->
<!ATTLIST Preload Transformation CDATA #REQUIRED>


<!--
    Defines a XSL trasformation.

    #Label: @name
    #Icon: GVXSLTransformation.png
    #Template:

        <xsl:template match="XSLTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT XSLTransformation (Description?, TransformationAlias*,(%dte-transformer-helpers;)*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XSLTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XSLTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.xslt.XSLTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST XSLTransformation name CDATA #REQUIRED>
<!--
    Validation desired (true | false).
-->
<!ATTLIST XSLTransformation validate %validateValues; #IMPLIED>
<!--
    Validation direction (in | out | in-out).
-->
<!ATTLIST XSLTransformation validateDirection %validateDirectionValues; #IMPLIED>
<!--
    Validation type (xsd | dtd).
-->
<!ATTLIST XSLTransformation validationType %validationTypes; #IMPLIED>

<!--
    Style-sheet to be used in trasformation.

    #NotNull
-->
<!ATTLIST XSLTransformation XSLMapName CDATA #REQUIRED>
<!--
    XSD Schema that describe the input XML.

-->
<!ATTLIST XSLTransformation SchemaInput CDATA #IMPLIED>
<!--
    XSD Schema that describe the output XML.

-->
<!ATTLIST XSLTransformation SchemaOutput CDATA #IMPLIED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
-->
<!ATTLIST XSLTransformation DataSourceSet CDATA #IMPLIED>
<!--
    The FQN of the TransformerFactory class to use.
    If not configured use the JVM default.

    #NotNull
-->
<!ATTLIST XSLTransformation TransformerFactory CDATA #IMPLIED>

<!--
    Defines a XQuery trasformation.

    #Label: @name
    #Icon: GVXQTransformation.png
    #Template:

        <xsl:template match="XQTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT XQTransformation (Description?, TransformationAlias*,(%dte-transformer-helpers;)*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XQTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XQTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.xq.XQTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST XQTransformation name CDATA #REQUIRED>
<!--
    Validation desired (true | false).
-->
<!ATTLIST XQTransformation validate %validateValues; #IMPLIED>
<!--
    Validation direction (in | out | in-out).
-->
<!ATTLIST XQTransformation validateDirection %validateDirectionValues; #IMPLIED>
<!--
    Validation type (xsd | dtd).
-->
<!ATTLIST XQTransformation validationType %validationTypes; #IMPLIED>
<!--
    XQuery script to be used in trasformation.

    #NotNull
-->
<!ATTLIST XQTransformation XQMapName CDATA #REQUIRED>
<!--
    XSD Schema that describe the input XML.

-->
<!ATTLIST XQTransformation SchemaInput CDATA #IMPLIED>
<!--
    XSD Schema that describe the output XML.

-->
<!ATTLIST XQTransformation SchemaOutput CDATA #IMPLIED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
    #NotNull
-->
<!ATTLIST XQTransformation DataSourceSet CDATA #IMPLIED>

<!--
    Defines a XSL/FOP trasformation.

    #Label: @name
    #Icon: GVXSLFopTransformation.png
    #Template:

        <xsl:template match="XSLFOPTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT XSLFOPTransformation (Description?, TransformationAlias*,(%dte-transformer-helpers;)*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XSLFOPTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XSLFOPTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.fop.XSLFOPTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST XSLFOPTransformation name CDATA #REQUIRED>
<!--
    Validation desired (true | false).
-->
<!ATTLIST XSLFOPTransformation validate %validateValues; #IMPLIED>
<!--
    Validation direction (in | out | in-out).
-->
<!ATTLIST XSLFOPTransformation validateDirection %validateDirectionValues; #IMPLIED>
<!--
    Validation type (xsd | dtd).
-->
<!ATTLIST XSLFOPTransformation validationType %validationTypes; #IMPLIED>
<!--
    Style-sheet to be used in trasformation.

    #NotNull
-->
<!ATTLIST XSLFOPTransformation XSLMapName CDATA #REQUIRED>
<!--
    XSD Schema that describe the input XML.

-->
<!ATTLIST XSLFOPTransformation SchemaInput CDATA #IMPLIED>
<!--
    XSD Schema that describe the output XML.

-->
<!ATTLIST XSLFOPTransformation SchemaOutput CDATA #IMPLIED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
-->
<!ATTLIST XSLFOPTransformation DataSourceSet CDATA #IMPLIED>
<!--
     Output MIME for FOP transformation.
     If not specified, default is 'application/pdf'.

     #NotNull
-->
<!ATTLIST XSLFOPTransformation OutputMIME CDATA #IMPLIED>
<!--
    The FQN of the TransformerFactory class to use.
    If not configured use the JVM default.

    #NotNull
-->
<!ATTLIST XSLFOPTransformation TransformerFactory CDATA #IMPLIED>

<!--
    Defines a XML/JSON trasformation.
    Convert the input XML to a JSON string.
    Can be applied two conversion policies:
    - simple (default)
        JSON does not distinguish between elements and attributes.
        Sequences of similar elements (or elements which local-name are in ForceElementsArray)
        are represented as JSONArrays.
        Try to convert string values into a number, boolean, or null.
        If an element have attributes, content text/cdata may be placed in a "contentText" member.
        Comments and namespaces are ignored.
        If the root element is 'DEFAULT_ROOT' then isn't included into JSON output.
    - badgerfish
        - see <a href="http://badgerfish.ning.com">http://badgerfish.ning.com</a>

    #Label: @name
    #Icon: GVXSLFopTransformation.png
    #Template:

        <xsl:template match="XML2JSONTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT XML2JSONTransformation (Description?, TransformationAlias*,(%dte-transformer-helpers;)*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XML2JSONTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XML2JSONTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.json.XML2JSONTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST XML2JSONTransformation name CDATA #REQUIRED>
<!--
    Validation desired (true | false).
-->
<!ATTLIST XML2JSONTransformation validate %validateValues; #IMPLIED>
<!--
    Validation direction (in | out | in-out).
-->
<!ATTLIST XML2JSONTransformation validateDirection %validateDirectionValues; #IMPLIED>
<!--
    Validation type (xsd | dtd).
-->
<!ATTLIST XML2JSONTransformation validationType %validationTypes; #IMPLIED>
<!--
    Style-sheet to be used in trasformation.

    #NotNull
-->
<!ATTLIST XML2JSONTransformation InputXSLMapName CDATA #IMPLIED>
<!--
    XSD Schema that describe the input XML.

-->
<!ATTLIST XML2JSONTransformation SchemaInput CDATA #IMPLIED>
<!--
    XSD Schema that describe the output XML.

-->
<!ATTLIST XML2JSONTransformation SchemaOutput CDATA #IMPLIED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
-->
<!ATTLIST XML2JSONTransformation DataSourceSet CDATA #IMPLIED>
<!--
    The FQN of the TransformerFactory class to use.
    If not configured use the JVM default.

    #NotNull
-->
<!ATTLIST XML2JSONTransformation TransformerFactory CDATA #IMPLIED>
<!--
    The conversion policy to apply.
    Default to simple.
    If set as badgerfish then @ForceElementsArray and @ForceStringValue are ignored.

    #NotNull
-->
<!ATTLIST XML2JSONTransformation ConversionPolicy (simple|badgerfish) #IMPLIED>
<!--
    A comma-separated list of element's local-name to be forced as JSONArray also if in single instance

    #NotNull
-->
<!ATTLIST XML2JSONTransformation ForceElementsArray CDATA #IMPLIED>
<!--
    A comma-separated list of element's local-name to be forced as String values, ignoring automatic type conversion

    #NotNull
-->
<!ATTLIST XML2JSONTransformation ForceStringValue CDATA #IMPLIED>

<!--
    Defines a JSON/XML trasformation.
    Can be applied two conversion policies:
    - simple (default)
        Keys values are set as sub-elements, but keys whith name in ForceAttributes are set as XML attributes.
        Value of 'contentText' key, idf present, value is set as #text element.
        If a key has a null value then in the XML is set the 'null' string.
        If the JSON to be converted doesn't have a single root element
        then is automatically created a 'DEFAULT_ROOT' root element.
    - badgerfish
        - see <a href="http://badgerfish.ning.com">http://badgerfish.ning.com</a>

    #Label: @name
    #Icon: GVXSLFopTransformation.png
    #Template:

        <xsl:template match="JSON2XMLTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT JSON2XMLTransformation (Description?, TransformationAlias*,(%dte-transformer-helpers;)*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JSON2XMLTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JSON2XMLTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.json.JSON2XMLTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST JSON2XMLTransformation name CDATA #REQUIRED>
<!--
    Validation desired (true | false).
-->
<!ATTLIST JSON2XMLTransformation validate %validateValues; #IMPLIED>
<!--
    Validation direction (in | out | in-out).
-->
<!ATTLIST JSON2XMLTransformation validateDirection %validateDirectionValues; #IMPLIED>
<!--
    Validation type (xsd | dtd).
-->
<!ATTLIST JSON2XMLTransformation validationType %validationTypes; #IMPLIED>
<!--
    Style-sheet to be used in trasformation.

    #NotNull
-->
<!ATTLIST JSON2XMLTransformation OutputXSLMapName CDATA #IMPLIED>
<!--
    XSD Schema that describe the input XML.

-->
<!ATTLIST JSON2XMLTransformation SchemaInput CDATA #IMPLIED>
<!--
    XSD Schema that describe the output XML.

-->
<!ATTLIST JSON2XMLTransformation SchemaOutput CDATA #IMPLIED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
-->
<!ATTLIST JSON2XMLTransformation DataSourceSet CDATA #IMPLIED>
<!--
    The FQN of the TransformerFactory class to use.
    If not configured use the JVM default.

    #NotNull
-->
<!ATTLIST JSON2XMLTransformation TransformerFactory CDATA #IMPLIED>
<!--
    The conversion policy to apply.
    Default to simple.
    If set as badgerfish then @ForceAttributes is ignored.

    #NotNull
-->
<!ATTLIST JSON2XMLTransformation ConversionPolicy (simple|badgerfish) #IMPLIED>
<!--
    A comma-separated list of keys name to be set as XML attributes

    #NotNull
-->
<!ATTLIST JSON2XMLTransformation ForceAttributes CDATA #IMPLIED>

<!--
    Defines a Binary to XML trasformation.

    #Label: @name
    #Icon: GVBin2XmlTransformation.png
    #Template:

        <xsl:template match="Bin2XMLTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT Bin2XMLTransformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Bin2XMLTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Bin2XMLTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2xml.BinaryToXMLTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST Bin2XMLTransformation name CDATA #REQUIRED>
<!--
    Conversion map name.

    #NotNull
-->
<!ATTLIST Bin2XMLTransformation ConversionMapName CDATA #REQUIRED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
-->
<!ATTLIST Bin2XMLTransformation DataSourceSet CDATA #IMPLIED>

<!--
    Defines a XML to Binary trasformation.

    #Label: @name
    #Icon: GVXml2BinTransformation.png
    #Template:

        <xsl:template match="XML2BinTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT XML2BinTransformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XML2BinTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XML2BinTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.xml2bin.XMLToBinaryTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST XML2BinTransformation name CDATA #REQUIRED>
<!--
    Conversion map name.

    #NotNull
-->
<!ATTLIST XML2BinTransformation ConversionMapName CDATA #REQUIRED>
<!--
    DataSourceSet name from wich retrieve the transformation map and validation schema.

    #References: /GVCore/GVDataTransformation/DataSourceSets/DataSourceSet/@name
-->
<!ATTLIST XML2BinTransformation DataSourceSet CDATA #IMPLIED>

<!--
    Defines a CSV to XML trasformation.
    Can handle record grouping.

    Example:
    CSV:
    field1.1,field1.2,field1.3,field1.4
    field1.1,field2.2,field1.3,field2.4
    field3.1,field3.2,field3.3,field3.4
            No Grouping
    XML:
    <RowSet>
       <row>
          <col>field1.1</col>
          <col>field1.2</col>
          <col>field1.3</col>
          <col>field1.4</col>
       </row>
       <row>
          <col>field2.1</col>
          <col>field2.2</col>
          <col>field1.3</col>
          <col>field2.4</col>
       </row>
       <row>
          <col>field3.1</col>
          <col>field3.2</col>
          <col>field3.3</col>
          <col>field3.4</col>
       </row>
    </RowSet>

           Grouping: 1,3
    XML:
    <RowSet>
       <data key_1="field1.1" key_3="field1.3">
          <row>
             <col>field1.2</col>
             <col>field1.4</col>
          </row>
          <row>
             <col>field2.2</col>
             <col>field2.4</col>
          </row>
       </data>
       <data key_1="field3.1" key_3="field3.3">
          <row>
             <col>field3.2</col>
             <col>field3.4</col>
          </row>
       </data>
    </RowSet>

    #Label: @name
    #Icon: GVCsv2XmlTransformation.png
    #Template:

        <xsl:template match="CSV2XMLTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT CSV2XMLTransformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CSV2XMLTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CSV2XMLTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2xml.CSVToXMLTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST CSV2XMLTransformation name CDATA #REQUIRED>
<!--
    CSV field separator. Default ','.

    #NotNull
-->
<!ATTLIST CSV2XMLTransformation FieldsSeparator CDATA #REQUIRED>
<!--
    CSV field value delimiter, to be removed. Default ''.

    #NotNull
-->
<!ATTLIST CSV2XMLTransformation FieldDelimiter CDATA #IMPLIED>
<!--
    Defines if the fileds values must be enclosed in a CDATA section.

-->
<!ATTLIST CSV2XMLTransformation UseCDATA (True | False) #REQUIRED>
<!--
    Defines if the first CSV row, tipically the fields names, must be excluded.
    Default to false.

-->
<!ATTLIST CSV2XMLTransformation ExcludeFirstRow (True | False) #IMPLIED>
<!--
    Comma separated CSV field index (1 based) to be used as grouping rule.

    #NotNull
-->
<!ATTLIST CSV2XMLTransformation GroupBy CDATA #IMPLIED>

<!--
    Defines a text to XML trasformation.

    #Label: @name
    #Icon: GVAddTagTransformation.png
    #Template:

        <xsl:template match="AddTagTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT AddTagTransformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST AddTagTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST AddTagTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2xml.AddTagTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST AddTagTransformation name CDATA #REQUIRED>
<!--
    Root element name.

    #NotNull
-->
<!ATTLIST AddTagTransformation TagName CDATA #REQUIRED>

<!--
    Input encoding.
    Default to "ISO-8859-1".

    #NotNull
-->
<!ATTLIST AddTagTransformation Encoding CDATA #IMPLIED>
<!--
    Defines if the input must be enclosed in a CDATA section.

-->
<!ATTLIST AddTagTransformation UseCDATA (True | False) #REQUIRED>

<!--
    Defines a Base64 trasformation.

    #Label: @name
    #Icon: GVBase64Transformation.png
    #Template:

        <xsl:template match="Base64Transformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT Base64Transformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Base64Transformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Base64Transformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2bin.Base64Transformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST Base64Transformation name CDATA #REQUIRED>
<!--
    Defines the transformation to perform.

-->
<!ATTLIST Base64Transformation Operation (Encode | Decode) #REQUIRED>

<!--
    Defines a crypto trasformation.

    #Label: @name
    #Icon: GVCryptoTransformation.png
    #Template:

        <xsl:template match="CryptoTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT CryptoTransformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CryptoTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CryptoTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2bin.CryptoTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST CryptoTransformation name CDATA #REQUIRED>
<!--
    Defines the transformation to perform.

-->
<!ATTLIST CryptoTransformation Operation (Encrypt | Decrypt) #REQUIRED>
<!--
    Identifies the key to use.
    Default to KeyID = 'XMLConfig'.

    #References: /GVCore/CryptoHelper/KeyID/@id
-->
<!ATTLIST CryptoTransformation KeyID CDATA #IMPLIED>

<!--
    Defines an overwrite bytes trasformation.

    #Label: @name
    #Icon: GVOverwriteBytesTransformation.png
    #Template:

        <xsl:template match="OverWriteBytesTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT OverWriteBytesTransformation (Description?, TransformationAlias*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST OverWriteBytesTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST OverWriteBytesTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2bin.OverWriteBytesTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST OverWriteBytesTransformation name CDATA #REQUIRED>
<!--
    Offset from wich start the overwrite.

    #NotNull
-->
<!ATTLIST OverWriteBytesTransformation Offset CDATA #REQUIRED>
<!--
    Hex representation of the bytes to overwrite.
    Every byte is coded with 2 hex char, and the bytes are comma separated.

    #NotNull
-->
<!ATTLIST OverWriteBytesTransformation Bytes CDATA #REQUIRED>

<!--
    Defines a change char trasformation.

    #Label: @name
    #Icon: GVCharTransformation.png
    #Template:

        <xsl:template match="ChangeCharTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Conversion:</td>
                    <td width="20"></td>
                    <td>
                        <xsl:value-of select="@InputChar"/> to <xsl:value-of select="@OutputChar"/><br/>
                        <xsl:if test="CharConversion">
                            <xsl:for-each select="CharConversion">
                                <xsl:value-of select="@InputChar"/> to <xsl:value-of select="@OutputChar"/><br/>
                            </xsl:for-each>
                        </xsl:if>
                    </td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT ChangeCharTransformation (Description?, TransformationAlias*, CharConversion*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ChangeCharTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ChangeCharTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.transformers.bin.bin2xml.ChangeCharTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST ChangeCharTransformation name CDATA #REQUIRED>
<!--
    The hex code of char to be replaced.

    #NotNull
-->
<!ATTLIST ChangeCharTransformation InputChar CDATA #REQUIRED>
<!--
    The hex code of replaced char.

    #NotNull
-->
<!ATTLIST ChangeCharTransformation OutputChar CDATA #REQUIRED>


<!--
    #Template:

        <xsl:template match="CharConversion">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            Convert : <xsl:value-of select="@InputChar"/> to <xsl:value-of select="@OutputChar"/>
        </xsl:template>
-->
<!ELEMENT CharConversion (Description?)>
<!--
    The hex code of char to be replaced.

    #NotNull
-->
<!ATTLIST CharConversion InputChar CDATA #REQUIRED>
<!--
    The hex code of replaced char.

    #NotNull
-->
<!ATTLIST CharConversion OutputChar CDATA #REQUIRED>


<!--
    Defines a sequence trasformation.

    #Label: @name
    #Icon: GVSequenceTransformation.png
    #Template:

        <xsl:template match="SequenceTransformation">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Transformations:</td>
                    <td width="20"></td>
                    <td>
                        <xsl:for-each select="SequenceElement">
                            <b><xsl:value-of select="@Transformer"/></b><br/>
                        </xsl:for-each>
                    </td>
                </tr>
            </table>
            <xsl:if test="TransformationAlias">
                <table cellpadding="0" cellspacing="0">
                    <tr valign="top">
                        <td>TransformationAliases:</td>
                        <td width="20"></td>
                        <td>
                            <xsl:for-each select="TransformationAlias">
                                <b><xsl:value-of select="@name"/></b><br/>
                            </xsl:for-each>
                        </td>
                    </tr>
                </table>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT SequenceTransformation (Description?, TransformationAlias*,SequenceElement+)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SequenceTransformation type CDATA #FIXED "transformation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SequenceTransformation class CDATA #FIXED "it.greenvulcano.gvesb.gvdte.controller.SequenceTransformer">
<!--
    Transformation name.

    #Unique: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #NotNull
-->
<!ATTLIST SequenceTransformation name CDATA #REQUIRED>
<!--
    The name of the object to retur to te caller.
    Must be the name of the output or buffer field of any sequence's base transformation.

    #References: SequenceElement/@Output
    #References: SequenceElement/@Buffer
-->
<!ATTLIST SequenceTransformation Output CDATA #REQUIRED>
<!--
    Validation desired (true | false).
-->
<!ATTLIST SequenceTransformation validate %validateValues; #IMPLIED>
<!--
    If true enable the dump of the input/output data at every transformation step.
    Default false.
-->
<!ATTLIST SequenceTransformation DumpInOut (true|false) #IMPLIED>

<!--
    #Label: @Transformer
    #Template:

        <xsl:template match="SequenceElement">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr>
                    <td>Transformation:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@Transformer"/></b></td>
                </tr>
                <tr>
                    <td>Input:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@Input"/></b></td>
                </tr>
                <tr>
                    <td>Output:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@Output"/></b></td>
                </tr>
                <xsl:if test="@Buffer">
                    <tr>
                        <td>Buffer:</td>
                        <td width="20"></td>
                        <td><b><xsl:value-of select="@Buffer"/></b></td>
                    </tr>
                </xsl:if>
            </table>
        </xsl:template>
-->
<!ELEMENT SequenceElement (Description?)>
<!--
    Name of a base transformation.

    #References: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
-->
<!ATTLIST SequenceElement Transformer CDATA #REQUIRED>
<!--
    Name of the input object.

    #NotNull
    #References: {{../SequenceElement[position() != 1]}} preceding-sibling::SequenceElement/@Input
    #References: {{../SequenceElement[position() != 1]}} preceding-sibling::SequenceElement/@Output
    #References: {{../SequenceElement[position() != 1]}} preceding-sibling::SequenceElement/@Buffer
-->
<!ATTLIST SequenceElement Input CDATA #REQUIRED>
<!--
    Name of the output object.

    #NotNull
-->
<!ATTLIST SequenceElement Output CDATA #REQUIRED>
<!--
    Name of the buffer object.
    The object data an be modified by the current transforamtion.

    #NotNull
    #References: {{../SequenceElement[position() != 1]}} preceding-sibling::SequenceElement/@Input
    #References: {{../SequenceElement[position() != 1]}} preceding-sibling::SequenceElement/@Output
    #References: {{../SequenceElement[position() != 1]}} preceding-sibling::SequenceElement/@Buffer
    #References: {{../SequenceElement[position() = 1]}} @Input
    #Warn: {{../SequenceElement[not(@Buffer = @Input) or not(@Buffer = @Output)]}} If @Buffer used then must be @Buffer=@Input
-->
<!ATTLIST SequenceElement Buffer CDATA #IMPLIED>

<!--
    GVBuffer dump rules configuration.

    #SortChild
    #Table: | Services | Service | ServiceDump | @id-service | Dump size | @log-dump-size | Description | Description
-->
<!ELEMENT GVBufferDump (Description?, ServiceDump*)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVBufferDump type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'DATA_DUMP'.
-->
<!ATTLIST GVBufferDump name    CDATA   #FIXED  "BUFFER_DUMP">
<!--
    Default max dump size, in bytes.
    If not set noting is dump, if -1 then all buffer is dump.
-->
<!ATTLIST GVBufferDump log-dump-size CDATA #IMPLIED>
<!--
    Per service dump configuration.

    #Label: @id-service
    #SelectOnInsert
    #SortChild
-->
<!ELEMENT ServiceDump (Description?, ClientDump*)>

<!--
    Service name.

    #Unique: ../ServiceDump/@id-service
    #References: /GVCore/GVServices/Services/Service/@id-service
-->
<!ATTLIST ServiceDump id-service CDATA #REQUIRED>

<!--
    Max dump size, in bytes.
    If not set noting is dump, if -1 then all buffer is dump.
-->
<!ATTLIST ServiceDump log-dump-size CDATA #IMPLIED>

<!--
    Per service's client dump configuration.

    #Label: @id-system
    #SelectOnInsert
-->
<!ELEMENT ClientDump (Description?)>

<!--
    Client name.

    #Unique: ../ClientDump/@id-system
    #References: /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST ClientDump id-system CDATA #REQUIRED>

<!--
    Max dump size, in bytes.
    If not set noting is dump, if -1 then all buffer is dump.
-->
<!ATTLIST ClientDump log-dump-size CDATA #IMPLIED>

<!--
    Defines subsystem's max concurrency on service invocation.

    #SelectOnInsert
-->
<!ELEMENT GVConcurrencyHandler (Description?,SubSystems)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVConcurrencyHandler type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'CONCURRENCY_HANDLER'.
-->
<!ATTLIST GVConcurrencyHandler name    CDATA   #FIXED  "CONCURRENCY_HANDLER">

<!--
    #SortChild
-->
<!ELEMENT SubSystems (SubSystem*)>

<!--
    #Label: @name
    #SelectOnInsert
    #SortChild
-->
<!ELEMENT SubSystem (Description?,ConcurrentService*)>

<!--
    Subsystem name.

    #Unique: /GVCore/GVConcurrencyHandler/SubSystems/SubSystem/@name
    #Choice: GVCore
    #NotNull
-->
<!ATTLIST SubSystem name CDATA #REQUIRED>

<!--
    #CompositeLabel: || @service | :: | @system
    #SelectOnInsert
-->
<!ELEMENT ConcurrentService (Description?)>
<!--
    Service name.

    #References: /GVCore/GVServices/Services/Service/@id-service
-->
<!ATTLIST ConcurrentService service CDATA #REQUIRED>
<!--
    Service's client name.

    #References: /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST ConcurrentService system CDATA #IMPLIED>

<!--
    Max concurrency.

    #NotNull
-->
<!ATTLIST ConcurrentService max-concurrency CDATA #REQUIRED>

<!--
    GreenVulcanoESB Core configuration root element.

    Contains 3 subsections:

        - Management: contains the configuration of management components.

        - Groups: contains the configurations of Services groups.
            A group can handle the activation state of multiple services at once.

        - Services: contains the configuration of GreenVulcanoESB Services.

    #Icon: services.png
-->
<!ELEMENT GVServices (Description? %extra-wf-extensions;, Management, Persistence?, Groups, Services)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVServices type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'SERVICES'.
-->
<!ATTLIST GVServices name    CDATA   #FIXED  "SERVICES">

<!ELEMENT Management (Description?)>
<!--
    Defines if monitoring components on cluster operation can contact
    the administration node on initialization.

    #Icon: default.png
-->
<!ATTLIST Management call-administration-on-init (yes|no) "no" >

<!ELEMENT Persistence (Description?, SequenceSQL)>
<!--

    #Icon: default.png
    #NotNull
-->
<!ATTLIST Persistence jdbc-connection-name CDATA #REQUIRED >

<!--

    #Icon: default.png
-->
<!ATTLIST Persistence enabled (true|false) #REQUIRED >

<!--
    #NotNull
    #Icon: default.png
    #SelectOnInsert
-->
<!ELEMENT SequenceSQL (#PCDATA)>

<!--
    This section defines the GreenVulcanoESB's services groups.

    #SortChild
    #Table: | Groups | Group | Group ID | @id-group | Activation | @group-activation | Description | Description
    #Icon: groups.png
    #Template:

        <xsl:template match="Groups">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT Groups (Description?, Group*)>


<!--
    Every GreenVulcanoESB service is associated to a group.
    Action on a group are propagated to every group's member.

    In particular you can specify activation status of services,
    it is therefore advisable to insert in the same group services
    that should be activated or suspended together.

    #Label: @id-group
    #SelectOnInsert
    #Icon: group.png
    #Template:

        <xsl:template match="Group">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="100">Group:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@id-group"/></b></td>
                </tr>
                <tr valign="top">
                    <td>Activation status:</td>
                    <td width="100"></td>
                    <td><b><xsl:value-of select="@group-activation"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT Group (Description?)>
<!--
    Group name.

    #Unique: /GVCore/GVServices/Groups/Group/@id-group
    #NotNull
-->
<!ATTLIST Group id-group CDATA #REQUIRED>
<!--
    Activation status of group's services.

    The status can be:
    - on: group's services are active.
    - paused: group's services are inactive, the asynchronous client's requests
              are tacken in charghe by Greenvulcano ESB. They will be served when
              the group return on state 'on'.
    - off: group's services are inactive and no request are tacken in charghe
           by Greenvulcano ESB.

    The current version don't implement the state 'paused'.

    #Warn: {{../Group[@group-activation='paused']}} 'paused' is not yet supported for 'group-activation'
-->
<!ATTLIST Group group-activation (on|paused|off) "on">
<!--
    This configuration section defines the services provided by GreenVulcanoESB,
    which workflows can be invoked and which operations should be taken as a result
    of invocations from the clients.

    For each couple <service,operation> is instantiated a flow defined in the Flow section.

    Here you configure the activation state of statistics, input/output services,
    checks, and other operational details (see the documentation
    the sub-elements).

    You can insert into this section of the configuration also documentary information
    that have no impacts on GreenVulcanoESB operations,  but that can enrich the reports produced.

    #SortChild
    #Table: | Services | Service | Service | @id-service | Group | @group-name | Brief description | @brief-description
    #Icon: services.png
    #Template:

        <xsl:template match="Services">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT Services (Description?, Service*)>
<!--
    Defines the default master logger Level for all services.
    Default to ALL.
-->
<!ATTLIST Services loggerLevel (ALL|DEBUG|INFO|WARN|ERROR) #IMPLIED>

<!--
    GreenVulcanoESB service's alias.

    #Label: @alias
    #SelectOnInsert
-->
<!ELEMENT Alias (Description?)>
<!--
    Alias name.

    #Unique: current()/ancestor::Services/Service/AliasList/Alias/@alias
    #Unique: current()/ancestor::Services/Service/@id-service
    #NotNull
-->
<!ATTLIST Alias alias CDATA #REQUIRED>

<!--
    Alias list for a given GreenVulcanoESB service.

    #SortChild
    #Table: | AliasList | Alias | Alias | @alias | Description | Description
    #SelectOnInsert
    #Template:

        <xsl:template match="AliasList">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT AliasList (Description?, Alias+)>

<!--
    Configuration of a GreenVulcanoESB's service.
    A GreenVulcanoESB's service is identified by a unique name (id-service),
    belongs to a group and has an activation state.

    You can configure the conditions applied to the routing of Service's flows
    (Conditions section).
    The definitions used here are valid for all flows associated with
    service and overwrite any global definitions.

    #Label: @id-service
    #Icon: service.png
    #SelectOnInsert
-->
<!ELEMENT Service (Description?, AliasList?, Conditions?, Operation* %extra-wf-operations;)>
<!--
    The unique name of the service.
    Corresponds to the value contained in the 'service' field of the
    data buffer (GVBuffer).

    #Unique: /GVCore/GVServices/Services/Service/@id-service
    #NotNull
-->
<!ATTLIST Service id-service CDATA #REQUIRED>
<!--
    Service group membership.
    Groups are defined in the 'Groups' section.

    #References: /GVCore/GVServices/Groups/Group/@id-group
-->
<!ATTLIST Service group-name CDATA #REQUIRED>
<!--
    Activation status of service.

    The status can be:
    - on: service is active.
    - paused: service is inactive, the asynchronous client's requests
              are tacken in charghe by Greenvulcano ESB. They will be served when
              the service return on state 'on'.
    - off: service is inactive and no request are tacken in charghe
           by Greenvulcano ESB.

    The current version don't implement the state 'paused'.

    #Warn: {{../Service[@service-activation='paused']}} 'paused' is not yet supported for 'service-activation'
-->
<!ATTLIST Service service-activation (on|paused|off) "on">
<!--
    Indicates whether the calculation of statistics for the service
    is enabled or not.

    - on: enables the calculation of statistics

    - off: disables the calculation of statistics
-->
<!ATTLIST Service statistics (off|on) "off">
<!--
    Service's cration date.

    The information in this field is purely descriptive and has no
    impact on the functionality of GreenVulcanoESB.
    This information will be used for the production
    of reports on configuration.
-->
<!ATTLIST Service creation-date CDATA #IMPLIED>
<!--
    Service description.

    The information in this field is purely descriptive and has no
    impact on the functionality of GreenVulcanoESB.
    This information will be used for the production
    of reports on configuration.
-->
<!ATTLIST Service brief-description CDATA #IMPLIED>
<!--
    Defines the default master logger Level for all service operations.
    Default to ALL.
-->
<!ATTLIST Service loggerLevel (ALL|DEBUG|INFO|WARN|ERROR) #IMPLIED>

<!--
    Defines an operational workflow of GreenVulcanoESB.
    Each workflow is identified by a couple <service,operation> and is made
    instantiating a 'Flow', with VCL operations of one or more participating systems
    ('Participant' selected from those defined in the 'Systems').

    The operations you can configure are:

    - Forward
    - GetReply
    - GetRequest
    - Request
    - RequestReply
    - SendReply

    And correspond (apart from the Forward) to the communication primitives of GreenVulcanoESB.
    The Forward workflows are driven by the internal mechanisms of GreenVulcanoESB to complete
    transactions that do not require assistance from external systems

    You can enable some consistency check on the data passed on
    GreenVulcanoESB.

    Using the sub-element 'Conditions' can be (re)defined the conditions
    for possible use in the workflow routing.

    #SortChild
    #Table: | Operation Participants | Participant | Participant | @id-system | Channel | @id-channel | Description | Description
    #SelectOnInsert
    #Label: {{../*[@name!='Forward']}} @name
    #Label: {{../*[@name='Forward']}} @forward-name
    #Icon: operation.png
    #Warn: {{../*[@name='Forward' and not(@forward-name)]}} 'forward-name' must be defined
    #Warn: {{../*[@name!='Forward' and @forward-name]}} 'forward-name' must not be defined
-->
<!ELEMENT Operation   (Description?, Conditions?, Participant*, Flow, SubFlow*, OperationManagement?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Operation   type              CDATA #FIXED "operation">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Operation   class             CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVFlowWF">
<!--
    Operation's name.
    Corresponds to a GreenVulcanoESB communication primitive or a forward.

    In the case of a forward, then you must also specify the parameter 'forward-name'.

    #NotNull
    #Unique: {{../*[@name!='Forward']}} ../*/@name
    #Choice: RequestReply|Request|GetReply|GetRequest|SendReply|Forward
-->
<!ATTLIST Operation   name              CDATA #REQUIRED>
<!--
    Forward's name.

    Must be specified only if you are setting up a workflow for a forward.

    Must not be specified for the GreenVulcanoESB communication primitive.

    #NotNull
    #Unique: ../*/@forward-name
    #Warn: {{../*[@forward-name = 'RequestReply']}} RequestReply is not a valid 'forward-name'
    #Warn: {{../*[@forward-name = 'Request']}} Request is not a valid 'forward-name'
    #Warn: {{../*[@forward-name = 'GetReply']}} GetReply is not a valid 'forward-name'
    #Warn: {{../*[@forward-name = 'GetRequest']}} GetRequest is not a valid 'forward-name'
    #Warn: {{../*[@forward-name = 'SendReply']}} SendReply is not a valid 'forward-name'
    #Warn: {{../*[@forward-name = 'Forward']}} Forward is not a valid 'forward-name'
-->
<!ATTLIST Operation   forward-name      CDATA #IMPLIED>
<!--
    Enable a consistency check of GVBuffer.

    It can take three values:

    - none: does not make any check.

    - sys-svc: fields 'system' and 'service' the result should take the
        taking the same values in the input buffer.

    - sys-svc-id: fields 'system', 'service' and 'id' of the result must
        assume the same values that assumed in the input buffer.
        This setting should not be used in transactions with semantics
        'GetRequest'.
-->
<!ATTLIST Operation   out-check-type    (none|sys-svc|sys-svc-id) #REQUIRED>
<!--
    Activation status of the current service operation.

    The state can take two values:

    - on: the operation is active.

    - off: the operation is not active.
-->
<!ATTLIST Operation operation-activation (on|off) "on">
<!--
    Defines the master logger Level for the Operation and all SubFlows.
    Default to ALL.
-->
<!ATTLIST Operation loggerLevel (ALL|DEBUG|INFO|WARN|ERROR) #IMPLIED>

<!--
    Defines a 'Flow' to implement a GreenVulcanoESB communication
    primitive with a workflow actually executable.

    Using the sub-element 'Conditions' can be (re)defined the conditions
    for possible use in the workflow routing.

    #Label: @name
    #Icon: default.png
    #SelectOnInsert
    #Template:
        <xsl:template match="Flow">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT Flow (Description?, Conditions?, (%flow-nodes;)*)>
<!--
    Indicates the initial node of the workflow.
    From this node begins running when an instance of the workflow is invoked.

    #References: GVOperationNode/@id
    #References: GVNodeCheck/@id
    #References: ChangeGVBufferNode/@id
    #References: GVNotificationNode/@id
    #References: GVIteratorOperationNode/@id
    #References: GVCoreCallNode/@id
    #References: GVSubFlowCallNode/@id
    #References: GVSavePointNode/@id
    #References: GVSubFlowSpawnNode/@id
    #References: GVSubFlowParallelNode/@id
    #References: GVSubFlowSplittedNode/@id
-->
<!ATTLIST Flow  first-node CDATA #REQUIRED>
<!--
    X position of the start node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST Flow  point-x CDATA #IMPLIED>
<!--
    Y position of the start node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST Flow  point-y CDATA #IMPLIED>

<!--
    Defines a 'SubFlow' to define a sub-workflow to be used in a GreenVulcanoESB workflow.

    Using the sub-element 'Conditions' can be (re)defined the conditions
    for possible use in the workflow routing.

    #Label: @name
    #Icon: default.png
    #SelectOnInsert
    #Template:
        <xsl:template match="SubFlow">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT SubFlow (Description?, Conditions?, (%flow-nodes;)*)>
<!--
    Subflow name.

    #NotNull
    #Unique: ../SubFlow/@name
-->
<!ATTLIST SubFlow  name CDATA #REQUIRED>
<!--
    Indicates the initial node of the workflow.
    From this node begins running when an instance of the workflow is invoked.

    #References: GVOperationNode/@id
    #References: GVNodeCheck/@id
    #References: ChangeGVBufferNode/@id
    #References: GVNotificationNode/@id
    #References: GVIteratorOperationNode/@id
    #References: GVCoreCallNode/@id
    #References: GVSubFlowCallNode/@id
    #References: GVSavePointNode/@id
    #References: GVSubFlowSpawnNode/@id
    #References: GVSubFlowParallelNode/@id
    #References: GVSubFlowSplittedNode/@id
-->
<!ATTLIST SubFlow  first-node CDATA #REQUIRED>
<!--
    X position of the start node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST SubFlow  point-x CDATA #IMPLIED>
<!--
    Y position of the start node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST SubFlow  point-y CDATA #IMPLIED>
<!--
    Defines the master logger Level for the SubFlow.
    Default to ALL.
-->
<!ATTLIST SubFlow  loggerLevel (ALL|DEBUG|INFO|WARN|ERROR) #IMPLIED>

<!--
    Is a operative node indicating that GreenVulcanoESB must
    perform a communication with external systems (invocation,
    sending messages, receiving messages).

    If the node indicates a receive a message (see attribute 'op-type'),
    you can also define a 'DequeueFilter' that sets certain
    conditions that the received message must meet.

    #Label: @id
    #Warn: {{../GVOperationNode[count(DequeueFilter)!=0 and @op-type!='dequeue']}} DequeueFilter can be defined only if 'op-type'='dequeue'
-->
<!ELEMENT GVOperationNode (Description?, InputServices?, OutputServices?, DequeueFilter?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVOperationNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVOperationNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVOperationNode">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVOperationNode id CDATA #REQUIRED>
<!--
    Indicates the type of operation that GreenVulcanoESB must execute:

    - call: GreenVulcanoESB must perform an invocation.

    - enqueue: GreenVulcanoESB must perform a send a message.

    - dequeue: GreenVulcanoESB must execute a receipt of a message.
        If it is 'dequeue' then you can also enter a sub-element 'DequeueFilter'.
-->
<!ATTLIST GVOperationNode op-type (call | enqueue | dequeue) #REQUIRED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../IteratorGVOperationNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../IteratorGVOperationNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVOperationNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVOperationNode output CDATA #IMPLIED>
<!--
    Indicates the next node in the workflow to execute when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVOperationNode next-node-id CDATA #REQUIRED>
<!--
    Identifies the system involved in communication.
    Can be selected from systems declared as 'Participant' in the 'Operation' section.

    #References: ../../Participant/@id-system
-->
<!ATTLIST GVOperationNode id-system CDATA #REQUIRED>
<!--
    Identifies the communication operation selected by the channel of the system
    indicated by the 'id-system' attribute.

    Only the operations of the type declared in the 'op-type' attribute can be
    selected.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel[@id-channel=current()/../../Participant[@id-system=current()/@id-system]/@id-channel]/*[@type=current()/@op-type]/@name
-->
<!ATTLIST GVOperationNode operation-name CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVOperationNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVOperationNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVOperationNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.

-->
<!ATTLIST GVOperationNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.

-->
<!ATTLIST GVOperationNode dump-env-in-out (true|false) #IMPLIED>

<!--
    Used in 'GVOperationNode' with 'op-type' set to 'dequeue',
    allows you to define the criteria for receiving messages.
    Will be received only messages that meet the criteria.

    May have one or more subelements of the following types:

    - IDFilter
        would set the criteria of the received message ID.

    - RetCodeFilter
        would set the criteria on the return code of the received message.

    - SystemFilter
        would set the criteria field system of the received message.

    - ServiceFilter
        would set the criteria in the field service of the received message.

    - PropertyFilter
        would set the criteria on the properties of the received message

    If multiple policies are specified, then the message to receive must meet
    them all.

    #Table: | Filters | *[@type='filter'] | Name | @name | Enabled | @enabled | Use Input | @use-input | Description | Description
    #Warn: {{../DequeueFilter[count(IDFilter[@enabled='yes'])>1]}} A single enabled IDFilter is admitted.
    #Warn: {{../DequeueFilter[count(RetCodeFilter[@enabled='yes'])>1]}} A single enabled RetCodeFilter is admitted.
    #Warn: {{../DequeueFilter[count(SystemFilter[@enabled='yes'])>1]}} A single enabled SystemFilter is admitted.
    #Warn: {{../DequeueFilter[count(ServiceFilter[@enabled='yes'])>1]}} A single enabled ServiceFilter is admitted.
    #SelectOnInsert

    #Template:

        <xsl:template match="DequeueFilter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="*[@type='filter' and @enabled='yes']">
                Active filters:
                <p/>
                <xsl:for-each select="*[@type='filter' and @enabled='yes']">
                    <b><xsl:value-of select="@name"/></b>
                    <xsl:if test="@field">
                        (<small>field</small><b><xsl:text> </xsl:text><xsl:value-of select="@field"/></b>)
                    </xsl:if>
                    <xsl:if test="Description">
                        : <small><xsl:value-of select="Description"/></small>
                    </xsl:if>
                    <br/>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="not(*[@type='filter' and @enabled='yes'])">
                No active filters.
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT DequeueFilter (Description?, (%filters;)*)>


<!--
    Only receives messages with the ID equal to that specified in the request.

    You can specify only one active instance of IDFilter.
-->
<!ELEMENT IDFilter (Description)?>
<!--
    IDFilter type.

    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST IDFilter     type CDATA #FIXED "filter">
<!--
    IDFilter name.

    Unmodifiable.
-->
<!ATTLIST IDFilter     name CDATA #FIXED "IDFilter">
<!--
    Always uses the input GVBuffer.id.

    Unmodifiable.
-->
<!ATTLIST IDFilter     use-input CDATA #FIXED "yes">
<!--
    Specifies whether the filter is active or not.
    Can be used to disable the filter temporarily without deleting
    it from the configuration.
-->
<!ATTLIST IDFilter     enabled (yes | no) #REQUIRED>


<!--
    Lets you specify a condition on the return code field the
    received message must meet.

    Through attributes 'min' and 'max' you can specify a range of
    allowable values for the return code.

    You can specify only one active instance of RetCodeFilter.

    #Warn: {{../RetCodeFilter[@use-input='no' and not(@min or @max)]}} The 'min' and/or 'max' attributes must be defined
    #Warn: {{../RetCodeFilter[@use-input='yes' and (@min or @max)]}} The 'min' and/or 'max' attributes must not be defined
-->
<!ELEMENT RetCodeFilter (Description)?>
<!--
    RetCodeFilter type.

    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RetCodeFilter type        CDATA #FIXED "filter">
<!--
    RetCodeFilter name.

    Unmodifiable.
-->
<!ATTLIST RetCodeFilter name        CDATA #FIXED "RetCodeFilter">
<!--
    Never uses the input GVBuffer.retCode.

    Unmodifiable.
-->
<!ATTLIST RetCodeFilter use-input   CDATA #FIXED "no">
<!--
    Specifies whether the filter is active or not.
    Can be used to disable the filter temporarily without deleting
    it from the configuration.
-->
<!ATTLIST RetCodeFilter enabled (yes | no) #REQUIRED>
<!--
    Specifies the minimum acceptable value for the return code field.

    #NotNull
-->
<!ATTLIST RetCodeFilter min CDATA #IMPLIED>
<!--
    Specifies the maximum acceptable value for the return code field.

    #NotNull
-->
<!ATTLIST RetCodeFilter max CDATA #IMPLIED>


<!--
    Lets you specify a condition on the system field the received
    message must meet.

    Can constrain the system field to a fixed constant, or require
    that the system field is the same as the request.

    You can specify only one active instance of SystemFilter.

    #Warn: {{../SystemFilter[@use-input='no' and not(@value)]}} The 'value' attribute must be defined
    #Warn: {{../SystemFilter[@use-input='yes' and @value]}} The 'value' attribute must not be defined
-->
<!ELEMENT SystemFilter (Description)?>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SystemFilter  type CDATA #FIXED "filter">
<!--
    Unmodifiable.
-->
<!ATTLIST SystemFilter  name CDATA #FIXED "SystemFilter">
<!--
    Specifies whether the filter is active or not.
    Can be used to disable the filter temporarily without deleting
    it from the configuration.
-->
<!ATTLIST SystemFilter  enabled (yes | no) #REQUIRED>
<!--
    If 'yes' then requires that the field system of the received message
    has the same value of the field system of the request.

    If 'no' then requires that the field system of the received message
    has the value specified by 'value'.
-->
<!ATTLIST SystemFilter  use-input (yes | no) #REQUIRED>
<!--
    System field value of the received message.
    Meaningful only if 'use-input' is set to 'no'.

    #NotNull
-->
<!ATTLIST SystemFilter  value CDATA #IMPLIED>


<!--
    Lets you specify a condition on the service field the received
    message must meet.

    Can constrain the service field to a fixed constant, or require
    that the service field is the same as the request.

    You can specify only one active instance of ServiceFilter.

    #Warn: {{../ServiceFilter[@use-input='no' and not(@value)]}} The 'value' attribute must be defined
    #Warn: {{../ServiceFilter[@use-input='yes' and @value]}} The 'value' attribute must not be defined
-->
<!ELEMENT ServiceFilter (Description)?>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ServiceFilter type CDATA #FIXED "filter">
<!--
    Unmodifiable.
-->
<!ATTLIST ServiceFilter name CDATA #FIXED "ServiceFilter">
<!--
    Specifies whether the filter is active or not.
    Can be used to disable the filter temporarily without deleting
    it from the configuration.
-->
<!ATTLIST ServiceFilter enabled (yes | no) #REQUIRED>
<!--
    If 'yes' then requires that the field service of the received message
    has the same value of the field service of the request.

    If 'no' then requires that the field service of the received message
    has the value specified by 'value'.
-->
<!ATTLIST ServiceFilter use-input (yes | no) #REQUIRED>
<!--
    Service field value of the received message.
    Meaningful only if 'use-input' is set to 'no'.

    #NotNull
-->
<!ATTLIST ServiceFilter value CDATA #IMPLIED>

<!--
    Lets you specify a condition on a property the received message
    must meet.

    Can constrain the property to a fixed constant, or require
    that the property is the same as the request.

    You can specify multiple instances of PropertyFilter to work
    on different fields.

    #Label: @name
    #Warn: {{../PropertyFilter[@use-input='no' and not(@value)]}} When use-input='no', the 'value' attribute must be defined
    #Warn: {{../PropertyFilter[@use-input='yes' and @value]}} When use-input='yes', the 'value' attribute must not be defined
-->
<!ELEMENT PropertyFilter (Description)?>
<!--
    PropertyFilter type.

    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST PropertyFilter type CDATA #FIXED "filter">
<!--
    PropertyFilter name.

    Unmodifiable.
-->
<!ATTLIST PropertyFilter name CDATA #FIXED "PropertyFilter">
<!--
    Specifies whether the filter is active or not.
    Can be used to disable the filter temporarily without deleting
    it from the configuration.
-->
<!ATTLIST PropertyFilter enabled (yes | no) #REQUIRED>
<!--
    If 'yes' then requires that the property of the received message
    has the same value of the property of the request.

    If 'no' then requires that the property of the received message
    has the value specified by 'value'.
-->
<!ATTLIST PropertyFilter use-input (yes | no) #REQUIRED>
<!--
    Name of property to which to apply the filter.
    The name of the property used on the filter will be prefixed with
    the string 'p$'.

    #NotNull
    #Unique: ../PropertyFilter/@property
-->
<!ATTLIST PropertyFilter property CDATA #REQUIRED>
<!--
    Property value of the received message.
    Meaningful only if 'use-input' is set to 'no'.
-->
<!ATTLIST PropertyFilter value CDATA #IMPLIED>

<!--
    Allows you to define a node in a workflow where you can make
    a change to the data buffer.

    #Label: @id
    #ErrorIcon: change_error.png
-->
<!ELEMENT ChangeGVBufferNode (Description?, ChangeGVBuffer?, OutputServices?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ChangeGVBufferNode      type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
-->
<!ATTLIST ChangeGVBufferNode      op-type CDATA #FIXED "change GVBuffer">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ChangeGVBufferNode      class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.ChangeGVBufferNode">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST ChangeGVBufferNode      id CDATA #REQUIRED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../ChangeGVBufferNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST ChangeGVBufferNode      input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST ChangeGVBufferNode      output CDATA #IMPLIED>
<!--
    Indicates the next node in the workflow to execute when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST ChangeGVBufferNode      next-node-id CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST ChangeGVBufferNode      point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST ChangeGVBufferNode      point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST ChangeGVBufferNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST ChangeGVBufferNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST ChangeGVBufferNode dump-env-in-out (true|false) #IMPLIED>


<!--
    Ends the workflow execution returning a result to the caller.

    Before returning to the caller can also make changes to the
    data buffer, using the sub-element 'ChangeGVBuffer'.

    You can also force the workflow exit with exception using
    the sub-element 'GVThrowException'.

    Depending on the outcome of operations performed by
    GreenVulcanoESB, may be present in the execution
    environment GVBuffer objects or exceptions.
    GVEndNode behavior will be different depending on
    the type of data that are available:

    - GVBuffer
        If GVEndNode has a sub-element 'ChangeGVBuffer',
        the buffer will be changed before returning.
        If GVEndNode has a sub-element 'GVThrowException',
        the configured exception will be raised from independently the buffer.
        If GVEndNode has no sub-elements 'ChangeGVBuffer' nor 'GVThrowException', the
        data buffer will be returned as is.

    - exception
        If GVEndNode has a sub-element 'GVThrowException',
        will raise the configured  exception. At this exception
        will be attached that present in the environment.
        If GVEndNode not have a sub-element 'GVThrowException',
        the exception present in the environment will be raised.

    Note that the type of data (GVBuffer or exception) from the environment
    is unpredictable, depends on the outcome of operations undertaken
    by GreenVulcanoESB.

    #Label: @id
    #ErrorIcon: end_error.png
-->
<!ELEMENT GVEndNode (Description?, (ChangeGVBuffer | GVThrowException)?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVEndNode       type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
-->
<!ATTLIST GVEndNode       op-type CDATA #FIXED "end">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVEndNode       class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVEndNode">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVEndNode       id CDATA #REQUIRED>
<!--
    Specifies the name of the object contained in the execution environment,
    to return to the client.

    The actual result sent to the client depends on the output
    (GVBuffer or exception) and the presence of sub-elements
    'ChangeGVBuffer' and 'GVThrowException'.

    #NotNull
    #References: ../GVOperationNode/@input
    #References: ../GVOperationNode/@output
    #References: ../GVIteratorOperationNode/@input
    #References: ../GVIteratorOperationNode/@output
    #References: ../GVCoreCallNode/@input
    #References: ../GVCoreCallNode/@output
    #References: ../GVSubFlowCallNode/@input
    #References: ../GVSubFlowCallNode/@output
    #References: ../GVNodeCheck/@input
    #References: ../ChangeGVBufferNode/@input
    #References: ../ChangeGVBufferNode/@output
    #References: ../GVNotificationNode/@output
    #References: ../GVSavePointNode/@input
    #References: ../GVSubFlowSpawnNode/@input
    #References: ../GVSubFlowSpawnNode/@output
    #References: ../GVSubFlowParallelNode/@input
    #References: ../GVSubFlowParallelNode/@output
    #References: ../GVSubFlowSplittedNode/@input
    #References: ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVEndNode       output CDATA #REQUIRED>
<!--
    This parameter lets you specify whether the GVEndNode
    ending a business process.
    Is particularly significant for the statistics.

    Some business flow are fulfilled by more invocations
    of GreenVulcanoESB.
    For example, consider the following scenario:

        - a client invokes Request for the request
        - the server invokes SendReply to send the reply
        - the client calls GetReply to get the response

    In the previous scenario are invoked three GreenVulcanoESB workflows,
    but the business flow only ends with the end of the third invocation.

    Only on the third workflow GVEndNode must be setted 'end-business-process' equal to 'yes'.
-->
<!ATTLIST GVEndNode   end-business-process (yes|no) #IMPLIED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVEndNode       point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVEndNode       point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVEndNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVEndNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVEndNode dump-env-in-out (true|false) #IMPLIED>
<!--
    If true and the service have a GVSavePointNode then the state informations are keep on DB,
    otherwise the state informations are canceled from DB.
    Default false.
-->
<!ATTLIST GVEndNode keep-savepoint (true|false) #IMPLIED>

<!--
    Is used in a 'GVEndNode' and allow stopping the workflow of
    GreenVulcanoESB with exception.

    Exceptions are allowed only of type it.greenvulcano.gvesb.buffer.GVException
    and its subclasses.

    The exception-id attribute or value can contain metadata to be replaced
    with fields of any GVBuffer in the execution environment.
    The parameters are always written in ${param} format.
    The possible parameters for a GVBuffer object are:
        - for standard fields, the field name
            - ${system}
            - ${service}
            - ${id}
            - ${retCode}
        - for properties:
            - ${property['PROP_NAME']}

    All metadata are written in accordance with the above format.
    If an error occurs the metadata will not be replaced.

    #Label: @exception-id
-->
<!ELEMENT GVThrowException (Description?, ExceptionParam*)>
<!--
    ID of the exception.

    #NotNull
-->
<!ATTLIST GVThrowException        exception-id CDATA #REQUIRED>
<!--
    Exception class.
    Exceptions are allowed only of type it.greenvulcano.gvesb.buffer.GVException
    and its subclass.

    #NotNull
-->
<!ATTLIST GVThrowException        class CDATA "it.greenvulcano.gvesb.core.exc.GVCoreException">


<!--
    Specifies parameters to pass to the exception message.

    #Label: @name
    #SelectOnInsert
-->
<!ELEMENT ExceptionParam (Description)?>
<!--
    Parameter name.

    #NotNull
    #Unique: ../ExceptionParam/@name
-->
<!ATTLIST ExceptionParam        name CDATA #REQUIRED>
<!--
    Parameter value.
-->
<!ATTLIST ExceptionParam        value CDATA #REQUIRED>

<!--
    Define the nodes where GreenVulcanoESB makes decisions and determines
    which is the next node to execute.
    Each 'GVNodeCheck' has a basic routing mechanism that chooses the next
    node only by the presence or absence of errors reported by exceptions.
    In any case, you can define more sophisticated routing mechanisms
    defining the sub-elements 'GVRouting', allowing many opportunities
    for branching flows.

    - BASE (without 'GVRouting')
        Depending on the type of input (GVBuffer or exception) will be
        designated as the next node, the one expressed by the attributes
        'default-id' or 'on-exception-id'.

    - ADVANCED (with 'GVRouting')
        Regardless of the type of input (GVBuffer or exception) will
        assess the conditions for routing the order they are defined.
        The first condition is verified the evaluation ends and the
        corresponding node is designated as the next node of the workflow.
        If neither GVRouting condition is met and is considering an
        exception continues from the node specified by 'on-exception-id'
        otherwise continues from the node specified by 'default-id'.
        If 'default-id' is not configured will create an exception type
        it.greenvulcano.gvesb.core.GVCoreException and the node specified
        by 'on-exception-id' is the next node to execute.

    Routing conditions refer to conditions specified by the items 'Conditions'
    present on the nodes 'Flow', 'Service' and 'Client' (from high to low priority).
    The conditions can be redefined in several places, in case of ambiguity
    will be considered according to priority.

    #Label: @id
    #Warn: {{../GVNodeCheck[not(@default-id) and not(GVRouting)]}} Please specify default-id or at least a GVRouting
    #ErrorIcon: check_error.png
-->
<!ELEMENT GVNodeCheck (Description?, GVRouting*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVNodeCheck     type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
-->
<!ATTLIST GVNodeCheck     op-type CDATA #FIXED "check">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVNodeCheck     class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVNodeCheck">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVNodeCheck     id CDATA #REQUIRED>
<!--
    Object from the environment on which to run the check.

    #NotNull
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVNodeCheck[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVNodeCheck     input CDATA #REQUIRED>
<!--
    Node on which transfer control in case of exception.
    Note that any items 'GVRouting' take precedence over
    the choices made by GVNodeCheck.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVNodeCheck     on-exception-id CDATA #REQUIRED>
<!--
    Node on which transfer control if not apply any 'GVRouting'
    and are not in the case of exception.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVNodeCheck     default-id CDATA #IMPLIED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVNodeCheck     point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVNodeCheck     point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVNodeCheck breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVNodeCheck dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVNodeCheck dump-env-in-out (true|false) #IMPLIED>

<!--
    Associates a condition to a node of the workflow.
    If the condition is satisfied, the workflow transfers control
    to the associated node.

    #Label: @condition
    #SelectOnInsert
    #Template:
        <xsl:template match="GVRouting">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            Condition: <b><xsl:text> </xsl:text><xsl:value-of select="@condition"/></b><br/>
            Next node: <b><xsl:text> </xsl:text><xsl:value-of select="@next-node-id"/></b><br/>
        </xsl:template>
-->
<!ELEMENT GVRouting (Description)?>
<!--
    Name of the condition to be verified.
    The actual meaning of the condition is specified by the elements
    'Conditions' present on the nodes 'Flow' o 'SubFlow', 'Operation' and 'Service'.

    #NotNull
    #References: ../../Conditions/*[@type='condition']/@condition
    #References: ../../../Conditions/*[@type='condition']/@condition
    #References: ../../../../Conditions/*[@type='condition']/@condition
    #Unique: ../GVRouting/@condition
-->
<!ATTLIST GVRouting       condition CDATA #REQUIRED>
<!--
    Node to execute if the condition is verified.

    #References: ../preceding-sibling::*/@id
    #References: ../following-sibling::*/@id
-->
<!ATTLIST GVRouting       next-node-id CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVRouting       point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVRouting       point-y CDATA #IMPLIED>

<!--
    Define the nodes where GreenVulcanoESB indicates a notification
    on execution of the workflow.
    For every 'GVNotificationNode' has an associated list of notifications
    (Notification) that manage the type of message to send and the
    technology used to make the notification (Log4J, JMX.)

    The order in which notifications are made is that in which they are defined.

    A notification can be defined as 'critical', which is vital for
    the proper execution of the workflow.
    If a notification 'critical' throws an exception, the flow fails
    and the exception is inserted into the buffer specified by the
    attribute 'output' of GVNotificationNode.

    The GVNotificationNode not read an input buffer, as may be specified
    a different one for each notification.

    #Label: @id
    #ErrorIcon: notification_error.png
-->
<!ELEMENT GVNotificationNode (Description?, (%notification-nodes;)*)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVNotificationNode      type CDATA #FIXED "flow-node">

<!--
    Unmodifiable.
-->
<!ATTLIST GVNotificationNode      op-type CDATA #FIXED "notification">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVNotificationNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVNotificationNode">

<!--
    Uniquely identifies the notification node.
    Not to be confused with the id of individual notifications.

    #Unique: ../*/@id
-->
<!ATTLIST GVNotificationNode id CDATA #REQUIRED>

<!--
    A notification can be defined as 'critical', which is vital for
    the proper execution of the workflow.
    The parameter 'on-critical-error' is used to decide whether
    to stop or not the notifications sequence in the occurrence
    of exception for a notification defined 'critical'
-->
<!ATTLIST GVNotificationNode on-critical-error ( break | continue ) #REQUIRED>

<!--
    This attribute defines the input buffer, from which
    read data for notifications execution.

    This buffer is returned as output if no exception is thrown by any critical notification.

    #NotNull
-->
<!ATTLIST GVNotificationNode input CDATA #REQUIRED>

<!--
    This parameter specifies the output buffer where to put a possible
    exception generated by a 'critical' notification.

    #NotNull
-->
<!ATTLIST GVNotificationNode output CDATA #REQUIRED>

<!--
    Indicates the next node in the workflow to execute
    when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVNotificationNode next-node-id CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVNotificationNode      point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVNotificationNode      point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVNotificationNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVNotificationNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVNotificationNode dump-env-in-out (true|false) #IMPLIED>

<!--
    The GVWaitNode allows you to enter the delays in the
    execution of a workflow.

    #Label: @id
    #ErrorIcon: wait_error.png
-->
<!ELEMENT GVWaitNode (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVWaitNode      type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
-->
<!ATTLIST GVWaitNode      op-type CDATA #FIXED "wait">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVWaitNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVWaitNode">
<!--
    Uniquely identifies the wait node.

    #Unique: ../*/@id
-->
<!ATTLIST GVWaitNode id CDATA #REQUIRED>
<!--
    Defines the duration of waiting, in ms.

    #NotNull
-->
<!ATTLIST GVWaitNode timeout CDATA #REQUIRED>
<!--
    Object used for the 'sleep-if' check.

    #NotNull
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVWaitNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVWaitNode      input CDATA #REQUIRED>
<!--
    Defines the type of data that enables the execution of wait.
-->
<!ATTLIST GVWaitNode sleep-if ( exception | both | gvbuffer ) #REQUIRED>
<!--
    Indicates the next node in the workflow to execute when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVWaitNode next-node-id CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVWaitNode      point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVWaitNode      point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVWaitNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVWaitNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVWaitNode dump-env-in-out (true|false) #IMPLIED>

<!--
    The element 'Participant' denotes a system and its channel
    by which participates in the implementation of the workflow.

    #Label: @id-system
    #Icon: default.png
    #SelectOnInsert
-->
<!ELEMENT Participant       (Description?)>
<!--
    Identifies a system configured in the 'Systems' section
    as a workflow participant.

    #References: /GVCore/GVSystems/Systems/System/@id-system
    #Warn: {{../Participant[count(../Participant[@id-system=current()/@id-system and @id-channel=current()/@id-channel])>1]}} System and Channel pair must be unique
-->
<!ATTLIST Participant id-system CDATA #REQUIRED>
<!--
    Specifies the channel to which the system participates.
    The operations used in the workflow can only be selected by this channel.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel/@id-channel
    #Warn: {{../Participant[count(../Participant[@id-system=current()/@id-system and @id-channel=current()/@id-channel])>1]}} System and Channel pair must be unique
-->
<!ATTLIST Participant id-channel CDATA #REQUIRED>

<!--
    Defines actions to perform on the domain against the following events:
    - FailureAction -> useful to disable a component (ejb, mdb) against a
                       configurable rate of errors.
    - EnableAction  -> useful to enable a component (ejb, mdb) against the
                       enabling of the operation or service.
    - DisableAction -> useful to disable a component (ejb, mdb) against the
                       disabling of the operation or service.
-->
<!ELEMENT OperationManagement   (Description?, FailureAction?, EnableAction?, DisableAction?)>

<!--
    Useful to disable a component (ejb, mdb) against a
    configurable rate of errors.

    #Label: @component
    #SelectOnInsert
-->
<!ELEMENT FailureAction   (Description?)>
<!--
    Specifies the name of the component to disable.

    #References: /GVCore/GVDomainManager/Component/@name
-->
<!ATTLIST FailureAction component CDATA #REQUIRED>
<!--
    Specifies the number of bankruptcies in the second for the given
    operation before disabling the component.
    The errors relate to a single server, and then consider that there
    are N servers in the cluster.

    #NotNull
-->
<!ATTLIST FailureAction max-failure-rate CDATA #REQUIRED>

<!--
    Useful to enable a component (ejb, mdb) against the enabling of
    the operation or service.

    #Label: @component
    #SelectOnInsert
-->
<!ELEMENT EnableAction   (Description?)>
<!--
    Specifies the name of the component to enable.

    #References: /GVCore/GVDomainManager/Component/@name
-->
<!ATTLIST EnableAction component CDATA #REQUIRED>

<!--
    Useful to disable a component (ejb, mdb) against the disabling
    of the operation or service.

    #Label: @component
    #SelectOnInsert
-->
<!ELEMENT DisableAction   (Description?)>
<!--
    Specifies the name of the component to disable.

    #References: /GVCore/GVDomainManager/Component/@name
-->
<!ATTLIST DisableAction component CDATA #REQUIRED>

<!--
    Node that can perform a sequence of invocations to the operations
    of the VCL or other workflows.
    The iterations are made on the elements of a collection built by a
    CollectionDataProvider configured through the attribute 'collection-DP'.
    Collection elements are in turn inserted in the GVBuffer object to
    pass to the plug-in with which loop through invocations.

    You can configure a condition of premature exit from the loop.
    By default, even if a particular iteration throws an exception
    all the iterations will be executed anyway.

    #Label: @id
    #SelectOnInsert
    #Icon: iterator.png
    #Template:
        <xsl:template match="GVIteratorOperationNode">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVIteratorOperationNode  (Description?, (CoreCall|SubFlowCall|(%proxy_ops;)), exit-loop-condition?, InputServices?, OutputServices?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVIteratorOperationNode type CDATA #FIXED "flow-node">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVIteratorOperationNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVIteratorOperationNode">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVIteratorOperationNode id CDATA #REQUIRED>
<!--
    Indicates the type of operation that GreenVulcanoESB must execute:
    - call: GreenVulcanoESB must perform an invocation.
    - enqueue: GreenVulcanoESB must perform a send a message.
    - corecall: GreenVulcanoESB must execute an internal service call.
    - subcall: GreenVulcanoESB must execute an Operation's SubFlow call.
-->
<!ATTLIST GVIteratorOperationNode op-type (call | enqueue | corecall | subcall) #REQUIRED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVIteratorOperationNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVIteratorOperationNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVIteratorOperationNode output CDATA #IMPLIED>
<!--
    Name of Data Provider to use. Must return a collection of objects.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVIteratorOperationNode collection-dp CDATA #IMPLIED>
<!--
    If true, GVBuffer.object output of each iteration is added to a List then the List is returned as iterations output.
    If false, is returned the input GVBuffer.
    Default is true.
-->
<!ATTLIST GVIteratorOperationNode accumulate-output (true|false) #IMPLIED>
<!--
    If true, the full GVBuffer/Exception output of each iteration is added to a List then the List is returned as iterations output.
    Work in pair with @accumulate-output.
    Default is false.
-->
<!ATTLIST GVIteratorOperationNode full-iteration-output (true|false) #IMPLIED>
<!--
    Indicates the next node in the workflow to execute when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVIteratorOperationNode next-node-id CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVIteratorOperationNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVIteratorOperationNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVIteratorOperationNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVIteratorOperationNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVIteratorOperationNode dump-env-in-out (true|false) #IMPLIED>

<!--
    Defines the parameters to invoke a GreenVulcanoESB service.

    Dynamic fields can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                             is equivalent to 'decode', with the difference that 'condX'
                             can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource

    #CompositeLabel: || @id-service | :: | @id-system | :: | @operation
    #Icon: corecall_iterator.png
    #Warn: {{../../GVIteratorOperationNode[not(@op-type='corecall')]}} Specify 'CoreCall' only if it is the type of GVIteratorOperationNode 'corecall'.
-->
<!ELEMENT CoreCall EMPTY>
<!--
    If 'true' then id-system, id-service and operation attributes can contains metadata to be resolved at runtime.
    The default is 'false'.
-->
<!ATTLIST CoreCall dynamic (true | false) #IMPLIED>
<!--
    Name of service to call.

    #References: {{../CoreCall[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVServices/Services/Service/@id-service
    #NotNull
-->
<!ATTLIST CoreCall id-service CDATA #REQUIRED>
<!--
    Name of service'client.

    #NotNull
    #References: {{../CoreCall[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST CoreCall id-system CDATA #IMPLIED>
<!--
    Operation to invoke on the service.
    Corresponds to a GreenVulcanoESB communication operation or to a
    forward.

    #NotNull
    #References: {{../CoreCall[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVServices/Services/Service[@id-service=current()/@id-service]/Operation[@name!='Forward']/@name
    #References: {{../CoreCall[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVServices/Services/Service[@id-service=current()/@id-service]/Operation[@name='Forward']/@forward-name
-->
<!ATTLIST CoreCall operation CDATA #REQUIRED>
<!--
    Name of Data Provider to use to modify the GVBuffer
    content at each iteration.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST CoreCall ref-dp CDATA #IMPLIED>
<!--
    If true change the log context fields according to the new System/Service/Operation values.
    Default true.
-->
<!ATTLIST CoreCall change-log-context (true|false) #IMPLIED>
<!--
    If true change the log master service with the used one (configured or calculated), in order to write log messages into a different log file.
    Used only if @change-log-context is true.
    Default false.
-->
<!ATTLIST CoreCall change-log-master-service (true|false) #IMPLIED>

<!--
    Defines the parameters to invoke a GreenVulcanoESB Operation's SubFlow.

    Dynamic fields can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource

    #Label: @subflow
    #Icon: subcall_iterator.png
    #Warn: {{../../GVIteratorOperationNode[not(@op-type='subcall')]}} Specify 'SubFlowCall' only if it is the type of GVIteratorOperationNode 'subcall'.
-->
<!ELEMENT SubFlowCall EMPTY>
<!--
    If 'true' then subflow attribute can contain metadata to be resolved at runtime.
    The default is 'false'.
-->
<!ATTLIST SubFlowCall dynamic (true | false) #IMPLIED>
<!--
    Name of subflow to call.

    #References: {{../SubFlowCall[not(@dynamic) or (@dynamic = 'false')]}} current()/ancestor::Operation/SubFlow/@name
    #NotNull
-->
<!ATTLIST SubFlowCall subflow CDATA #REQUIRED>
<!--
    Name of Data Provider to use to modify the GVBuffer
    content at each iteration.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST SubFlowCall ref-dp CDATA #IMPLIED>
<!--
    If true change the log context fields according to the new Operation(SubFlow) value.
    Default true.
-->
<!ATTLIST SubFlowCall change-log-context (true|false) #IMPLIED>

<!--
    Defines a condition that occur during an iteration,
    causing the interruption of the loop calls.

    #SelectOnInsert
    #Template:
    <xsl:template match="exit-loop-condition">
        <table cellpadding="0" cellspacing="0">
        <xsl:if test="exception-event">
            <tr valign="top">
                <td width="80">Exit loop on:</td>
                <td width="100"></td>
                <td><tt><xsl:value-of select="exception-event/@value"/></tt></td>
            </tr>
        </xsl:if>
        </table>
    <xsl:if test="Description">
        <small><xsl:value-of select="Description"/></small>
    </xsl:if>
    </xsl:template>
-->
<!ELEMENT exit-loop-condition  (Description?, (exception-event))>

<!--
    Defines the type of exception that, if launched at an iteration,
    causing the interruption of the loop calls.

    #SelectOnInsert
    #Template:
    <xsl:template match="exception-event">
            <table cellpadding="0" cellspacing="0">
            <tr valign="top">
                <td width="80">Exit loop on:</td>
                <td width="100"></td>
                <td><tt><xsl:value-of select="@value"/></tt></td>
            </tr>
        </table>
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT exception-event (Description?) >

<!--
    The type of exception.
    If the execution of a call sequence throws an exception
    of this type (or its subtype), the loop stops.
    The default is 'java.lang.Exception'.

    #NotNull
-->
<!ATTLIST exception-event       value  CDATA "java.lang.Exception" >

<!--
    Through this attribute you can specify whether the exception
    that it stopped the loop iterations must be propagated
    (causing the total failure of the call to GVIteratorOperationNode plug-in)
    or be retained.
    The default value is 'true'.
-->
<!ATTLIST exception-event       rethrow (true|false) #IMPLIED>

<!--
    Node that allows direct invocation of a GreenVulcanoESB core workflow.

    Dynamic fields can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource

    #Label: @id
    #Warn: {{self::GVCoreCallNode[name(/*)!='GVCore']}} GVCoreCallNode can only be invoked by the core
    #Icon: GVCoreCall.png
    #Template:

        <xsl:template match="GVCoreCallNode">
            <table cellpadding="0" cellspacing="0">

                <tr valign="top">
                    <td>GVCore Service</td>
                </tr>
                <tr><td height="5"/></tr>
                <tr valign="top">
                    <td width="100">System:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@id-system"/></b></td>
                    <td width="100">Service:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@id-service"/></b></td>
                    <td width="100">Operation:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@operation"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVCoreCallNode (Description?, InputServices?, OutputServices?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVCoreCallNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVCoreCallNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVCoreCallNode">
<!--
    Unmodifiable.
-->
<!ATTLIST GVCoreCallNode op-type CDATA #FIXED "corecall">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVCoreCallNode id CDATA #REQUIRED>
<!--
    If 'true', the id-system, id-service and operation attributes can contains metadata to be resolver at runtime.
-->
<!ATTLIST GVCoreCallNode  dynamic (true | false) #IMPLIED
>
<!--
    Name of service to invoke.

    #NotNull
    #References: {{../GVCoreCallNode[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVServices/Services/Service/@id-service
-->
<!ATTLIST GVCoreCallNode   id-service CDATA #REQUIRED>
<!--
    Name of service'client.

    #NotNull
    #References: {{../GVCoreCallNode[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST GVCoreCallNode   id-system CDATA #IMPLIED>
<!--
    Name of service's operation to invoke

    #NotNull
    #References: {{../GVCoreCallNode[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVServices/Services/Service[@id-service=current()/@id-service]/Operation[@name!='Forward']/@name
    #References: {{../GVCoreCallNode[not(@dynamic) or (@dynamic = 'false')]}} /GVCore/GVServices/Services/Service[@id-service=current()/@id-service]/Operation[@name='Forward']/@forward-name
-->
<!ATTLIST GVCoreCallNode   operation CDATA #REQUIRED>
<!--
    Name of Data Provider to use input manipulation.
    This Data Provider will receive in input a GVBuffer and must
    return the object to be inserted in GVBuffer.object.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVCoreCallNode input-ref-dp CDATA #IMPLIED>
<!--
    Name of Data Provider to use for output manipulation.
    This Data Provider will receive in input a GVBuffer and must
    return the object to be inserted in GVBuffer.object.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVCoreCallNode output-ref-dp CDATA #IMPLIED>
<!--
    If 'true' are overwritten SYSTEM and SERVICE fields of GVBuffer.
    The default is 'false'.
-->
<!ATTLIST GVCoreCallNode  overwrite-sys-svc (true | false) #IMPLIED>
<!--
    If 'true' log context is updated.
    The default is 'true'.
-->
<!ATTLIST GVCoreCallNode  change-log-context (true | false) #IMPLIED>
<!--
    If true change the log master service with the used one (configured or calculated), in order to write log messages into a different log file.
    Used only if @change-log-context is true.
    Default false.
-->
<!ATTLIST GVCoreCallNode  change-log-master-service (true|false) #IMPLIED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVCoreCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVCoreCallNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVCoreCallNode output CDATA #IMPLIED>
<!--
    Indicates the next node in the workflow to execute when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVCoreCallNode next-node-id CDATA #REQUIRED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVCoreCallNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVCoreCallNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVCoreCallNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVCoreCallNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVCoreCallNode dump-env-in-out (true|false) #IMPLIED>


<!--
    Node that allows direct invocation of a GreenVulcanoESB core workflow sub-flow.

    Dynamic fields can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource

    #Label: @id
    #Warn: {{../GVSubFlowCallNode[not(@default-id) and not(GVRouting)]}} Please specify default-id or at least a GVRouting
    #Icon: subcall.png
    #Template:

        <xsl:template match="GVSubFlowCallNode">
            <table cellpadding="0" cellspacing="0">

                <tr valign="top">
                    <td>GVCore Service</td>
                </tr>
                <tr><td height="5"/></tr>
                <tr valign="top">
                    <td width="100">Operation:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@operation"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVSubFlowCallNode (Description?, InputServices?, OutputServices?, GVRouting*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowCallNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowCallNode  class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVSubFlowCallNode">
<!--
    Unmodifiable.
-->
<!ATTLIST GVSubFlowCallNode   op-type CDATA #FIXED "subcall">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVSubFlowCallNode id CDATA #REQUIRED>
<!--
    If 'true' subflow attribute can contain metadata to be resolver at runtime.
-->
<!ATTLIST GVSubFlowCallNode  dynamic (true | false) #IMPLIED>
<!--
    Name of the sub-flow to invoke

    #NotNull
    #References: {{../GVSubFlowCallNode[not(@dynamic) or (@dynamic = 'false')]}} current()/ancestor::Operation/SubFlow/@name
-->
<!ATTLIST GVSubFlowCallNode  subflow CDATA #REQUIRED>
<!--
    If 'true' log context is updated.
    The default is 'true'.
-->
<!ATTLIST GVSubFlowCallNode  change-log-context (true | false) #IMPLIED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVSubFlowCallNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVSubFlowCallNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVSubFlowCallNode output CDATA #IMPLIED>
<!--
    Node on which transfer control in case of exception.
    Note that any items 'GVRouting' take precedence over
    the choices made by GVSubFlowCallNode.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowCallNode on-exception-id CDATA #REQUIRED>
<!--
    Node on which transfer control if not apply any 'GVRouting'
    and are not in the case of exception.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowCallNode default-id CDATA #IMPLIED>
<!--
    Name of Data Provider to use input manipulation.
    This Data Provider will receive in input a GVBuffer and must
    return the object to be inserted in GVBuffer.object.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVSubFlowCallNode input-ref-dp CDATA #IMPLIED>
<!--
    Name of Data Provider to use for output manipulation.
    This Data Provider will receive in input a GVBuffer and must
    return the object to be inserted in GVBuffer.object.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVSubFlowCallNode output-ref-dp CDATA #IMPLIED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowCallNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowCallNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowCallNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVSubFlowCallNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVSubFlowCallNode dump-env-in-out (true|false) #IMPLIED>

<!--
    Is a operative node indicating that GreenVulcanoESB must save flow state in DB.

    #Label: @id
-->
<!ELEMENT GVSavePointNode (Description?, SpProperties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSavePointNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSavePointNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVSavePointNode">
<!--
    Unmodifiable.
-->
<!ATTLIST GVSavePointNode       op-type CDATA #FIXED "save">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVSavePointNode id CDATA #REQUIRED>
<!--
    Object from the environment to be used as input.

    #NotNull
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVSavePointNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVSavePointNode input CDATA #REQUIRED>

<!--
    Indicates the next node in the workflow to execute
    when the operation ends.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSavePointNode next-node-id CDATA #REQUIRED>

<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSavePointNode point-x CDATA #IMPLIED>

<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSavePointNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSavePointNode breakpoint (true|false) #IMPLIED>

<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVSavePointNode dump-in-out (true|false) #IMPLIED>

<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVSavePointNode dump-env-in-out (true|false) #IMPLIED>

<!--
    Defines additional properties of the SavePoint.

    #SelectOnInsert
    #SortChild
-->
<!ELEMENT SpProperties (Description?, PropertyDef*)>

<!--
    This element represents GreenVulcanoESB notifications using Log4j.
    Each element of notification have sub-elements that define the message:

    - StaticMessage
        A static message that does not provide dynamic parameters and can be
        associated to any notification
    - GVBufferMessage
        Defines a notification relating to a GVBuffer found in the execution environment.
    - ExceptionMessage
        Defines a notification relating to an Exception found in the execution environment.

    #Label: @id
    #Warn: {{../Log4JNotification[@input and not(ExceptionMessage or GVBufferMessage)]}} The input contains the run-time data objects. Therefore, if you specify it, you must also define a message that reads its fields (GVBufferMessage and/or ExceptionMessage).
    #Warn: {{../Log4JNotification[not(@input) and (ExceptionMessage or GVBufferMessage)]}} GVBufferMessage and ExceptionMessage need the run-time objects' fields. Therefore, you must specify an input buffer to read them.
    #Template:
        <xsl:template match="Log4JNotification">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="StaticMessage">
                <small><b>StaticMessage: </b><xsl:value-of select="StaticMessage"/></small><p/>
            </xsl:if>
            <xsl:if test="GVBufferMessage">
                <small><b>GVBufferMessage: </b><xsl:value-of select="GVBufferMessage"/></small><p/>
            </xsl:if>
            <xsl:if test="ExceptionMessage">
                <small><b>ExceptionMessage: </b><xsl:value-of select="ExceptionMessage"/></small><p/>
            </xsl:if>
        </xsl:template>

-->
<!ELEMENT Log4JNotification (Description?, StaticMessage?, ExceptionMessage?, GVBufferMessage?, NMDC?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Log4JNotification type CDATA #FIXED "notification-node">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Log4JNotification	class CDATA #FIXED "it.greenvulcano.gvesb.notification.Log4JNotification">

<!--
    This attribute defines the id (unique) of the notification.

    #Label: @id
    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST Log4JNotification id CDATA #REQUIRED>

<!--
    This attribute defines the logger used to write the notification.

    #References: gvesb:document('GVSupport')/GVSupport/GVLog4JConfiguration/log4j:configuration/logger/@name
-->
<!ATTLIST Log4JNotification	logger CDATA #REQUIRED >

<!--
    This attribute defines the trace level.
-->
<!ATTLIST Log4JNotification	level ( INFO | DEBUG | WARN | ERROR | FATAL) #REQUIRED >

<!--
    This attribute defines whether or not the notification is critical for the flow.

    If a notification 'critical' throws an exception, the flow fails,
    and the exception is included in the buffer specified by the parameter
    'output' of NotificationNode.
-->
<!ATTLIST Log4JNotification	critical ( yes | no ) #REQUIRED >

<!--
    This attribute defines the input buffer, from which
    read data for notifications execution.

    A different buffer can be specified for each notification.
-->
<!ATTLIST Log4JNotification	input CDATA #IMPLIED >

<!--
    This attribute defines an optional input buffer,
    from which read data for notifications execution.
-->
<!ATTLIST Log4JNotification baseInput CDATA #IMPLIED >

<!--
    This attribute defines if log the exception stack trace
    if input buffer is an Exception.
    Default to true.
-->
<!ATTLIST Log4JNotification traceException (true|false) #IMPLIED >

<!--
    Questo elemento rappresenta le Notifiche di GreenVulcanoESB utilizzando JMX.
    Ogni elemento di Notifica ha dei sub-elementi che ne definiscono il messaggio :

    - StaticMessage
        A static message that does not provide dynamic parameters and can be
        associated to any notification
    - JMXGVBufferNotification
        Defines a notification relating to a GVBuffer found in the execution environment.
    - JMXExcNotification
        Defines a notification relating to an Exception found in the execution environment.

    #Label: @id
    #Warn: {{../JMXNotification[@input and not(JMXExcNotification/ExceptionMessage or JMXGVBufferNotification/GVBufferMessage)]}} The input contains the run-time data objects. Therefore, if you specify it, you must also define a message that reads its fields (GVBufferMessage and/or ExceptionMessage).
    #Warn: {{../JMXNotification[not(@input) and (JMXExcNotification/ExceptionMessage or JMXGVBufferNotification/GVBufferMessage)]}} GVBufferMessage and ExceptionMessage need the run-time objects' fields. Therefore, you must specify an input buffer to read them.
    #Template:
        <xsl:template match="JMXNotification">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:if test="StaticMessage">
                <small><b>StaticMessage: </b><xsl:value-of select="StaticMessage"/></small><p/>
            </xsl:if>
            <xsl:if test="JMXGVBufferNotification/GVBufferMessage">
                <small><b>GVBufferMessage: </b><xsl:value-of select="JMXGVBufferNotification/GVBufferMessage"/></small><p/>
            </xsl:if>
            <xsl:if test="JMXExcNotification/ExceptionMessage">
                <small><b>ExceptionMessage: </b><xsl:value-of select="JMXExcNotification/ExceptionMessage"/></small><p/>
            </xsl:if>
        </xsl:template>

-->
<!ELEMENT JMXNotification (Description?, JMXExcNotification?, JMXGVBufferNotification?, JMXDefaultNotification?, StaticMessage?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JMXNotification	type CDATA #FIXED "notification-node">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JMXNotification	class CDATA #FIXED "it.greenvulcano.gvesb.notification.JMXNotification">

<!--
    This attribute defines the id (unique) of the notification.

    #Label: @id
    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST JMXNotification id CDATA #REQUIRED>

<!--
    This attribute defines whether or not the notification is critical for the flow.

    If a notification 'critical' throws an exception, the flow fails,
    and the exception is included in the buffer specified by the parameter
    'output' of NotificationNode.
-->
<!ATTLIST JMXNotification	critical ( yes | no ) #REQUIRED >

<!--
    This attribute defines the objectName the notification broadcaster.

-->
<!ATTLIST JMXNotification	objectName CDATA #REQUIRED >

<!--
    This attribute defines the notification type

-->
<!ATTLIST JMXNotification	notificationType CDATA #REQUIRED >

<!--
    This attribute defines the input buffer, from which
    read data for notifications execution.

    A different buffer can be specified for each notification.
-->
<!ATTLIST JMXNotification	input CDATA #IMPLIED >

<!--
    This attribute defines the input buffer, from which
    read data for notifications execution when the "input"
    buffer don't contain a GVBuffer.

    A different buffer can be specified for each notification.
-->
<!ATTLIST JMXNotification	mainInput CDATA #IMPLIED >

<!--
    This element is the structure of a static message for notification.

    StaticMessage
      A static message does not provide parameters to evaluate dynamically.
      Is used by notification in the following cases:
      - Have not been configured specific GVBufferMessage or ExceptionMessage messages
      - A message that has been configured does not match the input
        ES: You have configured a GVBufferMessage, but received an item of type Exception
      - It has not been received any input.
-->
<!ELEMENT StaticMessage (#PCDATA) >

<!--
    This element defines a notification object that extends the standard
    JMX Notification including the GVBuffer object.
-->
<!ELEMENT JMXGVBufferNotification (Description?, GVBufferMessage?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JMXGVBufferNotification	type CDATA #FIXED "notification-object">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JMXGVBufferNotification	class CDATA #FIXED "it.greenvulcano.gvesb.notification.JMXGVBufferNotification">
<!--
    This attribute specifies whether to send the value of the body field
    in a notification or not.
-->
<!ATTLIST JMXGVBufferNotification	dataValue (yes | no) #REQUIRED>
<!--
    This element defines a notification object that extends the
    standard JMX Notification including the Throwable object.
-->
<!ELEMENT JMXExcNotification (Description?, ExceptionMessage?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JMXExcNotification type CDATA #FIXED "notification-object">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JMXExcNotification class CDATA #FIXED "it.greenvulcano.gvesb.notification.JMXExcNotification">

<!--
	This element defines the standard JMX notification object.
	javax.management.Notification
-->
<!ELEMENT JMXDefaultNotification (Description?)>

<!--
    This element is the structure of a dynamic message for notifications
    of GreenVulcanoESB error.

    ExceptionMessage
      An exception message type provides the parameters to be valued at runtime.
      The parameters are always written in ${param} format.
      The possible parameters for an Exception object are:
      - ${message}
      - ${cause}
      - ${errorCode} (only for exception of type GVException)
      - ${stackTrace}

    All metadata are written in accordance with the above format.
    If an error occurs the metadata will not be replaced.
-->
<!ELEMENT ExceptionMessage (#PCDATA) >

<!--
    This element is the structure of a dynamic message for notifications
    of a GreenVulcanoESB flow without error.

    GVBufferMessage
      A GVBuffer message type provides the parameters to be valued at runtime.
      The parameters are always written in ${param} format.
      The possible parameters for a GVBuffer object are:
        - for standard fields, the field name
            - ${system}
            - ${service}
            - ${id}
            - ${retCode}
        - for properties:
            - ${property['PROP_NAME']}

    All metadata are written in accordance with the above format.
    If an error occurs the metadata will not be replaced.
-->
<!ELEMENT GVBufferMessage (#PCDATA) >
<!--
    Defines extra Log4J NMDC values.
-->
<!ELEMENT NMDC (NMDCEntry*)>
<!--
    Extra Log4J NMDC value.

    #Label: @name
    #SelectOnInsert
-->
<!ELEMENT NMDCEntry (Description?)>
<!--
    NMDC entry name.

    #Unique: ../NMDCEntry/@name
    #NotNull
-->
<!ATTLIST NMDCEntry name CDATA #REQUIRED>
<!--
    NMDC entry value.
    Can contains dynamic parameters.
    The possible parameters for a GVBuffer object are:
      - for standard fields, the field name
          - ${system}
          - ${service}
          - ${id}
          - ${retCode}
      - for properties:
          - ${property['PROP_NAME']}

    The possible parameters for an Exception object are:
      - ${message}
      - ${cause}
      - ${errorCode} (only for exception of type GVException)

    All metadata are written in accordance with the above format.
    If an error occurs the metadata will not be replaced.

    #NotNull
-->
<!ATTLIST NMDCEntry value CDATA #REQUIRED>

<!--
    Defines SubFlow invocation parameters.

    #CompositeLabel: || @name | :: | @subflow
    #Icon: flowdef.png
-->
<!ELEMENT FlowDef (Description?)>
<!--
    Name of the FlowDef instance.

    #NotNull
    #Unique: ../FlowDef/@name
-->
<!ATTLIST FlowDef  name CDATA #REQUIRED>
<!--
    Name of the sub-flow to invoke

    #NotNull
    #References: current()/ancestor::Operation/SubFlow/@name
-->
<!ATTLIST FlowDef  subflow CDATA #REQUIRED>
<!--
    Name of the condition to be verified for subflow execution.
    If not defined the subflow is always executed.

    #NotNull
    #References: ../../../Conditions/*[@type='condition']/@condition
    #References: ../../../../Conditions/*[@type='condition']/@condition
    #References: ../../../../../Conditions/*[@type='condition']/@condition
-->
<!ATTLIST FlowDef  condition CDATA #IMPLIED>
<!--
    Name of Data Provider to use input manipulation.
    This Data Provider will receive in input a GVBuffer and must
    return the object to be inserted in GVBuffer.object.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST FlowDef  ref-dp CDATA #IMPLIED>

<!ELEMENT FlowDefs (Description?, FlowDef+)>

<!--
    Defines SubFlows output aggregation policy:
    - none          : return a java.util.List containig the SubFlows output
    - XMLAggregate  : aggregate the SubFlow output as XML
    - Script        : use the defined Script to process a java.util.List
                      containig the SubFlows output

    If isn't defined a processor the SubFlows output is intended as GVBuffer.output
    content or an Exception.
    The Script processor receives as input a list of
    it.greenvulcano.gvesb.core.flow.parallel.Result instances that wrapps the SubFlows
    input and output.

    #Icon: resproc.png
-->
<!ELEMENT ResultProcessor (Description?, (XMLAggregate|Script)?)>
<!--
    Defines the input to pass to the specific processor:
    - XMLAggregate
        - only-object   : array of output valid GVBuffer.object content, in the
                          order of instantiation of SubFlows
        - only-gvbuffer : same as above
        - gvbuffer-and-error : same as above
        - object-and-error   : same as above
    - Script
        - only-object : java.util.List of output valid GVBuffer.object content,
                        in the order of instantiation of SubFlows
        - only-gvbuffer : java.util.List of output valid GVBuffer (wrapped as Result
                          object), in the order of instantiation of SubFlows
        - gvbuffer-and-error : java.util.List of output valid GVBuffer or Exception
                               (wrapped as Result object), in the order of instantiation
                               of SubFlows
        - object-and-error   : java.util.List of output valid GVBuffer.object content
                               or Exception , in the order of instantiation of SubFlows
    The number of elements in the array will depend on several factors related
    to parallel flow configuration and SubFlow execution.

    If a processor is not defined, the output GVBuffer.object will contain the
    java.util.List as defined as input for Script but unwrapped.
-->
<!ATTLIST ResultProcessor  processor-input (only-object|only-gvbuffer|object-and-error|gvbuffer-and-error) #REQUIRED>
<!--
    If true and any of the SubFlows output contains an Exception then the
    ResultProcessor returns an error.

    Default to true.
-->
<!ATTLIST ResultProcessor  fail-on-error (true|false) #REQUIRED>

<!--
    Node that allows direct invocation of a GreenVulcanoESB core workflow sub-flow as spawned process.

    #Label: @id
    #Icon: subcall_spawn.png
    #Template:

        <xsl:template match="GVSubFlowSpawnNode">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVSubFlowSpawnNode (Description?, InputServices?, FlowDefs)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowSpawnNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowSpawnNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVSubFlowSpawnNode">
<!--
    Unmodifiable.
-->
<!ATTLIST GVSubFlowSpawnNode op-type CDATA #FIXED "spawn">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVSubFlowSpawnNode id CDATA #REQUIRED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVSubFlowSpawnNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVSubFlowSpawnNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVSubFlowSpawnNode output CDATA #IMPLIED>
<!--
    Node on which transfer control in case of exception during subflow initialization.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSpawnNode on-exception-id CDATA #REQUIRED>
<!--
    Node on which transfer control in case no subflow are started because all conditions
    returns false.
    If not defined the control is transferred to @default-id node.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSpawnNode on-skip-id CDATA #IMPLIED>
<!--
    Node on which transfer control if subflow initialization is completed without errors.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSpawnNode default-id CDATA #REQUIRED>
<!--
    Max number of subflow's execution threads.
    Default to 5.
    WARN!!! ACTUALLY NOT USED, fixed to 5 threads.

    #NotNull
-->
<!ATTLIST GVSubFlowSpawnNode max-thread CDATA #IMPLIED>
<!--
    Max execution time, in seconds, of the spawned subflows.
    Default to 30s.

    #NotNull
-->
<!ATTLIST GVSubFlowSpawnNode timeout CDATA #IMPLIED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowSpawnNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowSpawnNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowSpawnNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVSubFlowSpawnNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVSubFlowSpawnNode dump-env-in-out (true|false) #IMPLIED>

<!--
    Node that allows direct invocation of a GreenVulcanoESB core workflow sub-flows as parallel process.

    #Label: @id
    #Icon: subcall_parallel.png
    #Template:

        <xsl:template match="GVSubFlowParallelNode">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVSubFlowParallelNode (Description?, InputServices?, OutputServices?, FlowDefs, ResultProcessor)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowParallelNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowParallelNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVSubFlowParallelNode">
<!--
    Unmodifiable.
-->
<!ATTLIST GVSubFlowParallelNode op-type CDATA #FIXED "parallel">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVSubFlowParallelNode id CDATA #REQUIRED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVSubFlowParallelNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVSubFlowParallelNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVSubFlowParallelNode output CDATA #IMPLIED>
<!--
    Defines the termination policy of the subflows processes:
        - normal-end  : all subflows must terminate normally
        - first-end   : at first subflow that ends with succes all executing subflows are terminated and all
                        queued subflows are ignored
        - first-error : at first subflow that ends with error all executing subflows are terminated and all
                        queued subflows are ignored
        - timeout     : max execution time for the node after wich all executing subflows are terminated and
                        all queued subflows are ignored

    Default normal-end.
-->
<!ATTLIST GVSubFlowParallelNode termination-mode (normal-end|first-end|first-error|timeout) #IMPLIED>
<!--
    Node on which transfer control in case of exception during subflows execution.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowParallelNode on-exception-id CDATA #REQUIRED>
<!--
    Node on which transfer control in case no subflow are started because all conditions
    returns false.
    If not defined the control is transferred to @default-id node.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowParallelNode on-skip-id CDATA #IMPLIED>
<!--
    Node on which transfer control in case @termination-mode=timeout and not all subflow
    are terminated after @timeout seconds.
    If not defined the control is transferred to @default-id node.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowParallelNode on-timeout-id CDATA #IMPLIED>
<!--
    Node on which transfer control if subflow initialization is completed without errors.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowParallelNode default-id CDATA #REQUIRED>
<!--
    Max number of subflow's execution threads.
    Default to 5.

    #NotNull
-->
<!ATTLIST GVSubFlowParallelNode max-thread CDATA #IMPLIED>
<!--
    Max execution time, in seconds, of the subflows.
    Default to 30s.

    #NotNull
-->
<!ATTLIST GVSubFlowParallelNode timeout CDATA #IMPLIED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowParallelNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowParallelNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowParallelNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVSubFlowParallelNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVSubFlowParallelNode dump-env-in-out (true|false) #IMPLIED>


<!--
    Node that allows direct invocation of a GreenVulcanoESB core workflow sub-flows as parallel process.

    #Label: @id
    #Icon: subcall_splitt.png
    #Template:

        <xsl:template match="GVSubFlowSplittedNode">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVSubFlowSplittedNode (Description?, InputServices?, OutputServices?, ResultProcessor)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowSplittedNode type CDATA #FIXED "flow-node">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSubFlowSplittedNode class CDATA #FIXED "it.greenvulcano.gvesb.core.flow.GVSubFlowSplittedNode">
<!--
    Unmodifiable.
-->
<!ATTLIST GVSubFlowSplittedNode op-type CDATA #FIXED "splitt">
<!--
    ID of the node.
    Unique within the 'Flow'.

    #NotNull
    #Unique: ../*/@id
-->
<!ATTLIST GVSubFlowSplittedNode id CDATA #REQUIRED>
<!--
    Specifies the input (from the execution environment) for the operation.
    If the input is an exception, the operation is not performed,
    and the output is set equal input exception.

    #NotNull
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVOperationNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVIteratorOperationNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVCoreCallNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowCallNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNodeCheck/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../ChangeGVBufferNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVNotificationNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSavePointNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSpawnNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowParallelNode/@output
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@input
    #References: {{../GVSubFlowSplittedNode[@id!=../@first-node][preceding-sibling::GVOperationNode or following-sibling::GVOperationNode or preceding-sibling::GVNodeCheck or following-sibling::GVNodeCheck or preceding-sibling::ChangeGVBufferNode or following-sibling::ChangeGVBufferNode or preceding-sibling::GVNotificationNode or following-sibling::GVNotificationNode or preceding-sibling::GVIteratorOperationNode or following-sibling::GVIteratorOperationNode or preceding-sibling::GVCoreCallNode or following-sibling::GVCoreCallNode or preceding-sibling::GVSavePointNode or following-sibling::GVSavePointNode or preceding-sibling::GVSubFlowCallNode or following-sibling::GVSubFlowCallNode or preceding-sibling::GVSubFlowSpawnNode or following-sibling::GVSubFlowSpawnNode or preceding-sibling::GVSubFlowParallelNode or following-sibling::GVSubFlowParallelNode or preceding-sibling::GVSubFlowSplittedNode or following-sibling::GVSubFlowSplittedNode]}} ../GVSubFlowSplittedNode/@output
-->
<!ATTLIST GVSubFlowSplittedNode input CDATA #REQUIRED>
<!--
    The operation's output (GVBuffer or Exception) is inserted into the
    execution environment with this exact name.
    Default to "input" value.

    #NotNull
-->
<!ATTLIST GVSubFlowSplittedNode output CDATA #IMPLIED>
<!--
    Name of the sub-flow to invoke

    #NotNull
    #References: current()/ancestor::Operation/SubFlow/@name
-->
<!ATTLIST GVSubFlowSplittedNode subflow CDATA #REQUIRED>
<!--
    Name of Data Provider to use. Must return a collection of objects.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVSubFlowSplittedNode partition-dp CDATA #IMPLIED>
<!--
    Name of Data Provider to be used for modify the GVBuffer content at each iteration.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST GVSubFlowSplittedNode ref-dp CDATA #IMPLIED>
<!--
    Defines the termination policy of the subflows processes:
        - normal-end  : all subflows must terminate normally
        - first-end   : at first subflow that ends with succes all executing subflows are terminated and all
                        queued subflows are ignored
        - first-error : at first subflow that ends with error all executing subflows are terminated and all
                        queued subflows are ignored
        - timeout     : max execution time for the node after wich all executing subflows are terminated and
                        all queued subflows are ignored

    Default normal-end.
-->
<!ATTLIST GVSubFlowSplittedNode termination-mode (normal-end|first-end|first-error|timeout) #IMPLIED>
<!--
    Node on which transfer control in case of exception during subflows execution.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSplittedNode on-exception-id CDATA #REQUIRED>
<!--
    Node on which transfer control in case no subflow are started because all conditions
    returns false.
    If not defined the control is transferred to @default-id node.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSplittedNode on-skip-id CDATA #IMPLIED>
<!--
    Node on which transfer control in case @termination-mode=timeout and not all subflow
    are terminated after @timeout seconds.
    If not defined the control is transferred to @default-id node.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSplittedNode on-timeout-id CDATA #IMPLIED>
<!--
    Node on which transfer control if subflow initialization is completed without errors.

    #References: preceding-sibling::*/@id
    #References: following-sibling::*/@id
-->
<!ATTLIST GVSubFlowSplittedNode default-id CDATA #REQUIRED>
<!--
    Max number of subflow's execution threads.
    Default to 5.

    #NotNull
-->
<!ATTLIST GVSubFlowSplittedNode max-thread CDATA #IMPLIED>
<!--
    Max execution time, in seconds, of the subflows.
    Default to 30s.

    #NotNull
-->
<!ATTLIST GVSubFlowSplittedNode timeout CDATA #IMPLIED>
<!--
    X position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowSplittedNode point-x CDATA #IMPLIED>
<!--
    Y position of the node in the VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowSplittedNode point-y CDATA #IMPLIED>
<!--
    Keeps information about this node is a debugger breakpoint in VulCon workflows editor.
    Immutable, used by VulCon.

    #NotNull
    #Freezed
-->
<!ATTLIST GVSubFlowSplittedNode breakpoint (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output GVBuffer.
    Default false.
-->
<!ATTLIST GVSubFlowSplittedNode dump-in-out (true|false) #IMPLIED>
<!--
    If true enable the dump of the input/output Execution Environment.
    Default false.
-->
<!ATTLIST GVSubFlowSplittedNode dump-env-in-out (true|false) #IMPLIED>

<!--
    The element 'Conditions' defines the conditions that allow
    to activate the mechanisms for routing GreenVulcano workflows.

    The conditions are used in items 'GVRouting' of 'GVNodeCheck'.

    The conditions can be defined depending on the contents of
    GVBuffer field or according to the exceptions that may occur
    during the execution of workflows.

    The element 'Conditions' is used in different parts of
    the configuration.
    The following list shows all the elements that can have
    a sub-element 'Conditions':
    - Service
        The element 'Conditions' of 'Service' defines all the
        conditions that apply to routing of all workflows
        instantiated in the service, for all clients of the
        service.
    - Client
        The element 'Conditions' of 'Client' defines all the
        conditions that apply to routing of all workflows
        instantiated in the service's client
    - Flow
        The element 'Conditions' of 'Flow' defines all the
        conditions that apply to routing of the single workflow
        defined in the 'Flow' element.

    The above list is sorted according to a growing priority assessment:
    the same condition can be defined in several different places.
    In case of multiple definitions, the definition with the highest priority
    is used.

    #Table: | Conditions | *[@type='condition'] | Condition | @condition | Description | .//Description
    #SelectOnInsert
    #Template:

        <xsl:template match="Conditions">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:for-each select="*[@type='condition']">
                <b><xsl:value-of select="@condition"/></b>
                <xsl:if test="Description">
                    : <small><xsl:value-of select="Description"/></small>
                </xsl:if>
                <br/>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT Conditions (Description?, (%conditions;)*)>
<!--
    This element allows you to specify the conditions that the fields buffer
    GVBuffer must meet.
    A GVBufferCondition lets you specify multiple conditions on individual fields.
    The conditions are evaluated in AND.

    #Label: @condition
    #Table: | Properties | Property | Name | @name | Value | @value | Group | @group | Description | Description
    #Table: | Property comparison | PropertyCompare | Name A | @name-a | Name B | @name-b | Group | @group |Description | Description
    #Warn: {{../GVBufferCondition[(count(*[@type='gvbuffer-field'])<1) and not(@system or @service)]}} There must be at least one test field
-->
<!ELEMENT GVBufferCondition (Description?, RetCodeField?, (%properties;)*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVBufferCondition type CDATA #FIXED "condition">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVBufferCondition class CDATA #FIXED "it.greenvulcano.gvesb.internal.condition.GVBufferCondition">
<!--
    This attribute defines the name of the condition.
    Unique inside the 'Conditions' element.

    #NotNull
    #Unique: ../*[@type='condition']/@condition
-->
<!ATTLIST GVBufferCondition	condition CDATA #REQUIRED>
<!--
    If true an error during execution cause an Exception to be thrown.
    If false an error during execution cause the condition to return "false".
    Default to "false".
-->
<!ATTLIST GVBufferCondition	throw-exception (true|false) #IMPLIED>
<!--
    The attribute verify that the system field contains the configured value.

    #NotNull
-->
<!ATTLIST GVBufferCondition	system CDATA #IMPLIED>
<!--
    The attribute verify that the service field contains the configured value.

    #NotNull
-->
<!ATTLIST GVBufferCondition	service CDATA #IMPLIED>


<!--
    This element verifies that the return code is in a certain
    range of values.
    You can specify multiple ranges. The condition is verified
    if the return code is at least in one of configured ranges.

    #SelectOnInsert
    #Template:

        <xsl:template match="RetCodeField">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            Ranges per il return code:<br/>
            <xsl:for-each select="RangeDef">
                <nobr><b><xsl:value-of select="@min"/> - <xsl:value-of select="@max"/></b></nobr>
                <xsl:if test="Description">
                    : <small><xsl:value-of select="Description"/></small>
                </xsl:if>
                <br/>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT RetCodeField (Description?, RangeDef+)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RetCodeField	type CDATA #FIXED "gvbuffer-field">
<!--
    This element defines the return code field name.
-->
<!ATTLIST RetCodeField	name CDATA #FIXED "RetCodeField">

<!--
    This element specifies a range of values.

    #SelectOnInsert
-->
<!ELEMENT RangeDef (Description)?>
<!--
    This attribute defines the minimum value of the range.
    If not specified, assumes 'the minimum allowable value'.

    #NotNull
-->
<!ATTLIST RangeDef	min CDATA #IMPLIED>
<!--
    This attribute defines the maximum value of the range.
    If not specified, assumes 'the maximum allowable value'.

    #NotNull
-->
<!ATTLIST RangeDef	max CDATA #IMPLIED>


<!--
    This element verifies that a property takes a certain value.
    The attribute 'value' and the elements RangeDef can not be
    defined together.
    If the attribute 'value' and the RangeDef elements are not
    specified is only tested for the presence of the property.

    #Label: @name
    #SelectOnInsert

    #Warn: {{../Property[@value and (count(RangeDef) > 0)]}} The 'value' attribute and RangeDef elements can't be defined togheter
-->
<!ELEMENT Property (Description?, RangeDef*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Property	type CDATA #FIXED "gvbuffer-field">
<!--
    This attribute defines the name of the property to check.

    #NotNull
-->
<!ATTLIST Property	name CDATA #REQUIRED>
<!--
    This attribute defines the type of expected value.
-->
<!ATTLIST Property	value-type (text|integer) #IMPLIED>
<!--
    This attribute defines the expected value.
-->
<!ATTLIST Property	value CDATA #IMPLIED>
<!--
    This attribute defines the type of operator to use.
-->
<!ATTLIST Property	operator (equal|lesser|lesser-equal|greater|greater-equal|different) #IMPLIED>
<!--
    This attribute defines the set of fields to check in AND.

    #NotNull
-->
<!ATTLIST Property	group CDATA #IMPLIED>
<!--
    This element compares the value of two properties.

    #CompositeLabel: ||@name-a|<==>|@name-b
    #SelectOnInsert
-->
<!ELEMENT PropertyCompare (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST PropertyCompare	type CDATA #FIXED "gvbuffer-field">
<!--
    This attribute defines the name of the first property to check.

    #NotNull
    #Warn: {{../PropertyCompare[@name-a=@name-b]}} The 'name-a' and 'name-b' attribute must be different
-->
<!ATTLIST PropertyCompare	name-a CDATA #REQUIRED>
<!--
    This attribute defines the name of the second property to check.

    #NotNull
    #Warn: {{../PropertyCompare[@name-a=@name-b]}} The 'name-a' and 'name-b' attribute must be different
-->
<!ATTLIST PropertyCompare	name-b CDATA #REQUIRED>
<!--
    This attribute defines the type of expected value.
-->
<!ATTLIST PropertyCompare	value-type (text|integer) #IMPLIED>
<!--
    This attribute defines the type of operator to use.
-->
<!ATTLIST PropertyCompare	operator (equal|lesser|lesser-equal|greater|greater-equal|different) #IMPLIED>
<!--
    This attribute defines the set of fields to check in AND.

    #NotNull
-->
<!ATTLIST PropertyCompare	group CDATA #IMPLIED>

<!--
    This feature allows you to specify conditions that the incoming object,
    possibly in connection with the elements in the environment, must meet.
    In the Script context are bound the following variables:
    "environment" -> the execution environment
    "dataName"    -> the name of the environment object to check
    "logger"      -> a Log4J Logger instance

    #Label: @condition
-->
<!ELEMENT ScriptCondition (Description?, Script)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ScriptCondition type CDATA #FIXED "condition">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ScriptCondition class CDATA #FIXED "it.greenvulcano.gvesb.internal.condition.ScriptCondition">

<!--
    This attribute defines the name of the condition.
    Unique inside the 'Conditions' element.

    #NotNull
    #Unique: ../*[@type='condition']/@condition
-->
<!ATTLIST ScriptCondition	condition CDATA #REQUIRED>

<!--
    If true an error during execution cause an Exception to be thrown.
    If false an error during execution cause the condition to return "false".
    Default to "false".
-->
<!ATTLIST ScriptCondition	throw-exception (true|false) #IMPLIED>

<!--
    Before doing any communication you can run an ordered list of
    input services.
    This section allows the definition of input services for the
    current communication operation.

    The current version of GreenVulcanoESB provides the following services:
    - Data Transformation
    - XML Validation
    - Scripting

    #Icon: default.png
    #Template:

        <xsl:template match="InputServices">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT InputServices (Description?, (%internal-services; %extra-input-services;)+)>
<!--
    After doing any communication you can run an ordered list of
    output services.
    This section allows the definition of output services for the
    current communication operation.

    The current version of GreenVulcanoESB provides the following services:
    - Data Transformation
    - XML Validation
    - Scripting

    #Icon: default.png
    #Template:

        <xsl:template match="OutputServices">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT OutputServices (Description?, (%internal-services; %extra-output-services;)+)>

<!--
    Test service.

    Use property 'encoding' to decode the bytes of the buffer GVBuffer.

    #Label: @name
    #Icon: GVtest.png
    #Template:

        <xsl:template match="test-service-call">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Test Service</td>
                </tr>
                <tr><td height="5"/></tr>
                <tr valign="top">
                    <td width="100">Service:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@service"/></b></td>
                    <td width="100">Exception Message:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@exception-message"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT test-service-call (Description?, ServiceAlias?, ChangeGVBuffer?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST test-service-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST test-service-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.TestServiceCall">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST test-service-call  name CDATA #REQUIRED>
<!--
    Type of test operation:
    - toupper: transforms all characters to uppercase.
    - tolower: transforms all characters to lowercase.
    - echo   : do not change the body.
-->
<!ATTLIST test-service-call service (toupper | tolower | echo) #REQUIRED>
<!--
    If 'true' properties are removed from GVBuffer.

-->
<!ATTLIST test-service-call  remove-properties (true | false) #IMPLIED>
<!--
    If defined is thrown an exception of type VCLCallException, with the configured message.

    #NotNull
-->
<!ATTLIST test-service-call  exception-message CDATA #IMPLIED>
<!--
    Simulate a delay in creation of the operation.

    #Pattern: ! [1-9][0-9]* ! Set a delay in ms
-->
<!ATTLIST test-service-call sleep-on-init CDATA #IMPLIED>
<!--
    Simulate a delay in execution of the operation.

    #Pattern: ! [1-9][0-9]* ! Set a delay in ms
-->
<!ATTLIST test-service-call sleep-on-perform CDATA #IMPLIED>
<!--
    Name of Data Provider to use for output message creation.
    The Data Provider should return a string, as calls to testing
    services expect strings.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST test-service-call ref-dp CDATA #IMPLIED>


<!--
    Operation useful as a proxy to other Call operation.

    #Label: @name
-->
<!ELEMENT proxy-call (Description?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST proxy-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST proxy-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.ProxyCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST proxy-call  name CDATA #REQUIRED>
<!--
    System providing the Call operation to call.

    #References: /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST proxy-call   id-system CDATA #REQUIRED>
<!--
    System's channel.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel/@id-channel
-->
<!ATTLIST proxy-call   id-channel CDATA #REQUIRED>
<!--
    Channel's Call operation.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel[@id-channel=current()/@id-channel]/*[@type='call']/@name
-->
<!ATTLIST proxy-call   operation CDATA #REQUIRED>

<!--
    Operation useful as a proxy to other Enqueue operation.

    #Label: @name
-->
<!ELEMENT proxy-enqueue (Description?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST proxy-enqueue  type CDATA #FIXED "enqueue">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST proxy-enqueue  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.ProxyEnqueueOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST proxy-enqueue   name CDATA #REQUIRED>
<!--
    System providing the Call operation to call.

    #References: /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST proxy-enqueue   id-system CDATA #REQUIRED>
<!--
    System's channel.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel/@id-channel
-->
<!ATTLIST proxy-enqueue   id-channel CDATA #REQUIRED>
<!--
    Channel's Enqueue operation.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel[@id-channel=current()/@id-channel]/*[@type='enqueue']/@name
-->
<!ATTLIST proxy-enqueue   operation CDATA #REQUIRED>

<!--
    Operation useful as a proxy to other Dequeue operation.

    #Label: @name
-->
<!ELEMENT proxy-dequeue (Description?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST proxy-dequeue   type CDATA #FIXED "dequeue">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST proxy-dequeue   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.ProxyDequeueOperation">
<!--
    Operation name.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST proxy-dequeue   name CDATA #REQUIRED>
<!--
    System providing the Dequeue operation to call.

    #References: /GVCore/GVSystems/Systems/System/@id-system
-->
<!ATTLIST proxy-dequeue   id-system CDATA #REQUIRED>
<!--
    System's channel.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel/@id-channel
-->
<!ATTLIST proxy-dequeue   id-channel CDATA #REQUIRED>
<!--
    Channel's Dequeue operation.

    #References: /GVCore/GVSystems/Systems/System[@id-system=current()/@id-system]/Channel[@id-channel=current()/@id-channel]/*[@type='dequeue']/@name
-->
<!ATTLIST proxy-dequeue    operation CDATA #REQUIRED>

<!--
    Service to invoke an Enterprise Java Bean.

    #Label: @name
    #Icon: GVEjbCall.png
    #Category: J2EE
    #Template:

        <xsl:template match="j2ee-ejb-call">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>EJB</td>
                </tr>
                <tr><td height="5"/></tr>
                <tr valign="top">
                    <td width="100">JNDI Name:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@jndi-name"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="100">Method Name:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@method"/></b></td>
                </tr>
                <xsl:if test="@provider-url">
                <tr valign="top">
                    <td width="100">Provider URL:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@provider-url"/></b></td>
                </tr>
                </xsl:if>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT j2ee-ejb-call (Description?, JNDIHelper?, WLSSubjectBuilder?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST j2ee-ejb-call   type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST j2ee-ejb-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.j2ee.J2EECallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST j2ee-ejb-call    name CDATA #REQUIRED>
<!--
    EJB JNDI name.

    #NotNull
-->
<!ATTLIST j2ee-ejb-call   jndi-name CDATA #REQUIRED>
<!--
    Method name to invoke.

    #NotNull
-->
<!ATTLIST j2ee-ejb-call   method CDATA #REQUIRED>
<!--
    Method parameter types list.
    Comma separated class names or data types:
        - it.greenvulcano.gvesb.buffer.GVBuffer
        - java.lang.String,int,int
        - java.lang.String[]

    #NotNull
-->
<!ATTLIST j2ee-ejb-call   parameterTypes CDATA #REQUIRED>
<!--
    Name of Data Provider to be used to prepare the EJB method
    actual parameters.
    This Data Provider will receive in input a GVBuffer and must
    return an array of object compatible with the parameterTypes
    list.
    If not defined is assumed that the method signature is:
        it.greenvulcano.gvesb.buffer.GVBuffer method(it.greenvulcano.gvesb.buffer.GVBuffer gvbuffer)

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST j2ee-ejb-call input-ref-dp CDATA #IMPLIED>
<!--
    Name of Data Provider to use for output manipulation.
    This Data Provider will receive as context a GVBuffer
    and as input the EJB method output object and must
    return an enriched GVBuffer object.
    Ex. a GVBufferChangeDataProvider instance.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST j2ee-ejb-call output-ref-dp CDATA #IMPLIED>
<!--
    Define the EJB specification version.
    Default to 3.

    #NotNull
    #Warn: {{self::j2ee-ejb-call[not(@home-interface) and (@version='2')]}} home-interface must be used if version='2'
-->
<!ATTLIST j2ee-ejb-call  version (2|3) #IMPLIED>
<!--
    Java class that defines the EJB 2 home interface.
    Note that if the EJB is installed on the same application server of GreenVulcanoESB,
    then you can also specify the local home interface.

    #NotNull
    #Warn: {{self::j2ee-ejb-call[@home-interface and (not(@version) or (@version='3'))]}} home-interface can be used only if version='2'
-->
<!ATTLIST j2ee-ejb-call  home-interface CDATA #IMPLIED>
<!--
    Java class that defines the EJB home remote.
    Note that if the EJB is installed on the same application server of GreenVulcanoESB,
    then you can also specify the local interface.

    #NotNull
-->
<!ATTLIST j2ee-ejb-call   remote-or-local-interface CDATA #REQUIRED>
<!--
    Allows a generic invocation.
    GreenVulcanoESB use special plug-ins to make invocations to
    external systems.
    Plug-ins are made from Java classes that implement the interface:
        it.greenvulcano.gvesb.virtual.CallOperation.

    At hte plug-in you can pass a set of parameters as pairs
    name-value (sub-items 'call-parameter').

    #Label: @name
    #Icon: GVGenericCall.png
    #Table: | Parameters | call-parameter | Parameter | @name | Value | @value | Description | Description
    #Template:

        <xsl:template match="generic-call">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>GENERIC</td>
                </tr>
                <tr><td height="5"/></tr>
                <tr valign="top">
                    <td width="100">Class:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@class"/></b></td>
                </tr>
                <xsl:if test="parameter">
                    <xsl:for-each select="call-parameter">
                        <tr valign="top">
                            <td width="100"><xsl:value-of select="@name"/><xsl:text>: </xsl:text></td>
                            <td width="20"><xsl:text> </xsl:text></td>
                            <td><b><xsl:value-of select="@value"/></b></td>
                        </tr>
                    </xsl:for-each>
                </xsl:if>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT generic-call (Description?, call-parameter*, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST generic-call   type CDATA #FIXED "call">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST generic-call   name CDATA #REQUIRED>
<!--
    Class that makes the plug-in.
    This class must implement the interface:
    it.greenvulcano.gvesb.virtual.CallOperation.

    #NotNull
-->
<!ATTLIST generic-call   class CDATA #REQUIRED>
<!--
    Parameter for the items 'generic-call'.

    #Label: @name
    #SelectOnInsert
-->
<!ELEMENT call-parameter (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST call-parameter   type CDATA #FIXED "param">
<!--
    Parameter name.

    #Unique: ../call-parameter/@name
    #NotNull
-->
<!ATTLIST call-parameter   name CDATA #REQUIRED>
<!--
    Parameter value.
-->
<!ATTLIST call-parameter   value CDATA #REQUIRED>
<!--
    Used to make a routing mechanism at the level of communication channel,
    based on some conditions applied to the buffer GVBuffer.

    During the execution of flows, the operation is seen as a simple call.
    The implementation of the routed call-check the conditions and invokes a
    sub-operations accordingly.

    To configure a routed-call is necessary:

        - defines sub-operations
            Each sub operation is identified by a unique name within the routed-call.
            The sub-operation can be selected are only those of type "call".

        - defines routing conditions
            Check the values in GVBuffer fields.
            Each routing condition has a unique name within the routed-call.

        - associate routing conditions to operations
            Sub items 'VCLRouting' associate routing conditions with operations.
            The evaluation order is defined by the order of items 'VCLRouting'.
            The sub-operation is performed corresponding to the first condition verified.

    #Label: @name
    #Icon: GVRoutedCall.png
    #Category: Utils
    #Table: | Conditions | GVBufferCondition | Condition | @condition | Description | Description
    #Template:

        <xsl:template match="routed-call">
            ROUTED call:
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Condition</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td>VCLOperation</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td>Description</td>
                </tr>
                <tr height="5">
                    <td colspan="5"><xsl:text> </xsl:text></td>
                </tr>
                <xsl:for-each select="VCLRouting">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@condition"/></b></td>
                        <td><xsl:text> </xsl:text></td>
                        <td><b><xsl:value-of select="@operation-name"/></b></td>
                        <td><xsl:text> </xsl:text></td>
                        <td><small><xsl:value-of select="Description"/></small></td>
                    </tr>
                </xsl:for-each>
            </table>
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT routed-call (Description?, GVBufferCondition+, (%calls;)+, VCLRouting+, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST routed-call   type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST routed-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.RoutedCall">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST routed-call   name CDATA #REQUIRED>
<!--
    Allows you to perform an enqueue on a JMS destination.

    GVBuffer fields will be made available through the
    JMS message properties:

    Field        JMS
    _______________________
    system      SYSTEM
    service     SERVICE
    id          ID
    retCode     RET_CODE
    properties  p$<property name> (only GVBuffer properties with names
                            that are valid Java identifier are managed)


    #Label: @name
    #Icon: enqueue32.png
    #Category: JMS
    #Template:

        <xsl:template match="jms-enqueue">
            JMS enqueue:
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>JNDI name:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@destination-name"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT jms-enqueue (Description?, JNDIHelper?, ServiceAlias?, XAHelper?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST jms-enqueue   type CDATA #FIXED "enqueue">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST jms-enqueue   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.j2ee.JMSEnqueueOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST jms-enqueue   name CDATA #REQUIRED>
<!--
    JMS connection factory JNDI name.

    #NotNull
-->
<!ATTLIST jms-enqueue   connection-factory CDATA #REQUIRED>
<!--
    Destination JNDI name.

    Set appropriately the 'destination-type' parameter.

    #NotNull
-->
<!ATTLIST jms-enqueue  destination-name CDATA #REQUIRED>
<!--
    Destination type.
    Default: queue
-->
<!ATTLIST jms-enqueue  destination-type (queue | topic) "queue">
<!--
    Specifies whether the enqueue has to open his own transaction or
    fall in a global transaction.

    - 'true' open his own transaction and do not fall in the global transaction.

    - 'false' fall in the active global transaction.
        Must be used a XA connection factory.

    This parameter is not relevant if the connection factory isn't XA.

    Default: false.
-->
<!ATTLIST jms-enqueue   transacted (false | true) "false">
<!--
    In transactional enqueue acknowledgment is managed by the application server.

    This parameter is meaningful only for non-transactional enqueue and can
    take the following values:

    - 'auto-acknowledge': the acknowledgment from application server is automatically
                          given upon delivery of the message.

    - 'client-acknowledge': the client must explicitly acknowledgment the message.

    - 'dups-ok-acknowledge': allows the JMS server to perform optimizations on the
                             logic of acknowledgment messages, but can cause the
                             redelivery of messages.
                             Should only be used with systems that are tolerant to
                             duplicated message.

    Default: auto-acknowledge
-->
<!ATTLIST jms-enqueue  acknowledge-type (auto-acknowledge | client-acknowledge | dups-ok-acknowledge) "auto-acknowledge">
<!--
    Specifies whether the JMS server must file on a persistent store the
    message before returning to the caller.

    Sending messages persistent slightly affects the performance but provides
    greater guarantees of delivery.

    The possible values for this parameter are:

    - persistent    : guarantees delivery
    - non-persistent: don't guarantees delivery

    Default: persistent
-->
<!ATTLIST jms-enqueue   delivery-mode (persistent | non-persistent) "persistent">
<!--
    Message priority.

    The messages with higher priority will be received before messages
    with lower priority.
    The priorities set for JMS ranging from 0 (lowest priority) to
    9 (highest priority).

    The default priority of JMS messages is 4.

    Default: 4
-->
<!ATTLIST jms-enqueue   priority (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) "4">
<!--
    Lifetime of sent messages, in milliseconds.

    Upon expiration of the time-to-live the JMS server is allowed
    to discard the message without delivering it.

    This parameter is optional.
    If not specified it is assumed a time-to-live of one year.

    Default: one year

    #NotNull
-->
<!ATTLIST jms-enqueue   time-to-live CDATA #IMPLIED>
<!--
    Indicates whether to use connection pooling capabilities of the VCL.
    Set to false if the container provides pooling capabilities.

    Default: true
-->
<!ATTLIST jms-enqueue   use-vcl-pool (true | false) #IMPLIED>
<!--
    Indicates whether connections should be marked as invalid before
    reinsertion on the pool.
    Is significant only if the pooling feature is enabled.

    Default: false

    #Warn: {{self::jms-enqueue[@invalidate-conn-on-pool-insertion and (not(@use-vcl-pool) or (@use-vcl-pool='false'))]}} invalidate-conn-on-pool-insertion can be used only if use-vcl-pool='true'
-->
<!ATTLIST jms-enqueue   invalidate-conn-on-pool-insertion (false | true) #IMPLIED>
<!--
    Name of Data Provider to use.
    The Data Provider will return the JMS Message to send.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST jms-enqueue ref-dp CDATA #IMPLIED>
<!--
    If true the message to be enqueued is dumped on log file, at DEBUG severity level.
    Default: false.
-->
<!ATTLIST jms-enqueue dump-message (true|false) #IMPLIED>
<!--
    If true the message to be enqueued is enriched with input GVBuffer properties value.
    Default: true.
-->
<!ATTLIST jms-enqueue decorate-message (true|false) #IMPLIED>

<!--
    Used to make a routing mechanism at the level of communication channel,
    based on some conditions applied to the buffer GVBuffer.

    During the execution of flows, the operation is seen as a simple enqueue.
    The implementation of the routed-enqueue check the conditions and invokes a
    sub-operations accordingly.

    To configure a routed-enqueue is necessary:

        - defines sub-operations
            Each sub operation is identified by a unique name within the routed-enqueue.
            The sub-operation can be selected are only those of type "enqueue".

        - defines routing conditions
            Check the values in GVBuffer fields.
            Each routing condition has a unique name within the routed-enqueue.

        - associate routing conditions to operations
            Sub items 'VCLRouting' associate routing conditions with operations.
            The evaluation order is defined by the order of items 'VCLRouting'.
            The sub-operation is performed corresponding to the first condition verified.

    #Label: @name
    #Icon: GVRoutedEnqueueCall.png
    #Category: JMS
    #Table: | Conditions | GVBufferCondition | Condition | @condition | Description | Description
    #Template:

        <xsl:template match="routed-enqueue">
            ROUTED enqueue:
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Condition</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td>VCLOperation</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td>Description</td>
                </tr>
                <tr height="5">
                    <td colspan="5"><xsl:text> </xsl:text></td>
                </tr>
                <xsl:for-each select="VCLRouting">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@condition"/></b></td>
                        <td><xsl:text> </xsl:text></td>
                        <td><b><xsl:value-of select="@operation-name"/></b></td>
                        <td><xsl:text> </xsl:text></td>
                        <td><small><xsl:value-of select="Description"/></small></td>
                    </tr>
                </xsl:for-each>
            </table>
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT routed-enqueue (Description?, GVBufferCondition+, (%enqueue;)+, VCLRouting+, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST routed-enqueue   type CDATA #FIXED "enqueue">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST routed-enqueue   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.RoutedEnqueue">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST routed-enqueue   name CDATA #REQUIRED>

<!--
    Allows you to perform a dequeue from a JMS destination.

    JMS message properties are mapped to GVBuffer fields:

    Field        JMS
    _______________________
    system      SYSTEM
    service     SERVICE
    id          ID
    retCode     RET_CODE
    properties  p$<property name> (only GVBuffer properties with names
                            that are valid Java identifier are managed)

    If isn't defined a Data Provider the GVBuffer object field contains the
    received message.

    Can be defined a JMS message selector to filter messages.

    #Label: @name
    #Icon: dequeue32.png
    #Category: JMS
    #Template:

        <xsl:template match="jms-dequeue">
            JMS dequeue:
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>JNDI name:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@destination-name"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT jms-dequeue (Description?, JNDIHelper?, message-selector?, ServiceAlias?, XAHelper?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST jms-dequeue    type CDATA #FIXED "dequeue">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST jms-dequeue    class CDATA #FIXED "it.greenvulcano.gvesb.virtual.j2ee.JMSDequeueOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST jms-dequeue    name CDATA #REQUIRED>
<!--
    JMS connection factory JNDI name.

    #NotNull
-->
<!ATTLIST jms-dequeue   connection-factory CDATA #REQUIRED>
<!--
    Destination JNDI name.

    Set appropriately the 'destination-type' parameter.

    #NotNull
-->
<!ATTLIST jms-dequeue   destination-name CDATA #REQUIRED>
<!--
    Destination type.

    Default: queue
-->
<!ATTLIST jms-dequeue   destination-type (queue | topic) "queue">
<!--
    Specifies whether the dequeue has to open his own transaction or
    fall in a global transaction.

    - 'true' open his own transaction and do not fall in the global transaction.

    - 'false' fall in the active global transaction.
        Must be used a XA connection factory.

    This parameter is not relevant if the connection factory isn't XA.

    Default: false.
-->
<!ATTLIST jms-dequeue   transacted (false | true) "false">
<!--
    In transactional dequeue acknowledgment is managed by the application server.

    This parameter is meaningful only for non-transactional dequeue and can
    take the following values:

    - 'auto-acknowledge': the acknowledgment from application server is automatically
                          given upon delivery of the message.

    - 'client-acknowledge': the client must explicitly acknowledgment the message.

    - 'dups-ok-acknowledge': allows the JMS server to perform optimizations on the
                             logic of acknowledgment messages, but can cause the
                             redelivery of messages.
                             Should only be used with systems that are tolerant to
                             duplicated message.

    Default: auto-acknowledge
-->
<!ATTLIST jms-dequeue   acknowledge-type (auto-acknowledge | client-acknowledge | dups-ok-acknowledge) "auto-acknowledge">
<!--
    Allows you to specify whether the receipt should be made in blocking mode,
    non-blocking mode, or with timeout.

    - non-blocking: is performed a non-blocking receive.
                    If a message is already queued then it's immediately read.
                    If there are no messages available then GreenVulcanoESB
                    throws a time-out exception.

    - timeout: is performed a timeout receive.
               GreenVulcanoESB wait for the specified time. If a message is
               queued then it's immediately read.
               If there are no messages available then GreenVulcanoESB
               throws a time-out exception.

    - blocking: the current thread blocks indefinitely until a message arrives.
                Use with caution.

    #NotNull
    #Choice: non-blocking|timeout|blocking
-->
<!ATTLIST jms-dequeue   receive-type CDATA #REQUIRED>
<!--
    Time-out duration in ms.

    This parameter is meaningful only if 'receive-type' is
    set to 'time out'.
    If 'receive-type' is set to 'time out' and 'receive-timeout'
    is not defined, then is assumed a timeout of 1000 ms.

    #Warn: {{../jms-dequeue[@receive-type!='timeout']}} receive-timeout are valid only if receive-type = timeout
-->
<!ATTLIST jms-dequeue  receive-timeout CDATA #IMPLIED>
<!--
    Specifies whether the value set to 'receive-timeout' can
    be overwritten at runtime.

    Reserved for future use.
-->
<!ATTLIST jms-dequeue   receive-timeout-overridable (false | true) "false">
<!--
    Specifies the name of the durable subscriber.
    Durable subscriptions provide the receipt of all messages sent
    to the topic, even if the subscribers are not running when the
    messages are sent.

    #Warn: {{../jms-dequeue[@destination-type='queue']}} durable-subscriber are only for topics
-->
<!ATTLIST jms-dequeue   durable-subscriber CDATA #IMPLIED>
<!--
    Avoid receiving local messages.

    Reserved for future use.

    #Warn: {{../jms-dequeue[@destination-type='queue']}} no-local are only for topics
    #NotNull
    #Choice: true|false
-->
<!ATTLIST jms-dequeue    no-local CDATA #IMPLIED>
<!--
    Indicates whether to use connection pooling capabilities of the VCL.
    Set to false if the container provides pooling capabilities.

    Default: true
-->
<!ATTLIST jms-dequeue    use-vcl-pool (true | false) #IMPLIED>
<!--
    Indicates whether connections should be marked as invalid before
    reinsertion on the pool.
    Is significant only if the pooling feature is enabled.

    Default: false

    #Warn: {{self::jms-dequeue[@invalidate-conn-on-pool-insertion and (not(@use-vcl-pool) or (@use-vcl-pool='false'))]}} invalidate-conn-on-pool-insertion can be used only if use-vcl-pool='true'
-->
<!ATTLIST jms-dequeue  invalidate-conn-on-pool-insertion (false | true) #IMPLIED>
<!--
    Specifies if the dequeue must keep input GVBuffer properties, not present in the JMS message,
    in the output GVBuffer.

    Default: false.
-->
<!ATTLIST jms-dequeue   keep-input-extra-properties (true | false) #IMPLIED>
<!--
    Name of Data Provider to use.
    This Data Provider will receive in input a JMS Message and must
    return the object to be inserted in GVBuffer.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST jms-dequeue ref-dp CDATA #IMPLIED>
<!--
    If true the dequeued message is dumped on log file, at DEBUG severity level.
    Default false.
-->
<!ATTLIST jms-dequeue dump-message (true|false) #IMPLIED>
<!--
    If true the output GVBuffer is enriched with the received message properties value.
    Default: true.
-->
<!ATTLIST jms-dequeue decorate-gvbuffer (true|false) #IMPLIED>

<!--
    Allows you to specify a selector for receiving messages.
    See the JMS documentation for the selector syntax.

    The properties (and their types) provided by GreenVulcanoESB for
    selectors are:

    - SYSTEM     (String)
    - SERVICE    (String)
    - ID         (String)
    - RETCODE    (int)

    Even GVBuffer properties are present in the form of message
    properties. The properties are all string and their names
    have the prefix '$p' (only GVBuffer properties with names
    that are valid Java identifier are managed).
    For example, a GVBuffer property named PROPERTY will be identified
    by a property name p$PROPERTY.
    As GreenVulcanoESB can in turn generate selectors, you can
    define how they should be combined with the selector specified
    by this element, see 'combining' attribute.
-->
<!ELEMENT message-selector (#PCDATA)>
<!--
    GreenVulcanoESB can dynamically generate selectors.
    This parameter defines how the dynamicselector should be combined
    with the selector configured to obtain the actual selector used
    for reception of JMS message.

    Can take the following values:
    - dynamic-and-configured    (DYNAMIC) AND (CONFIGURED)
    - dynamic-or-configured     (DYNAMIC) OR (CONFIGURED)
    - dynamic-only              DYNAMIC
    - configured-only           CONFIGURED
    - configured-if-no-dynamic  DYNAMIC != null ? DYNAMIC : CONFIGURED
-->
<!ATTLIST message-selector  combining (dynamic-and-configured | dynamic-or-configured | dynamic-only | configured-only | configured-if-no-dynamic) "dynamic-and-configured">
<!--
    Used to make a routing mechanism at the level of communication channel,
    based on some conditions applied to the buffer GVBuffer.

    During the execution of flows, the operation is seen as a simple dequeue.
    The implementation of the routed-dequeue check the conditions and invokes a
    sub-operations accordingly.

    To configure a routed-dequeue is necessary:

        - defines sub-operations
            Each sub operation is identified by a unique name within the routed-dequeue.
            The sub-operation can be selected are only those of type "dequeue".

        - defines routing conditions
            Check the values in GVBuffer fields.
            Each routing condition has a unique name within the routed-dequeue.

        - associate routing conditions to operations
            Sub items 'VCLRouting' associate routing conditions with operations.
            The evaluation order is defined by the order of items 'VCLRouting'.
            The sub-operation is performed corresponding to the first condition verified.

    #Label: @name
    #Icon: GVRoutedDequeueCall.png
    #Category: JMS
    #Table: | Conditions | GVBufferCondition | Condition | @condition | Description | Description
    #Template:

        <xsl:template match="routed-dequeue">
            ROUTED dequeue:
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>Condition</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td>VCLOperation</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td>Description</td>
                </tr>
                <tr height="5">
                    <td colspan="5"><xsl:text> </xsl:text></td>
                </tr>
                <xsl:for-each select="VCLRouting">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@condition"/></b></td>
                        <td><xsl:text> </xsl:text></td>
                        <td><b><xsl:value-of select="@operation-name"/></b></td>
                        <td><xsl:text> </xsl:text></td>
                        <td><small><xsl:value-of select="Description"/></small></td>
                    </tr>
                </xsl:for-each>
            </table>
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT routed-dequeue (Description?, GVBufferCondition+, (%dequeue;)+, VCLRouting+, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST routed-dequeue   type CDATA #FIXED "dequeue">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST routed-dequeue  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.RoutedDequeue">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST routed-dequeue   name CDATA #REQUIRED>
<!--
    Defines the parameters to perform an operation on DB.

    #Label: @name
    #Icon: GVDBCall.png
    #Category: DataBase
    #Template:

        <xsl:template match="db-call">
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT db-call (Description?, DBOperations)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST db-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST db-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.db.DBCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name

-->
<!ATTLIST db-call   name CDATA #REQUIRED>

<!--
    Service to execute search/login operation on LDAP server.

    The following field's value can be static or contain placeholders that are replaced at runtime,
    the values can also be overwritten by specific properties:
    - rootContext (GVLDAP_ROOT_CONTEXT)
    - LDAPContext/security-principal  (GVLDAP_USER)
    - LDAPContext/security-credential (GVLDAP_PASSWORD)
    - LDAPFilter  (GVLDAP_FILTER)

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: @name
    #Icon: GVLDAPSearch.png
    #Category: DataBase
    #Template:
        <xsl:template match="ldap-search-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT ldap-search-call (Description?, LDAPContext, LDAPFilter*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ldap-search-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ldap-search-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.ldap.LDAPSearchOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST ldap-search-call  name CDATA #REQUIRED>
<!--
    Root search context.

    #NotNull
-->
<!ATTLIST ldap-search-call  rootContext CDATA #IMPLIED>
<!--
    If true is performer a deep search, beginning from rootContext.
    Default is true.
-->
<!ATTLIST ldap-search-call   deepSearch (true|false) #IMPLIED>
<!--
    If true is the output Document contains entry/attribute schema informations.
    Default is false.
-->
<!ATTLIST ldap-search-call   withSchema (true|false) #IMPLIED>

<!--
    Service to execute update operation on LDAP server.

    The following field's value can be static or contain placeholders that are replaced at runtime,
    the values can also be overwritten by specific properties:
    - rootContext (GVLDAP_ROOT_CONTEXT)
    - LDAPContext/security-principal  (GVLDAP_USER)
    - LDAPContext/security-credential (GVLDAP_PASSWORD)

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: @name
    #Icon: GVLDAPUpdate.png
    #Category: DataBase
    #Template:

        <xsl:template match="ldap-update-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT ldap-update-call (Description?, LDAPContext)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ldap-update-call   type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ldap-update-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.ldap.LDAPUpdateOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST ldap-update-call    name CDATA #REQUIRED>
<!--
    Root search context.

    #NotNull
-->
<!ATTLIST ldap-update-call   rootContext CDATA #IMPLIED>

<!--
    Defines the parameters for calling a Web Service.

    #Label: @name
    #Icon: GVWsCall.png
    #Category: Web/Mail
    #Table: ! Web Service Invoker ! *[@type='invoker'] ! Class ! @class ! Description ! Description
    #Template:
        <xsl:template match="ws-call">
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT ws-call (Description?, AxisWebServiceInvoker)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ws-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ws-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.ws.WSCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='call']/@name
-->
<!ATTLIST ws-call   name CDATA #REQUIRED>

<!ELEMENT AxisWebServiceInvoker (Description?, XPathNamespace*, WSDLInfo, (BasicHttpAuth | NTLMHttpAuth)?, Proxy?, EngageModule*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST AxisWebServiceInvoker type CDATA #FIXED "invoker">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST AxisWebServiceInvoker  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.ws.GVWebServiceInvoker">
<!--
    Service name.
-->
<!ATTLIST AxisWebServiceInvoker service CDATA #IMPLIED>
<!--
    Service NameSpace.
-->
<!ATTLIST AxisWebServiceInvoker serviceNS CDATA #IMPLIED>
<!--
    Operation name.

    #NotNull
-->
<!ATTLIST AxisWebServiceInvoker operation CDATA #REQUIRED>
<!--
    If true the SOAPAction header is not set in the request
    Default to false.
-->
<!ATTLIST AxisWebServiceInvoker emptyAction (true|false) #IMPLIED>
<!--
    Port Name
-->
<!ATTLIST AxisWebServiceInvoker portName CDATA #IMPLIED>
<!--
    Timeout in seconds.
-->
<!ATTLIST AxisWebServiceInvoker timeout CDATA #IMPLIED>
<!--
    Name of Data Provider to use to prepare the request.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST AxisWebServiceInvoker ref-dp CDATA #IMPLIED>
<!--
    If true throws Exception "Error invoking operation".
    If false returns the Fault response.
    Default to false.
-->
<!ATTLIST AxisWebServiceInvoker throwsFault (true|false) #IMPLIED>
<!--
    Defines whether to use SAAJ to invoke the WebService mode
    instead of the default Axis2 mode.

    NOTE: If you choose to use SAAJ as a way of calling the
    WebService, Axis2 modules are not enabled.

    #Warn: {{gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/Axis2SAAJSOAPMessageDataProvider[current()/@use-saaj='true' and @name=current()/@ref-dp]}} Specify a data provider Axis2SAAJSOAPMessageDataProvider type if the attribute 'use-saaj' is set to true
-->
<!ATTLIST AxisWebServiceInvoker use-saaj (true|false) #IMPLIED>
<!--
    Defines how to set the response data in the object field of output GVBuffer:
    - context         : the MessageContext
    - envelope        : the envelope as XML serialized as string
    - body            : the body as XML serialized as string
    - body-element    : the first child of body as XML serialized as string
    - header          : the header as XML serialized as string
    - envelope-om     : the envelope as OMMessage
    - body-om         : the body as OMMessage
    - body-element-om : the first child of body as OMMessage
    - header-om       : the header as OMMessage

    Default: context
-->
<!ATTLIST AxisWebServiceInvoker  returnType  (context|envelope|body|body-element|header|envelope-om|body-om|body-element-om|header-om) #IMPLIED>

<!--
    Return a WSDL through his URL.
-->
<!ELEMENT WSDLInfo (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST WSDLInfo type CDATA #FIXED "wsdlinfo">
<!--
    WSDL file URL.

    #NotNull
-->
<!ATTLIST WSDLInfo wsdl CDATA #REQUIRED>
<!--
    Override the endpoint URL defined in the wsdl.
    Is overridden by the WS_ENDPOINT_URL GVBuffer's property value.

    #NotNull
-->
<!ATTLIST WSDLInfo ws-endpoint-url CDATA #IMPLIED>

<!--
    Defines the parameters for calling a Web Service using REST mode.

    #Label: @name
    #Icon: GVRestCall.png
    #Category: Web/Mail
    #Table: ! Web Service Invoker ! *[@type='invoker'] ! Class ! @class ! Description ! Description
    #Template:
        <xsl:template match="rest-call">
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT rest-call (Description?, RestServiceInvoker)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rest-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rest-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.ws.rest.RestCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='call']/@name
-->
<!ATTLIST rest-call   name CDATA #REQUIRED>

<!ELEMENT RestServiceInvoker (Description?, (BasicHttpAuth | NTLMHttpAuth)?, Proxy?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RestServiceInvoker type CDATA #FIXED "invoker">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RestServiceInvoker class CDATA #FIXED "it.greenvulcano.gvesb.virtual.ws.rest.RestServiceInvoker">
<!--
    Endpoint exposed by the Rest Web Service to invoke. Can contain placeholders.
    It must be already escaped, if needed.

    #NotNull
-->
<!ATTLIST RestServiceInvoker endpoint CDATA #REQUIRED>
<!--
    HTTP method to execute to the server.
-->
<!ATTLIST RestServiceInvoker method (GET|POST|PUT|DELETE|HEAD|OPTIONS) #REQUIRED>
<!--
    Timeout in seconds.
-->
<!ATTLIST RestServiceInvoker timeout CDATA #IMPLIED>
<!--
    Name of Data Provider to use to prepare the request.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST RestServiceInvoker ref-dp CDATA #IMPLIED>
<!--
    If true throws Exception "Error invoking operation".
    If false returns the Fault response.
    Defaults to false.
-->
<!ATTLIST RestServiceInvoker throwsFault (true|false) #IMPLIED>
<!--
    Defines how to set the response data in the object field of output GVBuffer:
    - context         : the MessageContext
    - envelope        : the envelope as XML serialized as string
    - body            : the body as XML serialized as string
    - body-element    : the first child of body as XML serialized as string
    - header          : the header as XML serialized as string
    - envelope-om     : the envelope as OMMessage
    - body-om         : the body as OMMessage
    - body-element-om : the first child of body as OMMessage
    - header-om       : the header as OMMessage

    Default: context
-->
<!ATTLIST RestServiceInvoker  returnType  (context|envelope|body|body-element|header|envelope-om|body-om|body-element-om|header-om) #IMPLIED>
<!--
    This is used to specify the message format which the message needs to be serialized.
    See 'messageFormatters' configuration in axis2.xml file.
    Default value is: 'application/x-www-form-urlencoded'
-->
<!ATTLIST RestServiceInvoker mediaType CDATA #IMPLIED>
<!--
    This is used to specify the message builder which the message needs to be serialized.
    See 'messageBuilders' configuration in axis2.xml file.
    Defaults to the value specified in 'mediaType' attribute.
-->
<!ATTLIST RestServiceInvoker contentType CDATA #IMPLIED>
<!--
    This is used to specify if invoked service returns a response (OUT_IN) or not (OUT_ONLY).
    Default value is: OUT_IN
-->
<!ATTLIST RestServiceInvoker responseMode (OUT_IN|OUT_ONLY) #IMPLIED>




<!--
    This plug-in, when invoked, performs a scan of the directory specified
    in configuration, and returns a report in XML format (following the
    schema AnalysisReport.xsd) that can be configured to display any
    combination of the information listed below:

    - files CREATED in the directory since the last scan performed;
    - files MODIFIED in the directory since the last scan performed;
    - files DELETED from the directory since the last scan performed;
    - files EXISTENT in the directory;

    You can restrict the scan to only files whose names conform to a
    regular expression defined in configuration.
    If the invocation of the plug ends with the generation of a report,
    this report is included in the object field of output GVBuffer.
    In the output GVBuffer are also set the following properties:

         'GVFSM_REPORT_CREATED' set to 'true' if a report XML and was created.

         'GVFSM_EXISTING_FILES' set if the filter 'existing' was configured and in target directory
                                exist files whose name conforms to the pattern specified in configuration.
                                Contains the number of such files.

         'GVFSM_CREATED_FILES'  set if the filter 'created' was configured and the in target directory,
                                after the last scan performed, were created file whose name is consistent
                                with the pattern specified in the configuration.
                                Contains the number of such files.

         'GVFSM_MODIFIED_FILES' set if the filter 'modified' was configured and the in target directory,
                                after the last scan performed, were modified file whose name is consistent
                                with the pattern specified in the configuration.
                                Contains the number of such files.

         'GVFSM_DELETED_FILES'  set if the filter 'deleted' was configured and the in target directory,
                                after the last scan performed, were deleted file whose name is consistent
                                with the pattern specified in the configuration.
                                Contains the number of such files.

    #Label: @name
    #Icon: GVFsMonitor2.png
    #Category: File
    #SelectOnInsert
    #Template:
    <xsl:template match="fsmonitor-call">
        <table cellpadding="0" cellspacing="0">
                <xsl:choose>
                    <xsl:when test="RemoteFileSystemMonitor">
                        <tr valign="top">
                            <td><small>Remote target directory:</small></td>
                            <td width="20"></td>
                            <td><b><small><xsl:value-of select="RemoteFileSystemMonitor/@path"/></small></b></td>
                        </tr>
                    </xsl:when>
                    <xsl:otherwise>
                        <tr valign="top">
                            <td><small>Local target directory:</small></td>
                            <td width="20"></td>
                            <td><b><small><xsl:value-of select="LocalFileSystemMonitor/@path"/></small></b></td>
                        </tr>
                    </xsl:otherwise>
                </xsl:choose>
                <tr valign="top">
                    <td><small>File mask:</small></td>
                    <td width="20"></td>
                    <td><b><small><xsl:value-of select="*/FileFilter/@file-mask"/></small></b></td>
                </tr>
                <tr valign="top">
                    <td><small>File type:</small></td>
                    <td width="20"></td>
                    <td><b><small><xsl:value-of select="*/FileFilter/@file-type"/></small></b></td>
                </tr>
        </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
    </xsl:template>
-->
<!ELEMENT fsmonitor-call (Description?, (%fs-monitor;))>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST fsmonitor-call type    CDATA #FIXED "call">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST fsmonitor-call class  CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.reader.AnalyzeDirCall">

<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST fsmonitor-call name CDATA #REQUIRED>


<!--
    This plug-in allows you to perform a sequence of file operations
    in a remote file system accessible via an (S)FTP account.
    The operations allowed are:
    - Download a file/directory from a remote directory to a local directory
    - Upload a file/directory from a local directory to a remote directory
    - Control of one or more files (whose name corresponds to a date
      regular expressions) in a remote directory
    - Deleting a file/directory from a remote directory
    - Rename/move a file/directory in a remote directory

    #Label: @name
    #Icon: GVRemoteManager.png
    #Category: File
    #SelectOnInsert
    #Template:

    <xsl:template match="remotemanager-call">
        <xsl:if test="Description">
            <small><br/><xsl:value-of select="Description"/></small>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT remotemanager-call (Description?, (%remote_managers;), RemoteCommands?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST remotemanager-call type CDATA #FIXED "call">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST remotemanager-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.remote.RemoteManagerCall">

<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST remotemanager-call name CDATA #REQUIRED>


<!--
    The sequence of FTP operations to be carried out.
    The operations will be performed in the order they were configured.
    An error in one of the operation marked as critical will terminate
    the execution of the entire sequence of operations.

    #SelectOnInsert
-->
<!ELEMENT RemoteCommands (%remote-file-commands;)+>

<!--
    Check if one or more files, whose name conforms to a given regular
    expression, exists within the specified directory.
    On completion of and in the absence of errors are set the following
    properties of output GVBuffer:

    1) GVRM_FOUND_FILES_NUM       Number of files found (>= 0)

    2) GVRM_FOUND_FILES_LIST      List of names of found files, separated by ';'.
                                  Set only if the value of field
                                  'GVRM_FOUND_FILES_NUM' is greater than 0.

    Both the pattern of the file and that the directory can be static or
    contain placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}}
                                 : execute a select sql statement sql and return the value of
                                   the first field of all selected records as a 'sep' separated list.
                                   The 'conn' parameter is the JNDI name of a DataSource
                                   The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}} : executes a select sql statement and returns all values of
                                     returned cursor as an XML.
                                     The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT RemoteSearchCommand (Description?, PropertyDef*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteSearchCommand type CDATA #FIXED "remote-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteSearchCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.remote.command.GVSearch">

<!--
    Absolute path of the directory to search in.

    #NotNull
-->
<!ATTLIST RemoteSearchCommand sourcePath CDATA #REQUIRED>

<!--
    File name to search for. Can be a regular espression.

    #NotNull
-->
<!ATTLIST RemoteSearchCommand filePattern CDATA #REQUIRED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST RemoteSearchCommand isCritical (true|false) #IMPLIED>

<!--
    Move/rename a file/directory.
    The file name, the source and destination directory names
    can be static or contain placeholders that are replaced at runtime.

    After the replacement of the placeholder, the value of the 'filename'
    may contain a regular expression, in which case, all files of the
    source directory, whose name is in accordance with the corresponding
    pattern will be moved to the destination directory.
    If the destination directory already contains files with the same name,
    they will be overwritten.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT RemoteMoveCommand (Description?, PropertyDef*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteMoveCommand type CDATA #FIXED "remote-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteMoveCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.remote.command.GVMove">

<!--
    Absolute path of the file/directory where is the file to move.

    #NotNull
-->
<!ATTLIST RemoteMoveCommand targetPath CDATA #REQUIRED>

<!--
    File name to move.
-->
<!ATTLIST RemoteMoveCommand oldName CDATA #REQUIRED>


<!--
    File name moved.
-->
<!ATTLIST RemoteMoveCommand newName CDATA #REQUIRED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST RemoteMoveCommand isCritical (true|false) #IMPLIED>

<!--
    Deleting a file/directory.
    Both the file name and the directory can be static or
    contain placeholders that are replaced at runtime.

    After the replacement of the placeholder, the value
    of the 'filename' may contain a regular expression,
    in which case, will erase all files in the specified
    directory whose name is consistent with the
    corresponding pattern.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}}
                                   : execute a select sql statement sql and return the value of
                                     the first field of all selected records as a 'sep' separated list.
                                     The 'conn' parameter is the JNDI name of a DataSource
                                     The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}} : executes a select sql statement and returns all values of
                                     returned cursor as an XML.
                                     The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT RemoteDeleteCommand (Description?, PropertyDef*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteDeleteCommand type CDATA #FIXED "remote-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteDeleteCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.remote.command.GVDelete">
<!--
    Absolute path of the file/directory to remove.

    #NotNull
-->
<!ATTLIST RemoteDeleteCommand targetPath CDATA #REQUIRED>
<!--
    File name to remove. Can be a regular espression.
    Is used only if targetPath is a directory,
    and if empty the filter is ignored.

-->
<!ATTLIST RemoteDeleteCommand filePattern CDATA #IMPLIED>
<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST RemoteDeleteCommand isCritical (true|false) #IMPLIED>


<!--
    Download file / directory from remote directory and saved
    in the local directory you specified (or in GVBuffer).
    File names and directories can be static or contain
    placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT RemoteDownloadCommand (Description?, PropertyDef*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteDownloadCommand type CDATA #FIXED "remote-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteDownloadCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.remote.command.GVDownload">

<!--
    Pathname of remote directory containing the file to download.
    It can be an absolute pathname or relative, in the second case
    it is relative to home directory of ftp user.

    #NotNull
-->
<!ATTLIST RemoteDownloadCommand remotePath CDATA #REQUIRED>
<!--
    The name of the file to download.

    #NotNull
-->
<!ATTLIST RemoteDownloadCommand remoteFilePattern CDATA #REQUIRED>
<!--
    GVBuffer OGNL expression used to specify how to handle the current
    downloaded file.
    In the expression, the downloaded file will be referenced by the
    variable #input, and will be a byte [].

    #NotNull
-->
<!ATTLIST RemoteDownloadCommand toGVBufferExpression CDATA #IMPLIED>
<!--
    Pathname of the local directory to save the downloaded file.
    Must be an absolute pathname.

    #NotNull
    #Warn: {{../RemoteDownloadCommand[@toGVBufferExpression and @targetPath]}} Specify only one of toGVBufferExpression and targetPath
-->
<!ATTLIST RemoteDownloadCommand targetPath CDATA #IMPLIED>
<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST RemoteDownloadCommand isCritical (true|false) #IMPLIED>

<!--
    Upload a file from local directory (or GVBuffer) to
    the remote directory specified.
    File names and directories can be static or contain
    placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT RemoteUploadCommand (Description?, PropertyDef*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteUploadCommand type CDATA #FIXED "remote-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteUploadCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.remote.command.GVUpload">

<!--
    Pathname of the local directory where the file is transferred.
    Must be an absolute pathname.

    #NotNull
-->
<!ATTLIST RemoteUploadCommand sourcePath CDATA #IMPLIED>

<!--
    The name of the file to transfer.

    #NotNull
-->
<!ATTLIST RemoteUploadCommand sourceFilePattern CDATA #IMPLIED>

<!--
    Expression OGNL apply to current GVBuffer that specifies how
    to building the file content.
    In the expression, the GVBuffer is associated with #object,
    and must return a byte[].

    #NotNull
-->
<!ATTLIST RemoteUploadCommand fromGVBufferExpression CDATA #IMPLIED>

<!--
    Pathname of remote directory where upload the file.
    It can be an absolute pathname or relative, in the second case
    it is relative to home directory of ftp user.

    #NotNull
-->
<!ATTLIST RemoteUploadCommand remotePath CDATA #REQUIRED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST RemoteUploadCommand isCritical (true|false) #IMPLIED>

<!--
    This plug-in allows you to perform a sequence of file
    operations on the local filesystem.
    The operations allowed are:
    - Deletion of one or more file whose name corresponds to a regular expression;
    - Rename a file;
    - Moving of one or more files, whose name corresponds to a regular expression,
      from a directory source to a destination directory;
    - Copy of one or more files, whose name corresponds to a regular expression,
      from source directory to a destination directory;
    - ZIP compress of one or more files, whose name corresponds to a regular expression,
      from a source directory to a ZIP file in a destination directory;
    - Decompression of ZIP file from a directory source to a target directory;
    - Check existence of one or more files whose name corresponds to a given regular expression;

    #Label: @name
    #Icon: GVFileManager.png
    #Category: File
    #SelectOnInsert
    #Template:

    <xsl:template match="filemanager-call">
        <xsl:if test="Description">
            <small><br/><xsl:value-of select="Description"/></small>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT filemanager-call (Description?, FileCommands)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST filemanager-call type CDATA #FIXED "call">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST filemanager-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.FileManagerCall">

<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST filemanager-call name CDATA #REQUIRED>

<!--
    The sequence of file operations to be performed.
    The operations are carried out in the order they are configured.
    An error in one of the critical operations will terminate the
    execution of the entire sequence of operations.

    #SelectOnInsert
-->
<!ELEMENT FileCommands (%file-commands;)+>

<!--
    Check if one or more files, whose name conforms to a given regular
    expression, exists within the specified directory.
    On completion of and in the absence of errors are set the following
    properties of output GVBuffer:

    1) GVFM_FOUND_FILES_NUM       Number of files found (>= 0)

    2) GVFM_FOUND_FILES_LIST      List of names of found files, separated by ';'.
                                  Set only if the value of field
                                  'GVFM_FOUND_FILES_NUM' is greater than 0.

    Both the pattern of the file and that the directory can be static or
    contain placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT FileSearchCommand (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileSearchCommand type CDATA #FIXED "file-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileSearchCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.command.GVSearch">

<!--
    Absolute path of the directory to search in.

    #NotNull
-->
<!ATTLIST FileSearchCommand sourcePath CDATA #REQUIRED>

<!--
    File name to search for. Can be a regular espression.

    #NotNull
-->
<!ATTLIST FileSearchCommand filePattern CDATA #REQUIRED>

<!--
    If true the found files are inserted in list with full path.
    Default false.
-->
<!ATTLIST FileSearchCommand returnFullPath (true|false) #IMPLIED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST FileSearchCommand isCritical (true|false) #IMPLIED>

<!--
    Move/rename a file/directory.
    The file name, the source and destination directory names
    can be static or contain placeholders that are replaced at runtime.

    After the replacement of the placeholder, the value of the 'filename'
    may contain a regular expression, in which case, all files of the
    source directory, whose name is in accordance with the corresponding
    pattern will be moved to the destination directory.
    If the destination directory already contains files with the same name,
    they will be overwritten.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT FileMoveCommand (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileMoveCommand type CDATA #FIXED "file-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileMoveCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.command.GVMove">

<!--
    Absolute path of the file/directory to move.

    #NotNull
-->
<!ATTLIST FileMoveCommand sourcePath CDATA #REQUIRED>

<!--
    Absolute path of the destination file/directory.

    #NotNull
-->
<!ATTLIST FileMoveCommand targetPath CDATA #REQUIRED>

<!--
    File name to move. Can be a regular espression.
    Is used only if sourcePath is a directory,
    and if empty the filter is ignored.

-->
<!ATTLIST FileMoveCommand filePattern CDATA #IMPLIED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST FileMoveCommand isCritical (true|false) #IMPLIED>

<!--
    Deleting a file/directory.
    Both the file name and the directory can be static or
    contain placeholders that are replaced at runtime.

    After the replacement of the placeholder, the value
    of the 'filename' may contain a regular expression,
    in which case, will erase all files in the specified
    directory whose name is consistent with the
    corresponding pattern.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT FileDeleteCommand (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileDeleteCommand type CDATA #FIXED "file-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileDeleteCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.command.GVDelete">
<!--
    Absolute path of the file/directory to remove.

    #NotNull
-->
<!ATTLIST FileDeleteCommand targetPath CDATA #REQUIRED>
<!--
    File name to remove. Can be a regular espression.
    Is used only if targetPath is a directory,
    and if empty the filter is ignored.

-->
<!ATTLIST FileDeleteCommand filePattern CDATA #IMPLIED>
<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST FileDeleteCommand isCritical (true|false) #IMPLIED>


<!--
    Copy a file/directory.
    The file name, the source and destination directory names
    can be static or contain placeholders that are replaced at runtime.

    After the replacement of the placeholder, the value of the 'filename'
    may contain a regular expression, in which case, all files of the
    source directory, whose name is in accordance with the corresponding
    pattern will be copied to the destination directory.
    If the destination directory already contains files with the same name,
    they will be overwritten.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT FileCopyCommand (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileCopyCommand type CDATA #FIXED "file-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileCopyCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.command.GVCopy">

<!--
    Absolute path of the file/directory to copy.

    #NotNull
-->
<!ATTLIST FileCopyCommand sourcePath CDATA #REQUIRED>

<!--
    Absolute path of the destination file/directory.

    #NotNull
-->
<!ATTLIST FileCopyCommand targetPath CDATA #REQUIRED>

<!--
    File name to copy. Can be a regular espression.
    Is used only if sourcePath is a directory,
    and if empty the filter is ignored.
-->
<!ATTLIST FileCopyCommand filePattern CDATA #IMPLIED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST FileCopyCommand isCritical (true|false) #IMPLIED>


<!--
    Compression of one or more files/directories in a directory
    source to a ZIP file into a target directory.
    The file name, the source and destination directory names
    can be static or contain placeholders that are replaced at runtime.
    If the destination directory already has a ZIP file with
    the same name, it will be overwritten.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
-->
<!ELEMENT FileZipCommand (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileZipCommand type CDATA #FIXED "file-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileZipCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.command.GVZip">

<!--
    Absolute path of the source directory.

    #NotNull
-->
<!ATTLIST FileZipCommand sourcePath CDATA #REQUIRED>

<!--
    File name to zip. Can be a regular espression.
    Is used only if sourcePath is a directory,
    and if empty the filter is ignored.
-->
<!ATTLIST FileZipCommand filePattern CDATA #IMPLIED>

<!--
    Absolute path of the destination directory.

    #NotNull
-->
<!ATTLIST FileZipCommand targetPath CDATA #REQUIRED>

<!--
    Name of the zip file.

    #NotNull
-->
<!ATTLIST FileZipCommand zipFileName CDATA #REQUIRED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST FileZipCommand isCritical (true|false) #IMPLIED>

<!--
    Unpacking the contents of a Zip file in a directory source
    to a target directory.
    The file name, the source and destination directory names
    can be static or contain placeholders that are replaced at runtime.

    #SelectOnInsert
-->
<!ELEMENT FileUnZipCommand (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileUnZipCommand type CDATA #FIXED "file-command">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileUnZipCommand class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.command.GVUnZip">

<!--
    Absolute path of the source directory.

    #NotNull
-->
<!ATTLIST FileUnZipCommand sourcePath CDATA #REQUIRED>

<!--
    Name of the zip file.

    #NotNull
-->
<!ATTLIST FileUnZipCommand zipFileName CDATA #REQUIRED>

<!--
    Absolute path of the destination directory.

    #NotNull
-->
<!ATTLIST FileUnZipCommand targetPath CDATA #REQUIRED>

<!--
    If true an internal error interrupt the command sequence.
    Default true.
-->
<!ATTLIST FileUnZipCommand isCritical (true|false) #IMPLIED>

<!--
    This element can be used for authomatic enlist and delist of XA resource in a distributed transaction.

    #Icon: default.png
-->
<!ELEMENT XAHelper (Description?, JNDIHelper?)>
<!--
    If true, the associated XA resource are authomatically enlisted into or delisted from the distributed transaction.
-->
<!ATTLIST XAHelper auto-enlist (true | false) "false">
<!--
    Identifies the transaction phase into which execute the delist.
-->
<!ATTLIST XAHelper transaction-status (TMSUCCESS | TMFAIL) "TMSUCCESS">

<!--
    Invokes the Data Transformation Engine (GVDTE).

    Refer to the documentation GVDTE for information on features
    of GreenVulcanoESB Data Transformation Engine.

    #Label: .//@value
    #Icon: default.png
    #Template:
        <xsl:template match="gvdte-service">
            <xsl:apply-templates select="*[@type='call']"/>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="100"><xsl:value-of select=".//@name"/><xsl:text>: </xsl:text></td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select=".//@value"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT gvdte-service (Description?, map-name-param?, gvdte-context-call, gvdte-extra-param*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST gvdte-service type CDATA #FIXED "service">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST gvdte-service internal CDATA #FIXED "yes">
<!--
    Define if the service is critical.
    A critical service failure mark the entire communication as failed.
-->
<!ATTLIST gvdte-service  critical (yes | no) "yes">
<!--
    Indicates whether or not to remove from the buffer
    the fields used for communication with GVDTE.
-->
<!ATTLIST gvdte-service  remove-fields (yes | no) "yes">
<!--
    Specifies the name of the transformation that should apply by GVDTE.
    This name must indicate a transformation currently configured in GVDTE.

    This parameter can be optional if the input GVBuffer has a property
    with the name map-name.

    #Label: @value
    #Icon: default.png
    #Template:
        <xsl:template match="map-name-param">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="100">Name:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@name"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="100">Value:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@value"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT map-name-param (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST map-name-param  type CDATA #FIXED "param">
<!--
    Unmodifiable.
-->
<!ATTLIST map-name-param  name CDATA #FIXED "map-name">
<!--
    Specifies the name of the transformation that should apply by GVDTE.
    This name must indicate a transformation currently configured in GVDTE.

    #Label: @value
    #References: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/@name
    #References: /GVCore/GVDataTransformation/Transformations/*[@type='transformation']/TransformationAlias/@name
-->
<!ATTLIST map-name-param value CDATA #REQUIRED>

<!--
    Allows you to specify additional parameters for the transformation GVDTE must apply.

    #Label: @name
    #SelectOnInsert
    #Template:

        <xsl:template match="gvdte-extra-param">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="100">Name:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@name"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="100">Value:</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@value"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT gvdte-extra-param (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST gvdte-extra-param  type CDATA #FIXED "param">
<!--
    Parameter name.

    #NotNull
-->
<!ATTLIST gvdte-extra-param  name CDATA #REQUIRED>
<!--
    Parameter value.
    The value of this attribute can be static or can be interpreted dynamically,
    as the value of a metadata expression that also employee the input GVBuffer.

    #NotNull
-->
<!ATTLIST gvdte-extra-param value CDATA #REQUIRED>

<!--
    Communication parameters to interact with GVDTE.

    #Label: @name
-->
<!ELEMENT gvdte-context-call (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST gvdte-context-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST gvdte-context-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.DTEServiceContextCall">
<!--
    ID used for diagnostics.
    Is printed on the log files.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST gvdte-context-call  name CDATA #REQUIRED>

<!--
    Invokes the XML validation engine.

    #Template:

        <xsl:template match="xml-validation-service">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT xml-validation-service (Description?, xml-validation-call)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST xml-validation-service type CDATA #FIXED "service">
<!--
    Unmodifiable.
-->
<!ATTLIST xml-validation-service internal CDATA #FIXED "yes">

<!--
    Communication parameters to interact with XML validation engine.

    #Label: @name
    #Template:

        <xsl:template match="xml-validation-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT xml-validation-call (Description?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST xml-validation-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST xml-validation-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.xml.XMLValidationCallOperation">
<!--
    ID used for diagnostics.
    Is printed on the log files.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST xml-validation-call name CDATA #REQUIRED>
<!--
    Default XSD.
    The file must be into xsds folder.

    #NotNull
    #Warn: {{../xml-validation-call[@default-xsd and not(@xsd-policy)]}} Specify the policy to use the default schema.
-->
<!ATTLIST xml-validation-call  default-xsd CDATA #IMPLIED>
<!--
   Policies for the use of default XSD.
   If 'force-default' is always used the XSD specified in parameter 'default-xsd'.
   If 'null xsd' is used used the XSD specified in parameter 'default-xsd' only
   if the schema specified in the XML is invalid.

   Default 'force-default'

    #Warn: {{../xml-validation-call[@xsd-policy and not(@default-xsd)]}} Specify the default schema.
-->
<!ATTLIST xml-validation-call xsd-policy (force-default|null-xsd) #IMPLIED>
<!--
    Returns the parsed and validated org.w3c.dom.Document corresponding to the input object.
    The same object is returned if input already is a DOM Document.
    Default is 'false'.
-->
<!ATTLIST xml-validation-call return-dom (false | true) #IMPLIED>

<!--
    Invokes the JSON validation engine.

    #Template:

        <xsl:template match="json-validation-service">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT json-validation-service (Description?, json-validation-call)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST json-validation-service type CDATA #FIXED "service">
<!--
    Unmodifiable.
-->
<!ATTLIST json-validation-service internal CDATA #FIXED "yes">

<!--
    Communication parameters to interact with JSON validation engine.

    #Label: @name
    #Template:

        <xsl:template match="json-validation-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT json-validation-call (Description?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST json-validation-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST json-validation-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.json.JSONValidationCallOperation">
<!--
    ID used for diagnostics.
    Is printed on the log files.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST json-validation-call name CDATA #REQUIRED>
<!--
    File name of a JSON Schema.
    The file must be into jsds folder.

    #NotNull
-->
<!ATTLIST json-validation-call  jsd-name CDATA #REQUIRED>

<!--
    Internal service useful to execute scripts on GVBuffer instances.
    The current GVBuffer object is added as 'data' property to the context.

    #Label: .//@name
    #Template:

        <xsl:template match="script-service">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT script-service (Description?, script-call)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST script-service type CDATA #FIXED "service">
<!--
    Unmodifiable.
-->
<!ATTLIST script-service   internal CDATA #FIXED "yes">
<!--
    Define if the service is critical.
    A critical service failure mark the entire communication as failed.
-->
<!ATTLIST script-service critical (yes | no) "yes">

<!--
    VCL Operation useful to execute scripts on GVBuffer instances.

    #Label: @name
    #Template:

        <xsl:template match="script-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT script-call (Description?, Script)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST script-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST script-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.ScriptCallOperation">
<!--
    Operation identifier.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST script-call  name CDATA #REQUIRED>


<!--
    This element allows GreenVulcanoESB to pass at the resource adapter
    information necessary for obtaining a JCA connection.

    The information needed to connect are specified by one or more properties.

    The properties to be specified depend on the particular resource adapter.
    Refer to the documentation of the resource adapter for more information.

    #Label: @classCciConnectionSpec
    #SelectOnInsert
    #Table: \ Connection spec properties \ spec-property \ Name \ @name \ Value \ @value \ Description \ Description
    #Template:

        <xsl:template match="connection-spec">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:for-each select="spec-property">
                <b><xsl:value-of select="@name"/></b>: <xsl:value-of select="@value"/><br/>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT connection-spec (Description?, spec-property*)>
<!--
    This class must implement the interface javax.resource.cci.ConnectionSpec,
    and is specific to the resource adapter.

    Refer to the documentation of the resource adapter.

    #NotNull
-->
<!ATTLIST connection-spec  classCciConnectionSpec CDATA #REQUIRED>
<!--
    Property used to initialize the connection spec to connect the JCA adapter.

    The properties to be specified depend on the particular resource adapter.
    Refer to the documentation of the resource adapter.

    #Label: @name
    #SelectOnInsert
-->
<!ELEMENT spec-property (Description?)>
<!--
    Property name.

    #NotNull
    #Unique: ../spec-property/@name
-->
<!ATTLIST spec-property name CDATA #REQUIRED>
<!--
    Property value.
-->
<!ATTLIST spec-property value CDATA #REQUIRED>
<!--
    This feature allows you to set some fields GVBuffer output with the
    output values of the EIS.

    Can only be used if the output of the EIS is in XML format.

    #Table: | Properties | property | Name | @name | XPath | @xpath | Description | Description
    #SelectOnInsert
    #Template:

        <xsl:template match="param-gvbuffer">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellpadding="0" cellspacing="0">
                <xsl:if test="@xpath-retCode">
                    <tr>
                        <td>Return code:</td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@xpath-retCode"/></b></td>
                    </tr>
                </xsl:if>
            </table>
        </xsl:template>
-->
<!ELEMENT param-gvbuffer (Description?, property*)>
<!--
    Specifies an XPath expression to be applied to EIS output XML
    to select the return code set in the output GVBuffer.

    #NotNull
-->
<!ATTLIST param-gvbuffer  xpath-retCode CDATA #IMPLIED>
<!--
    Specifies an XPath expression to be applied to EIS output XML
    to select the value of a propery to set in the output GVBuffer.

    #SelectOnInsert
-->
<!ELEMENT property (Description?)>
<!--
    Name of property to set on output GVBuffer.

    #NotNull
    #Unique: ../property/@name
-->
<!ATTLIST property  name CDATA #REQUIRED>
<!--
    Specifies an XPath expression to be applied to EIS output XML
    to select the value of a propery to set in the output GVBuffer.

    #NotNull
-->
<!ATTLIST property xpath CDATA #REQUIRED>
<!--
    Specifies a default value to use in case the XPath does
    not select any value.

    If not specified, if the XPath does not identify any value,
    the field will not be set.
-->
<!ATTLIST property   default CDATA #IMPLIED>
<!--
    Associates a routing condition defined in a routing operation
    (routed-call, routed-enqueue, routed-dequeue) with a given sub-operation.

    The order of elements VCLRouting also defines the order of evaluation
    conditions.
    Will perform the operation corresponding to the first condition verified.

    #Label: @condition
    #Template:
        <xsl:template match="VCLRouting">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            Condition: <b><xsl:text> </xsl:text><xsl:value-of select="@condition"/></b><br/>
            Operation name: <b><xsl:text> </xsl:text><xsl:value-of select="@operation-name"/></b><br/>
        </xsl:template>
-->
<!ELEMENT VCLRouting (Description?)>
<!--
    Routing condition specified by an element of type GVBufferCondition.

    #References: ../*[@type='condition']/@condition
    #Unique: ../VCLRouting/@condition
-->
<!ATTLIST VCLRouting condition CDATA #REQUIRED>
<!--
    Operation to execute if the condition specified with the
    parameter 'condition' is verified.

    #References: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST VCLRouting operation-name CDATA #REQUIRED>
<!--
    This feature allows you to define an invocation to a JCA adapter
    that exposes the CCI interface.

    Are no limitations on the structure of records that the JCA
    adapter can use.

    The body of GVBuffer must contain an XML structure that describes
    the JCA record, and in response the output record is converted
    in the same XML format.

    #Label: @name
    #Icon: GVJcaCall.png
    #Category: J2EE
    #SelectOnInsert
    #Template:

        <xsl:template match="j2ee-jca-call">
            JCA-XML/CCI:
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td>JNDI name</td>
                    <td width="20"><xsl:text> </xsl:text></td>
                    <td><b><xsl:value-of select="@jndi-name-eis"/></b></td>
                </tr>
                <xsl:if test="jca-interaction-spec/@function-name">
                    <tr valign="top">
                        <td>Function</td>
                        <td width="20"><xsl:text> </xsl:text></td>
                        <td><b><xsl:value-of select="jca-interaction-spec/@function-name"/></b></td>
                    </tr>
                </xsl:if>
            </table>
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT j2ee-jca-call (Description?, JNDIHelper?, jca-interaction-spec, jca-connection-spec?, xml-data?, param-gvbuffer?, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST j2ee-jca-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST j2ee-jca-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.jca.JCACallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST j2ee-jca-call  name CDATA #REQUIRED>
<!--
    JNDI name under which the resource adapter is installed.
    Is the JNDI name of connection factory.

    #NotNull
-->
<!ATTLIST j2ee-jca-call jndi-name-eis CDATA #REQUIRED>
<!--
    Invocation description:

    - exec_in_out
        GreenVulcanoESB uses the Interaction.execute() with the input
        and output records.
        If the method returns false, GreenVulcanoESB throws an exception.

    - out_exec_in
        GreenVulcanoESB uses the method Interaction.execute() with the only input record,
        receiving the output record as a result of invocation.

    - exec_in
        GreenVulcanoESB uses the method Interaction.execute() with the only input record,
        without expecting results. GreenVulcanoESB returns the input record.

    Refer to the documentation of particular JCA adapter to see which are the accepted methods.

    #Warn: {{../j2ee-jca-call[(@exec-type='exec_in_out')and((not(@output-name))or(not(@output-type)))]}} If the attribute 'exec-type' is 'exec-in-out', then also must be specified attributes 'output-name' and 'output-type'
-->
<!ATTLIST j2ee-jca-call  exec-type (out_exec_in | exec_in_out | exec_in) #REQUIRED>
<!--
    If you specify 'exec_in_out' to attribute 'exec-type', you must specify
    the name of the output record.

    Refer to the documentation of particular JCA adapter to see which is
    the name to be used.

    #Warn: {{../j2ee-jca-call[not(@exec-type='exec_in_out')]}} The attribute 'output-name' must be specified only if the attribute 'exec-type' is 'exec_in_out'
    #NotNull
-->
<!ATTLIST j2ee-jca-call  output-name CDATA #IMPLIED>
<!--
    If you specify 'exec_in_out' to attribute 'exec-type', specify the type of
    output record.

    Refer to the documentation of particular JCA adapter to see what kind of records
    is returned by invoked function.

    #Warn: {{../j2ee-jca-call[not(@exec-type='exec_in_out')]}} L'attributo 'output-type' va specificato solo se l'attributo 'exec-type' vale 'exec_in_out'
-->
<!ATTLIST j2ee-jca-call  output-type (mapped | indexed) #IMPLIED>
<!--
    Defines how to deal with returns of type byte[].

    - base64
            The byte arrays are encoded in base64 strings.

    - string
            The byte arrays are interpreted as strings.
            In the case of string you can define the encoding
            to be used with the attribute 'byteArray-encoding'.
            If you do not specify the encoding will be used
            the platform default.

    - xml
            The byte arrays are interpreted as serialized XML.

-->
<!ATTLIST j2ee-jca-call byteArray-handling (base64 | string | xml) #IMPLIED>
<!--
        Defines the encoding to be used in case byteArray-handling
        is set to 'string'.

        #Warn: {{self::j2ee-jca-call[@byteArray-handling!='string']}} to be used only if byteArray-handling=string
-->
<!ATTLIST j2ee-jca-call   byteArray-encoding CDATA #IMPLIED>
<!--
    The XML used to describe JCA records provides a particular
    namespace (http://www.eaisoftware.it/jca/xml).

    The default prefix used for namespace is 'jca'.

    Warning: Changing this value will force a change
    of xpath used in sub-elements 'xml-data' and 'param-gvdata'.
-->
<!ATTLIST j2ee-jca-call namespace-prefix CDATA #IMPLIED>
<!--
    The element 'jca-connection-spec' is used to specify the properties
    for the object javax.resource.cci.ConnectionSpec.

    The ConnectionSpec object must be a JavaBeans.

    The ConnectionSpec object properties are used to provide initial parameters
    to JCA connector in order to establish a connection with the EIS.

    Refer to the documentation of particular JCA adapter for a list
    of properties supported by ConnectionSpec.

    #SelectOnInsert
    #Label: @class
    #Table: | Properties | spec-property | Property | @name | Value | @value | Description | Description

    #Template:

        <xsl:template match="jca-connection-spec">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellspacing="0" cellpadding="0">
                <xsl:for-each select="spec-property">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@name"/></b></td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@value"/></b></td>
                        <td width="15"><b/></td>
                        <td><xsl:value-of select="Description"/><b/></td>
                    </tr>
                </xsl:for-each>
                <xsl:text> </xsl:text>
            </table>
        </xsl:template>
-->
<!ELEMENT jca-connection-spec (Description?, spec-constructor?, spec-property*)>
<!--
    Class that implements the ConnectionSpec.

    Consult the documentation of particular JCA adapter for
    the value of this parameter.

    #NotNull
-->
<!ATTLIST jca-connection-spec class CDATA #REQUIRED>
<!--
    The element 'jca-interaction-spec' is used to specify the properties
    for the object javax.resource.cci.InteractionSpec.

    The InteractionSpec object must be a JavaBeans.

    The InteractionSpec object properties are used to provide the necessary
    parameters for JCA connector to complete the interaction with the EIS.

    Refer to the documentation of particular JCA adapter for a list
    of properties supported by InteractionSpec.

    #Table: | Properties | spec-property | Property | @name | Value | @value | Description | Description
    #Label: @class
    #SelectOnInsert

    #Template:

        <xsl:template match="jca-interaction-spec">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellspacing="0" cellpadding="0">
                <xsl:if test="@function-name">
                    <tr valign="top">
                        <td><b>function-name</b></td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@function-name"/></b></td>
                    </tr>
                </xsl:if>
                <xsl:if test="@interaction-verb">
                    <tr valign="top">
                        <td><b>interaction-verb</b></td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@interaction-verb"/></b></td>
                    </tr>
                </xsl:if>
                <xsl:if test="@execution-timeout">
                    <tr valign="top">
                        <td><b>execution-timeout</b></td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@execution-timeout"/></b></td>
                    </tr>
                </xsl:if>
                <xsl:for-each select="spec-property">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@name"/></b></td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@value"/></b></td>
                        <td width="15"><b/></td>
                        <td><xsl:value-of select="Description"/><b/></td>
                    </tr>
                </xsl:for-each>
                <xsl:text> </xsl:text>
            </table>
        </xsl:template>
-->
<!ELEMENT jca-interaction-spec (Description?, spec-constructor?, spec-property*)>
<!--
    Class that implements the InteractionSpec.

    Consult the documentation of particular JCA adapter for
    the value of this parameter.

    #NotNull
-->
<!ATTLIST jca-interaction-spec  class CDATA #REQUIRED>
<!--
    MAny EIS provides different functions.
    This property allows you to specify the function to invoke.

    JCA specifications require implementation of this standard
    property only if applicable to the particular EIS.

    Refer to the documentation of the particular EIS for a list
    of available functions.

    #NotNull
-->
<!ATTLIST jca-interaction-spec function-name CDATA #IMPLIED>
<!--
    The functions exposed by an EIS can be invoked in a standard way:

    - SYNC_SEND_RECEIVE
        Send data to the EIS, with synchronous waiting for a reply.

    - SYNC_SEND
        Send data to the EIS, without reply.

    - SYNC_RECEIVE
        Request of data to the EIS.

    JCA specifications require implementation of this standard
    property only if applicable to the particular EIS.

    Refer to the documentation of the particular EIS to check
    the verb for the various supported functions.
-->
<!ATTLIST jca-interaction-spec interaction-verb (SYNC_SEND_RECEIVE | SYNC_SEND | SYNC_RECEIVE) #IMPLIED>
<!--
    Timeout in milliseconds for a given interaction.

    Not all EIS support this parameter.

    JCA specifications require implementation of this standard
    property only if applicable to the particular EIS.

    #Pattern: @ \d+ @ specify a timeout in milliseconds
-->
<!ATTLIST jca-interaction-spec execution-timeout CDATA #IMPLIED>
<!--
    Allows you to build InteractionSpec or ConnectionSpec objects using
    constructors with a list of parameters.

    This element identifies constructors that accept only simple types
    as parameters.

    Refer to the documentation of the particular EIS to see which objects
    constructors are supported.

    #SelectOnInsert
    #Template:

        <xsl:template match="spec-constructor">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellspacing="0" cellpadding="0">
                <xsl:for-each select="parameter">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@type"/></b></td>
                        <td width="15"><b/></td>
                        <td><b><xsl:value-of select="@value"/></b></td>
                        <td width="15"><b/></td>
                        <td><xsl:value-of select="Description"/><b/></td>
                    </tr>
                </xsl:for-each>
            </table>
        </xsl:template>

-->
<!ELEMENT spec-constructor (Description?, parameter*)>
<!--
    Specify a constructor parameter.

    #SelectOnInsert

    #Template:

        <xsl:template match="parameter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellspacing="0" cellpadding="0">
                <tr valign="top">
                    <td>Type</td>
                    <td width="15"><b/></td>
                    <td><b><xsl:value-of select="@type"/></b></td>
                </tr>
                <tr valign="top">
                    <td>Value</td>
                    <td width="15"><b/></td>
                    <td><b><xsl:value-of select="@value"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT parameter (Description?)>
<!--
    Parameter type.
    Only supports simple types.
-->
<!ATTLIST parameter type (byte | boolean | char | double | float | int | long | short | String) #REQUIRED>
<!--
    Parameter value.

    #Pattern: {{../parameter[@type='byte']}}   @ -?\d+ @ set an integer
    #Pattern: {{../parameter[@type='int']}}    @ -?\d+ @ set an integer
    #Pattern: {{../parameter[@type='long']}}   @ -?\d+ @ set an integer
    #Pattern: {{../parameter[@type='short']}}  @ -?\d+ @ set an integer
    #Pattern: {{../parameter[@type='double']}} @ -?\d+(\.\d+)? @ set a number
    #Pattern: {{../parameter[@type='float']}}  @ -?\d+(\.\d+)? @ set a number
    #Pattern: {{../parameter[@type='char']}}   @ . @ set a char
    #Choice: {{../parameter[@type='boolean']}} true | false
-->
<!ATTLIST parameter   value CDATA #REQUIRED>
<!--
    According to the JCA specification, the Record may contain only
    simple data types or other records.

    However, it is frequently that some return strings contain XML data.

    This element allows you to specify the xpath for string data to be
    transformed into XML.

    #SelectOnInsert
    #Table: | XPaths | string-to-xml | XPath | @xpath | Description | Description

    #Template:

        <xsl:template match="xml-data">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellspacing="0" cellpadding="0">
                <xsl:for-each select="string-to-xml">
                    <tr valign="top">
                        <td><b><xsl:value-of select="@xpath"/><xsl:text> </xsl:text></b></td>
                        <td width="15"><xsl:text> </xsl:text></td>
                        <td><xsl:value-of select="Description"/><xsl:text> </xsl:text></td>
                    </tr>
                </xsl:for-each>
                <xsl:text> </xsl:text>
            </table>
        </xsl:template>
-->
<!ELEMENT xml-data (Description?, string-to-xml*)>
<!--
    Specifies that a particular string returned by EIS must be
    interpreted as XML.

    #SelectOnInsert
-->
<!ELEMENT string-to-xml (Description?)>
<!--
    XPath to identify the data to be interpreted as XML.

    #NotNull
-->
<!ATTLIST string-to-xml xpath CDATA #REQUIRED>
<!--
    The operation extract-data-call allows you to extract data from the
    message body and write them into GVBuffer property.

    The data can be extracted from XML messages and ASCII messages.
    To extract data from XML message using XPath expressions, and to
    extract data from-ASCII messages using regular expressions.

    You can also define a portion of the buffer to be interpreted
    as XML or ASCII.

    #Label: @name
    #Icon: GVextractData.png
    #Category: Utils
    #SelectOnInsert
    #Table: ! Extracted data ! extract-data ! Field ! @field ! Expression ! @expression ! Matching group ! @matching-group ! Description ! Description
    #Template:

        <xsl:template match="extract-data-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT extract-data-call (Description?, extract-data*, ServiceAlias?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST extract-data-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST extract-data-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.internal.ExtractMessageData">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST extract-data-call  name CDATA #REQUIRED>
<!--
    Indicates if the message is ASCII or XML.
-->
<!ATTLIST extract-data-call message-type (XML | ASCII) #REQUIRED>
<!--
    Encoding for the interpretation of ASCII messages.

    #NotNull
    #Warn: {{self::extract-data-call[@message-type!='ASCII']}} 'encoding' must be set only for ASCII message
-->
<!ATTLIST extract-data-call encoding CDATA #IMPLIED>
<!--
    Initial index in data buffer.
    If not specified index starts at byte 0.

    #Pattern: ! [0-9]+ ! set an integer
-->
<!ATTLIST extract-data-call  begin-index CDATA #IMPLIED>
<!--
    Length of data.
    If not specified reaches the end of the buffer data.

    #Pattern: ! [1-9][0-9]* ! set an integer
-->
<!ATTLIST extract-data-call  length CDATA #IMPLIED>
<!--
    #SelectOnInsert
    #Icon: default.png
-->
<!ELEMENT extract-data (Description?)>
<!--
    Name of property that will contain the data extracted.

    #NotNull
    #Unique: parent::extract-data-call/extract-data/@field
-->
<!ATTLIST extract-data field CDATA #REQUIRED>
<!--
    XPath or regular expression used to extract the data to be included in the property.

    The expression is interpreted according to the type of message (ASCII or XML).

    #NotNull
-->
<!ATTLIST extract-data expression CDATA #REQUIRED>
<!--
    Matching group to be extracted.
    Valid only if the type of message is ASCII.

    #Pattern: ! [0-9]+ ! set a integer value
    #Warn: {{parent::extract-data-call[@message-type!='ASCII']/extract-data}} matching-group is valid only if the type of message is ASCII
-->
<!ATTLIST extract-data matching-group CDATA #IMPLIED>


<!--
    Plugin for sending an email.

    #Label: @name
    #Icon: GVSmtpCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Table: | JNDI Context | JNDIHelper | Factory initial | @initial-context-factory | Provider URL | @provider-url | Security Principal | @security-principal | Security Credentials | @security-credentials | Description | Description
    #Table: | Mail Message | mail-message | Sender | @sender-display-name | Subject | @subject | Content type | @content-type | Description | Description
    #Template:

        <xsl:template match="smtp-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT smtp-call (Description?, JNDIHelper?, mail-properties?, mail-message)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST smtp-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST smtp-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.smtp.SMTPCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST smtp-call  name CDATA #REQUIRED>
<!--
    JNDI name of the mail Session configured in teh application server.

    #NotNull
-->
<!ATTLIST smtp-call  jndi-name CDATA #IMPLIED>
<!--
    Corresponds to the property mail.protocol.host
    and overwrites the value of property mail.host
    specified in the configuration of the mail Session.

    #NotNull
-->
<!ATTLIST smtp-call    override-protocol-host CDATA #IMPLIED>
<!--
    Corresponds to the property mail.protocol.user
    and overwrites the value of property mail.user
    specified in the configuration of the mail Session.

    #NotNull
-->
<!ATTLIST smtp-call  override-protocol-user CDATA #IMPLIED>
<!--
    GVBuffer defines the properties that will contain
    the MessageID of the message sent.
    Default to 'MessageID'.
-->
<!ATTLIST smtp-call	message-id-property CDATA #IMPLIED>
<!--
    The SMTP protocol provider supports the following properties, which may
    be set in the JavaMail Session object.
    The properties are always set as strings; the Type column describes
    how the string is interpreted.
    For example, use

        props.put("mail.smtp.port", "888");

    to set the mail.smtp.port property, which is of type int.

    Note that if you're using the "smtps" protocol to access SMTP over SSL,
    all the properties would be named "mail.smtps.*".

    Name                                Type        Description
    **********************************************************************************************************************************
    mail.smtp.user                      String      Default user name for SMTP.
    mail.smtp.password                  String      GreenVulcano user password for SMTP.
    mail.smtp.host                      String      The SMTP server to connect to.
    mail.smtp.port                      int         The SMTP server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 25.
    mail.smtp.connectiontimeout         int         Socket connection timeout value in milliseconds. Default is infinite timeout.
    mail.smtp.timeout                   int         Socket I/O timeout value in milliseconds. Default is infinite timeout.
    mail.smtp.from                      String      Email address to use for SMTP MAIL command. This sets the envelope return address. Defaults to msg.getFrom() or InternetAddress.getLocalAddress(). NOTE: mail.smtp.user was previously used for this.
    mail.smtp.localhost                 String      Local host name used in the SMTP HELO or EHLO command. Defaults to InetAddress.getLocalHost().getHostName(). Should not normally need to be set if your JDK and your name service are configured properly.
    mail.smtp.localaddress              String      Local address (host name) to bind to when creating the SMTP socket. Defaults to the address picked by the Socket class. Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to.
    mail.smtp.localport                 int         Local port number to bind to when creating the SMTP socket. Defaults to the port number picked by the Socket class.
    mail.smtp.ehlo                      boolean     If false, do not attempt to sign on with the EHLO command. Defaults to true. Normally failure of the EHLO command will fallback to the HELO command; this property exists only for servers that don't fail EHLO properly or don't implement EHLO properly.
    mail.smtp.auth                      boolean     If true, attempt to authenticate the user using the AUTH command. Defaults to false.
    mail.smtp.auth.mechanisms           String      If set, lists the authentication mechanisms to consider, and the order in which to consider them. Only mechanisms supported by the server and supported by the current implementation will be used. The default is "LOGIN PLAIN DIGEST-MD5 NTLM", which includes all the authentication mechanisms supported by the current implementation.
    mail.smtp.auth.ntlm.domain          String      The NTLM authentication domain.
    mail.smtp.auth.ntlm.flags           int         NTLM protocol-specific flags. See http://curl.haxx.se/rfc/ntlm.html#theNtlmFlags for details.
    mail.smtp.submitter                 String      The submitter to use in the AUTH tag in the MAIL FROM command. Typically used by a mail relay to pass along information about the original submitter of the message. See also the setSubmitter method of SMTPMessage. Mail clients typically do not use this.
    mail.smtp.dsn.notify                String      The NOTIFY option to the RCPT command. Either NEVER, or some combination of SUCCESS, FAILURE, and DELAY (separated by commas).
    mail.smtp.dsn.ret                   String      The RET option to the MAIL command. Either FULL or HDRS.
    mail.smtp.allow8bitmime             boolean     If set to true, and the server supports the 8BITMIME extension, text parts of messages that use the "quoted-printable" or "base64" encodings are converted to use "8bit" encoding if they follow the RFC2045 rules for 8bit text.
    mail.smtp.sendpartial               boolean     If set to true, and a message has some valid and some invalid addresses, send the message anyway, reporting the partial failure with a SendFailedException. If set to false (the default), the message is not sent to any of the recipients if there is an invalid recipient address.
    mail.smtp.sasl.realm                String      The realm to use with DIGEST-MD5 authentication.
    mail.smtp.quitwait                  boolean     If set to false, the QUIT command is sent and the connection is immediately closed. If set to true (the default), causes the transport to wait for the response to the QUIT command.
    mail.smtp.reportsuccess             boolean     If set to true, causes the transport to include an SMTPAddressSucceededException for each address that is successful. Note also that this will cause a SendFailedException to be thrown from the sendMessage method of SMTPTransport even if all addresses were correct and the message was sent successfully.
    mail.smtp.socketFactory             SocketFactory  If set to a class that implements the javax.net.SocketFactory interface, this class will be used to create SMTP sockets. Note that this is an instance of a class, not a name, and must be set using the put method, not the setProperty method.
    mail.smtp.socketFactory.class       String      If set, specifies the name of a class that implements the javax.net.SocketFactory interface. This class will be used to create SMTP sockets.
    mail.smtp.socketFactory.fallback    boolean     If set to true, failure to create a socket using the specified socket factory class will cause the socket to be created using the java.net.Socket class. Defaults to true.
    mail.smtp.socketFactory.port        int         Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used.
    mail.smtp.ssl.enable                boolean     If set to true, use SSL to connect and use the SSL port by default. Defaults to false for the "smtp" protocol and true for the "smtps" protocol.
    mail.smtp.ssl.checkserveridentity   boolean     If set to true, check the server identity as specified by RFC 2595. These additional checks based on the content of the server's certificate are intended to prevent man-in-the-middle attacks. Defaults to false.
    mail.smtp.ssl.trust                 String      If set, and a socket factory hasn't been specified, enables use of a MailSSLSocketFactory. If set to "*", all hosts are trusted. If set to a whitespace separated list of hosts, those hosts are trusted. Otherwise, trust depends on the certificate the server presents.
    mail.smtp.ssl.socketFactory         SSLSocketFactory If set to a class that extends the javax.net.ssl.SSLSocketFactory class, this class will be used to create SMTP SSL sockets. Note that this is an instance of a class, not a name, and must be set using the put method, not the setProperty method.
    mail.smtp.ssl.socketFactory.class   String      If set, specifies the name of a class that extends the javax.net.ssl.SSLSocketFactory class. This class will be used to create SMTP SSL sockets.
    mail.smtp.ssl.socketFactory.port    int         Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used.
    mail.smtp.ssl.protocols             String      Specifies the SSL protocols that will be enabled for SSL connections. The property value is a whitespace separated list of tokens acceptable to the javax.net.ssl.SSLSocket.setEnabledProtocols method.
    mail.smtp.ssl.ciphersuites          String      Specifies the SSL cipher suites that will be enabled for SSL connections. The property value is a whitespace separated list of tokens acceptable to the javax.net.ssl.SSLSocket.setEnabledCipherSuites method.
    mail.smtp.mailextension             String      Extension string to append to the MAIL command. The extension string can be used to specify standard SMTP service extensions as well as vendor-specific extensions. Typically the application should use the SMTPTransport method supportsExtension to verify that the server supports the desired service extension. See RFC 1869 and other RFCs that define specific extensions.
    mail.smtp.starttls.enable           boolean     If true, enables the use of the STARTTLS command (if supported by the server) to switch the connection to a TLS-protected connection before issuing any login commands. Note that an appropriate trust store must configured so that the client will trust the server's certificate. Defaults to false.
    mail.smtp.starttls.required         boolean     If true, requires the use of the STARTTLS command. If the server doesn't support the STARTTLS command, or the command fails, the connect method will fail. Defaults to false.
    mail.smtp.userset                   boolean     If set to true, use the RSET command instead of the NOOP command in the isConnected method. In some cases sendmail will respond slowly after many NOOP commands; use of RSET avoids this sendmail issue. Defaults to false.
    mail.smtp.noop.strict               boolean     If set to true (the default), insist on a 250 response code from the NOOP command to indicate success. The NOOP command is used by the isConnected method to determine if the connection is still alive. Some older servers return the wrong response code on success, some servers don't implement the NOOP command at all and so always return a failure code. Set this property to false to handle servers that are broken in this way. Normally, when a server times out a connection, it will send a 421 response code, which the client will see as the response to the next command it issues. Some servers send the wrong failure response code when timing out a connection. Do not set this property to false when dealing with servers that are broken in this way.


    The SMTP protocol provider supports the following properties.
    Note that if you're using the "pop3s" protocol to access POP3 over SSL,
    all the properties would be named "mail.pop3s.*".

    Name                                Type        Description
    **********************************************************************************************************************************
    mail.pop3.user                      String      Default user name for POP3.
    mail.pop3.password                  String      GreenVulcano user password for POP3.
    mail.pop3.host                      String      The POP3 server to connect to.
    mail.pop3.port                      int         The POP3 server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 110.
    mail.pop3.connectiontimeout         int         Socket connection timeout value in milliseconds. Default is infinite timeout.
    mail.pop3.timeout                   int         Socket I/O timeout value in milliseconds. Default is infinite timeout.
    mail.pop3.rsetbeforequit            boolean     Send a POP3 RSET command when closing the folder, before sending the QUIT command. Useful with POP3 servers that implicitly mark all messages that are read as "deleted"; this will prevent such messages from being deleted and expunged unless the client requests so. Default is false.
    mail.pop3.message.class             String      Class name of a subclass of com.sun.mail.pop3.POP3Message. The subclass can be used to handle (for example) non-standard Content-Type headers. The subclass must have a public constructor of the form MyPOP3Message(Folder f, int msgno) throws MessagingException.
    mail.pop3.localaddress              String      Local address (host name) to bind to when creating the POP3 socket. Defaults to the address picked by the Socket class. Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to.
    mail.pop3.localport                 int         Local port number to bind to when creating the POP3 socket. Defaults to the port number picked by the Socket class.
    mail.pop3.apop.enable               boolean     If set to true, use APOP instead of USER/PASS to login to the POP3 server, if the POP3 server supports APOP. APOP sends a digest of the password rather than the clear text password. Defaults to false.
    mail.pop3.socketFactory             SocketFactory   If set to a class that implements the javax.net.SocketFactory interface, this class will be used to create POP3 sockets. Note that this is an instance of a class, not a name, and must be set using the put method, not the setProperty method.
    mail.pop3.socketFactory.class       String      If set, specifies the name of a class that implements the javax.net.SocketFactory interface. This class will be used to create POP3 sockets.
    mail.pop3.socketFactory.fallback    boolean     If set to true, failure to create a socket using the specified socket factory class will cause the socket to be created using the java.net.Socket class. Defaults to true.
    mail.pop3.socketFactory.port        int         Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used.
    mail.pop3.ssl.enable                boolean     If set to true, use SSL to connect and use the SSL port by default. Defaults to false for the "pop3" protocol and true for the "pop3s" protocol.
    mail.pop3.ssl.checkserveridentity   boolean     If set to true, check the server identity as specified by RFC 2595. These additional checks based on the content of the server's certificate are intended to prevent man-in-the-middle attacks. Defaults to false.
    mail.pop3.ssl.trust                 String      If set, and a socket factory hasn't been specified, enables use of a MailSSLSocketFactory. If set to "*", all hosts are trusted. If set to a whitespace separated list of hosts, those hosts are trusted. Otherwise, trust depends on the certificate the server presents.
    mail.pop3.ssl.socketFactory         SSLSocketFactory    If set to a class that extends the javax.net.ssl.SSLSocketFactory class, this class will be used to create POP3 SSL sockets. Note that this is an instance of a class, not a name, and must be set using the put method, not the setProperty method.
    mail.pop3.ssl.socketFactory.class   String      If set, specifies the name of a class that extends the javax.net.ssl.SSLSocketFactory class. This class will be used to create POP3 SSL sockets.
    mail.pop3.ssl.socketFactory.port    int         Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used.
    mail.pop3.ssl.protocols             String      Specifies the SSL protocols that will be enabled for SSL connections. The property value is a whitespace separated list of tokens acceptable to the javax.net.ssl.SSLSocket.setEnabledProtocols method.
    mail.pop3.ssl.ciphersuites          String      Specifies the SSL cipher suites that will be enabled for SSL connections. The property value is a whitespace separated list of tokens acceptable to the javax.net.ssl.SSLSocket.setEnabledCipherSuites method.
    mail.pop3.starttls.enable           boolean     If true, enables the use of the STLS command (if supported by the server) to switch the connection to a TLS-protected connection before issuing any login commands. Note that an appropriate trust store must configured so that the client will trust the server's certificate. Defaults to false.
    mail.pop3.starttls.required         boolean     If true, requires the use of the STLS command. If the server doesn't support the STLS command, or the command fails, the connect method will fail. Defaults to false.
    mail.pop3.socks.host                String      Specifies the host name of a SOCKS5 proxy server that will be used for connections to the mail server. (Note that this only works on JDK 1.5 or newer.)
    mail.pop3.socks.port                String      Specifies the port number for the SOCKS5 proxy server. This should only need to be used if the proxy server is not using the standard port number of 1080.
    mail.pop3.disabletop                boolean     If set to true, the POP3 TOP command will not be used to fetch message headers. This is useful for POP3 servers that don't properly implement the TOP command, or that provide incorrect information in the TOP command results. Defaults to false.
    mail.pop3.disablecapa               boolean     If set to true, the POP3 CAPA command will not be used to fetch server capabilities. This is useful for POP3 servers that don't properly implement the CAPA command, or that provide incorrect information in the CAPA command results. Defaults to false.
    mail.pop3.forgettopheaders          boolean     If set to true, the headers that might have been retrieved using the POP3 TOP command will be forgotten and replaced by headers retrieved as part of the POP3 RETR command. Some servers, such as some versions of Microsft Exchange and IBM Lotus Notes, will return slightly different headers each time the TOP or RETR command is used. To allow the POP3 provider to properly parse the message content returned from the RETR command, the headers also returned by the RETR command must be used. Setting this property to true will cause these headers to be used, even if they differ from the headers returned previously as a result of using the TOP command. Defaults to false.
    mail.pop3.filecache.enable          boolean     If set to true, the POP3 provider will cache message data in a temporary file rather than in memory. Messages are only added to the cache when accessing the message content. Message headers are always cached in memory (on demand). The file cache is removed when the folder is closed or the JVM terminates. Defaults to false.
    mail.pop3.filecache.dir             String      If the file cache is enabled, this property can be used to override the default directory used by the JDK for temporary files.
    mail.pop3.cachewriteto              boolean     Controls the behavior of the writeTo method on a POP3 message object. If set to true, and the message content hasn't yet been cached, and ignoreList is null, the message is cached before being written. Otherwise, the message is streamed directly to the output stream without being cached. Defaults to false.
    mail.pop3.keepmessagecontent        boolean     The content of a message is cached when it is first fetched. Normally this cache uses a SoftReference to refer to the cached content. This allows the cached content to be purged if memory is low, in which case the content will be fetched again if it's needed. If this property is set to true, a hard reference to the cached content will be kept, preventing the memory from being reused until the folder is closed or the cached content is explicitly invalidated (using the invalidate method). (This was the behavior in previous versions of JavaMail.) Defaults to false.
-->
<!ELEMENT mail-properties (mail-property+)>
<!--
    Name value pair that contains the properties to set.
-->
<!ELEMENT mail-property EMPTY>
<!--
    Property name.

    #NotNull
    #Unique: ../mail-property/@name
-->
<!ATTLIST mail-property   name CDATA #REQUIRED>
<!--
    Property value.
    Can contains placeholder to be resolved at runtime.

    #NotNull
-->
<!ATTLIST mail-property    value CDATA #REQUIRED>
<!--
    Defines the properties of the message.

    #SelectOnInsert
    #Icon: default.png

    #Template:
    <xsl:template match="mail-message">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
        <table cellspacing="0" cellpadding="0">
            <tr valign="top">
                <td>Display Name:</td>
                <td width="15"><b/></td>
                <td><b><xsl:value-of select="@sender-display-name"/></b></td>
            </tr>
            <tr valign="top">
                <td>Subject:</td>
                <td width="15"><b/></td>
                <td><b><xsl:value-of select="@subject"/></b></td>
            </tr>
            <tr valign="top">
                <td>Content type:</td>
                <td width="15"><b/></td>
                <td><b><xsl:value-of select="@content-type"/></b></td>
            </tr>
        </table>
    </xsl:template>
-->
<!ELEMENT mail-message (destinations?, message-body?, attachments?, Description?)>
<!--
    Il display name del sender.

    #NotNull
-->
<!ATTLIST mail-message sender-display-name CDATA #REQUIRED>
<!--
    The subject of the email.
    Can contains placeholder to be resolved at runtime.

    DEPRECATED!!! [
    You can enter gvBuffer values using the following syntax:
        - for standard fields, the field name
            - ${system}
            - ${service}
            - ${id}
            - ${retCode}
        - for properties:
            - ${property['PROP_NAME']}
    ]


    #NotNull
-->
<!ATTLIST mail-message subject CDATA #REQUIRED>
<!--
    Email content-type.
-->
<!ATTLIST mail-message content-type (text-plain | text-html) #REQUIRED>
<!--
    The priority of the mail.
-->
<!ATTLIST mail-message  high-priority (true | false) #IMPLIED>
<!--
    It contains the list of mail recipients.

    #SelectOnInsert
    #Icon: default.png
    #Warn: {{self::destinations[not(to) and not(cc) and not(bcc)]}} Insert at least one recipient.

    #Template:
    <xsl:template match="destinations">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
        <xsl:if test="to">
                <p/>
                <b>To:</b><br/>
                <ul><xsl:for-each select="to/mail-address">
                                <li><xsl:value-of select="@address"/></li>
                        </xsl:for-each>
                </ul>
        </xsl:if>
         <xsl:if test="cc">
                <p/>
                <b>Cc:</b><br/>
                <ul>
                        <xsl:for-each select="cc/mail-address">
                                <li><xsl:value-of select="@address"/></li>
                        </xsl:for-each>
                </ul>
        </xsl:if>
         <xsl:if test="bcc">
                <p/>
                <b>Bcc:</b><br/>
                <ul>
                        <xsl:for-each select="bcc/mail-address">
                                <li><xsl:value-of select="@address"/></li>
                        </xsl:for-each>
                </ul>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT destinations (to?, cc?, bcc?, Description?)>
<!--
    Contains the list of recipients of the email.

    Is overwritten by the value of the GVBuffer property GV_SMTP_TO.

    #SelectOnInsert
    #Icon: default.png
    #Table: | Address | mail-address | to | @address | Description | Description

    #Template:
    <xsl:template match="to">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
        <ul>
                <xsl:for-each select="mail-address">
                        <li><xsl:value-of select="@address"/></li>
                </xsl:for-each>
        </ul>
    </xsl:template>
-->
<!ELEMENT to (mail-address+, Description?)>
<!--
    Contains the list of recipients in knowledge of the mail.

    Is overwritten by the value of the GVBuffer property GV_SMTP_CC.

    #SelectOnInsert
    #Table: | Address | mail-address | cc | @address | Description | Description

    #Template:
    <xsl:template match="cc">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
        <ul>
                <xsl:for-each select="mail-address">
                        <li><xsl:value-of select="@address"/></li>
                </xsl:for-each>
        </ul>
    </xsl:template>
-->
<!ELEMENT cc (mail-address+, Description?)>
<!--
    Contains the list of recipients in hidden knowledge of the mail.

    Is overwritten by the value of the GVBuffer property GV_SMTP_BCC.

    #SelectOnInsert
    #Table: | Address | mail-address | bcc | @address | Description | Description

    #Template:
    <xsl:template match="bcc">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
        <ul>
                <xsl:for-each select="mail-address">
                        <li><xsl:value-of select="@address"/></li>
                </xsl:for-each>
        </ul>
    </xsl:template>
-->
<!ELEMENT bcc (mail-address+, Description?)>
<!--
    Contains the email address of a recipient.

    #SelectOnInsert

    #Icon: default.png
    #Template:
    <xsl:template match="mail-address">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT mail-address (Description?)>
<!--
    The email address.

    #Unique: ../*/@address
    __Pattern: | [a-zA-z0-9._\-]*@[a-zA-z0-9._\-]*\.[a-zA-z]* | Set a valid email address.
    #NotNull
-->
<!ATTLIST mail-address  address CDATA #REQUIRED>
<!--
    Defines the list of attachments of the email.
    Is overwritten by the value of the GVBuffer property GV_SMTP_ATTACHMENTS.

    #Table: | GVBuffer Attachment | gvBuffer | Name | @name | Description | Description
    #Table: | File Attachments | file-attachment | Path | @path | Description | Description

    #SelectOnInsert

    #Template:
    <xsl:template match="attachments">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small>
        </xsl:if>
        <xsl:if test="gvBuffer or count(file-attachment) > 0">
                <p/>
                <b>Attachments:</b><br/>
                <ul>
                        <xsl:if test="gvBuffer">
                                <li>data buffer</li>
                        </xsl:if>
                        <xsl:for-each select="file-attachment">
                                <li><xsl:value-of select="@path"/></li>
                        </xsl:for-each>
                </ul>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT attachments (file-attachment*, gvBuffer?, Description?)>
<!--
    Defines the file to attach to the email.

    #SelectOnInsert

    #Template:
    <xsl:template match="file-attachment">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT file-attachment (Description?)>
<!--
    Defines the path of the file to attach.
    Can contains placeholder to be resolved at runtime.

    #NotNull
-->
<!ATTLIST file-attachment path CDATA #REQUIRED>
<!--
    Used to attach at the email the GVBuffer contents.

    #SelectOnInsert

    #Template:
    <xsl:template match="gvBuffer">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT gvBuffer (Description?)>
<!--
    Defines a name of the attachment containing the GVBuffer contents.
    Can contains placeholder to be resolved at runtime.

    #NotNull
-->
<!ATTLIST gvBuffer  name CDATA #REQUIRED>
<!--
    Defines the message body of the email.

    #SelectOnInsert
    #Icon: default.png
    #Template:
    <xsl:template match="message-body">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT message-body (message-text?, Description?)>
<!--
    The message of the email.
    Can contains placeholder to be resolved at runtime.

    DEPRECATED!! [
    You can enter gvBuffer values using the following syntax:
        - for standard fields, the field name
            - ${system}
            - ${service}
            - ${id}
            - ${retCode}
        - for properties:
            - ${property['PROP_NAME']}
    ]

     The attribute 'escape-HTML-in-gvBuffer-fields' allows you to specify whether,
     when replacing the placeholders for the fields of GVBuffer, any invalid
     characters for XML/HTML should be replaced with the corresponding entity.
     Default to 'true'.

     #SelectOnInsert
     #Icon: default.png
     #NotNull
-->
<!ELEMENT message-text (#PCDATA)>
<!--
     Allows you to specify whether, when replacing the placeholders for the
     fields of GVBuffer, any invalid characters for XML/HTML should be
     replaced with the corresponding entity.
     Default to 'true'.
-->
<!ATTLIST message-text  escape-HTML-in-gvBuffer-fields (false | true) #IMPLIED>
<!--
    If true, the GVBuffer dump will be included in the message body.
    Default: false.
-->
<!ATTLIST message-body  gvBuffer-dump (false | true) #IMPLIED>
<!--
    Plugin for receiving emails.

    #Label: @name
    #Icon: GVPopCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Table: | JNDI Context | JNDIHelper | Factory initial | @initial-context-factory | Provider URL | @provider-url | Security Principal | @security-principal | Security Credentials | @security-credentials | Description | Description
    #Template:

        <xsl:template match="pop-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT pop-call (Description?, JNDIHelper?, mail-properties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST pop-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST pop-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.pop.POPCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST pop-call name CDATA #REQUIRED>
<!--
    JNDI name of the mail Session configured in the application server.

    #NotNull
-->
<!ATTLIST pop-call jndi-name CDATA #IMPLIED>
<!--
    Corresponds to the property mail.protocol.host
    and overwrites the value of property mail.host
    specified in the configuration of the mail Session.

    #NotNull
-->
<!ATTLIST pop-call override-protocol-host CDATA #IMPLIED>
<!--
    Corresponds to the property mail.protocol.user
    and overwrites the value of property mail.user
    specified in the configuration of the mail Session.

    #NotNull
-->
<!ATTLIST pop-call override-protocol-user CDATA #IMPLIED>
<!--
    Mark a processed message as DELETED.
    Default false.
-->
<!ATTLIST pop-call delete-messages (true|false) #IMPLIED>
<!--
    Expunge (permanently remove) messages marked DELETED.
    Default false.
-->
<!ATTLIST pop-call expunge (true|false) #IMPLIED>
<!--
    RegExp pattern for email address cleaning.
    Default "[A-z][A-z0-9_]*([.][A-z0-9_]+)*[@][A-z0-9_]+([.][A-z0-9_]+)*[.][A-z]{2,4}".
    #NotNull
-->
<!ATTLIST pop-call email-rx-cleaner CDATA #IMPLIED>
<!--
    Also export a message in EML format.
    Default false.

    #NotNull
-->
<!ATTLIST pop-call export-EML (true|false) #IMPLIED>

<!--
    Plugin for removing emails UID from UID cache, useful for email reprocess.
    The emails UID to remove must be provided as a comma separated list in MESSAGE_ID
    GVBuffer property.

    #Label: @name
    #Icon: GVPopCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Table: | JNDI Context | JNDIHelper | Factory initial | @initial-context-factory | Provider URL | @provider-url | Security Principal | @security-principal | Security Credentials | @security-credentials | Description | Description
    #Template:

        <xsl:template match="pop-uid-remove-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT pop-uid-remove-call (Description?, JNDIHelper?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST pop-uid-remove-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST pop-uid-remove-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.pop.uidcache.UIDCacheRemoveOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST pop-uid-remove-call name CDATA #REQUIRED>
<!--
    JNDI name of the mail Session configured in the application server.

    #NotNull
-->
<!ATTLIST pop-uid-remove-call jndi-name CDATA #REQUIRED>

<!--
    Plugin for receiving emails via IMAP protocol.

    #Label: @name
    #Icon: GVPopCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Table: | JNDI Context | JNDIHelper | Factory initial | @initial-context-factory | Provider URL | @provider-url | Security Principal | @security-principal | Security Credentials | @security-credentials | Description | Description
    #Template:

        <xsl:template match="imap-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT imap-call (Description?, JNDIHelper?, mail-properties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST imap-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST imap-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.imap.IMAPCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST imap-call name CDATA #REQUIRED>
<!--
    JNDI name of the mail Session configured in the application server.

    #NotNull
-->
<!ATTLIST imap-call jndi-name CDATA #IMPLIED>
<!--
    Corresponds to the property mail.protocol.host
    and overwrites the value of property mail.host
    specified in the configuration of the mail Session.

    #NotNull
-->
<!ATTLIST imap-call override-protocol-host CDATA #IMPLIED>
<!--
    Corresponds to the property mail.protocol.user
    and overwrites the value of property mail.user
    specified in the configuration of the mail Session.

    #NotNull
-->
<!ATTLIST imap-call override-protocol-user CDATA #IMPLIED>
<!--
    Mark a processed message as DELETED.
    Default false.
-->
<!ATTLIST imap-call delete-messages (true|false) #IMPLIED>
<!--
    Expunge (permanently remove) messages marked DELETED.
    Default false.
-->
<!ATTLIST imap-call expunge (true|false) #IMPLIED>
<!--
    RegExp pattern for email address cleaning.
    Default "[A-z][A-z0-9_]*([.][A-z0-9_]+)*[@][A-z0-9_]+([.][A-z0-9_]+)*[.][A-z]{2,4}".
    #NotNull
-->
<!ATTLIST imap-call email-rx-cleaner CDATA #IMPLIED>
<!--
    Also export a message in EML format.
    Default false.

    #NotNull
-->
<!ATTLIST imap-call export-EML (true|false) #IMPLIED>
<!--
    Maximum number of emails to be read.
    Default 10.

    #NotNull
-->
<!ATTLIST imap-call max-rows CDATA #IMPLIED>
<!--
    Mail sorting criteria.
    Default ARRIVAL.

    #NotNull
-->
<!ATTLIST imap-call sort-field (ARRIVAL|CC|DATE|FROM|SIZE|SUBJECT|TO) #IMPLIED>
<!--
    Mail sorting ascending direction.
    Default false.

    #NotNull
-->
<!ATTLIST imap-call sort-ascending (true|false) #IMPLIED>

<!--
    Plugin for managing emails through IMAP protocol.
    The message on wich operate is identified by its InternetMessageId contained
    into the MESSAGE_ID property of the input GVBuffer.
    The property MANAGED_MESSAGE_COUNT in the output GVBuffer contains the number:
       0 : no message processed
       1 : message <MESSAGE_ID> processed

    #Label: @name
    #Icon: GVPopCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Template:

        <xsl:template match="imap-manage-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT imap-manage-call (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST imap-manage-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST imap-manage-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.imap.ManageEmailCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST imap-manage-call name CDATA #REQUIRED>
<!--
    JNDI name of the mail Session configured in the application server.

    #NotNull
-->
<!ATTLIST imap-manage-call jndi-name CDATA #IMPLIED>
<!--
    Folder from wich read email.
    Default to INBOX.

    #NotNull
-->
<!ATTLIST imap-manage-call folderFrom CDATA #IMPLIED>
<!--
    Folder on wich copy/move email.

    #NotNull
-->
<!ATTLIST imap-manage-call folderTo CDATA #IMPLIED>
<!--
    Action to execute on message.

    #NotNull
-->
<!ATTLIST imap-manage-call action (copy|move|delete|set-read|set-unread) #REQUIRED>

<!--
    Plugin for sending an email from MS Exchange through WS interface..

    #Label: @name
    #Icon: GVSmtpCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Template:

        <xsl:template match="exchange-send-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT exchange-send-call (Description?, mail-properties?, mail-message)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST exchange-send-call  type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST exchange-send-call  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.msexchange.SendCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST exchange-send-call   name CDATA #REQUIRED>
<!--
    User name for authentication.

    #NotNull
-->
<!ATTLIST exchange-send-call   userName CDATA #REQUIRED>
<!--
    Password for authentication.

    #NotNull
-->
<!ATTLIST exchange-send-call   password CDATA #REQUIRED>
<!--
    User domain.

    #NotNull
-->
<!ATTLIST exchange-send-call   domain CDATA #IMPLIED>
<!--
    MS Exchange WS url.

    #NotNull
-->
<!ATTLIST exchange-send-call   exchangeURL CDATA #REQUIRED>
<!--
    Save a copy of the sent message in "Sent Items" folder.
    Default true.

    #NotNull
-->
<!ATTLIST exchange-send-call   save-copy (true|false) #IMPLIED>
<!--
    GVBuffer defines the properties that will contain
    the MessageID of the message sent.
    Default to 'messageID'.
-->
<!ATTLIST exchange-send-call   message-id-property CDATA #IMPLIED>

<!--
    Plugin for receiving emails from MS Exchange through WS interface.

    #Label: @name
    #Icon: GVPopCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Template:

        <xsl:template match="exchange-receive-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT exchange-receive-call (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST exchange-receive-call   type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST exchange-receive-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.msexchange.ReceiveCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST exchange-receive-call  name CDATA #REQUIRED>
<!--
    User name for authentication.

    #NotNull
-->
<!ATTLIST exchange-receive-call   userName CDATA #REQUIRED>
<!--
    Password for authentication.

    #NotNull
-->
<!ATTLIST exchange-receive-call   password CDATA #REQUIRED>
<!--
    User domain.

    #NotNull
-->
<!ATTLIST exchange-receive-call   domain CDATA #IMPLIED>
<!--
    MS Exchange WS url.

    #NotNull
-->
<!ATTLIST exchange-receive-call   exchangeURL CDATA #REQUIRED>
<!--
    Folder from wich read emails.
    Default to Inbox.

    #NotNull
-->
<!ATTLIST exchange-receive-call   folderName CDATA #IMPLIED>
<!--
    Mark a processed message as DELETED.
    Default false.

    #NotNull
-->
<!ATTLIST exchange-receive-call   delete-messages (true|false) #IMPLIED>
<!--
    RegExp pattern for email address cleaning.
    Default "[A-z][A-z0-9_]*([.][A-z0-9_]+)*[@][A-z0-9_]+([.][A-z0-9_]+)*[.][A-z]{2,4}".

    #NotNull
-->
<!ATTLIST exchange-receive-call   email-rx-cleaner CDATA #IMPLIED>
<!--
    Also export a message in EML format.
    Default false.

    #NotNull
-->
<!ATTLIST exchange-receive-call   export-EML (true|false) #IMPLIED>

<!--
    Plugin for managing emails on MS Exchange through WS interface.
    The message on wich operate is identified by its InternetMessageId contained
    into the MESSAGE_ID property of the input GVBuffer.
    The property MANAGED_MESSAGE_COUNT in the output GVBuffer contains the number:
       0 : no message processed
       1 : message <MESSAGE_ID> processed

    #Label: @name
    #Icon: GVPopCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Template:

        <xsl:template match="exchange-manage-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT exchange-manage-call (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST exchange-manage-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST exchange-manage-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.msexchange.ManageEmailCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST exchange-manage-call name CDATA #REQUIRED>
<!--
    User name for authentication.

    #NotNull
-->
<!ATTLIST exchange-manage-call userName CDATA #REQUIRED>
<!--
    Password for authentication.

    #NotNull
-->
<!ATTLIST exchange-manage-call password CDATA #REQUIRED>
<!--
    User domain.

    #NotNull
-->
<!ATTLIST exchange-manage-call domain CDATA #IMPLIED>
<!--
    MS Exchange WS url.

    #NotNull
-->
<!ATTLIST exchange-manage-call exchangeURL CDATA #REQUIRED>
<!--
    Folder from wich read email.
    Default to Inbox.

    #NotNull
-->
<!ATTLIST exchange-manage-call folderFrom CDATA #IMPLIED>
<!--
    Folder on wich copy/move email.

    #NotNull
-->
<!ATTLIST exchange-manage-call folderTo CDATA #IMPLIED>
<!--
    Action to execute on message.

    #NotNull
-->
<!ATTLIST exchange-manage-call action (copy|move|delete|set-read|set-unread) #REQUIRED>

<!--
    Plugin for running a R(emote)SH(ell) command.

    #Label: @name
    #Icon: GVRSHCall.png
    #Category: File
    #Table: | Environment properties | env-property | Name | @name | Value | @value | Description | Description

    #SelectOnInsert
    #Template:
        <xsl:template match="rsh-call">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT rsh-call (Description?, %ShellCommands;)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rsh-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rsh-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.rsh.RemoteShellCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST rsh-call name CDATA #REQUIRED>
<!--
    RSH client name.

    #NotNull
    #References: gvesb:document('GVAdapters')/GVAdapters/RSHServiceClientConfiguration/*[@type='rshClient']/@name
-->
<!ATTLIST rsh-call rsh-client-name CDATA #REQUIRED>
<!--
    Pathname of the directory in which the command is executed.

    This pathname can be static or may contain placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    If this attribute is not present, the command is executed
    within the current (depends on local/remote RSH client used) working directory.

    #NotNull
-->
<!ATTLIST rsh-call directory CDATA #IMPLIED>
<!--
    The encoding with which encode the output of the command in the
    body of GVBuffer.
    If not specified, is used the the 'file.encoding' system property value.

    #NotNull
-->
<!ATTLIST rsh-call encoding CDATA #IMPLIED>
<!--
    If true the command execution output is logged at DEBUG level.
    Default is false.
-->
<!ATTLIST rsh-call dump-output (true|false) #IMPLIED>

<!--
    This plug-in reads a file's content, through RSH local/remote service, and saves it in
    output GVBuffer 'object' field.
    Complete file path is the 'filePathName' attribute value.
    The attribute can contain placeholders, that are expanded at plugin call time.
    Attribute 'filePathName' is subject to these constraints:
        - is overridden by 'GVFR_FILE_NAME' property, if present in current GVBuffer.
          If property is not defined in GVBuffer, the 'filePathName' attribute in the
          configuration is used. An exception is thrown if neither the property nor
          the attribute in configuration are set.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: @name
    #Icon: GVRSHFileReader.png
    #Category: File
    #SelectOnInsert
    #Template:

    <xsl:template match="rsh-filereader-call">
        <xsl:if test="Description">
            <small><br/><xsl:value-of select="Description"/></small>
        </xsl:if>
        <table cellpadding="0" cellspacing="0">
            <tr valign="top">
                <td><small>Name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@name"/></small></b></td>
            </tr>
            <tr valign="top">
                <td><small>Source file name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@filePathName"/></small></b></td>
            </tr>
        </table>
    </xsl:template>
-->
<!ELEMENT rsh-filereader-call (Description?, xml-processor?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rsh-filereader-call type CDATA #FIXED "call">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rsh-filereader-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.rsh.RemoteFileReaderCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST rsh-filereader-call name CDATA #REQUIRED>
<!--
    RSH client name.

    #References: gvesb:document('GVAdapters')/GVAdapters/RSHServiceClientConfiguration/*[@type='rshClient']/@name
-->
<!ATTLIST rsh-filereader-call rsh-client-name CDATA #REQUIRED>
<!--
    This value can be static or dynamic, containing placeholders that could be replaced at plugin
    call time. This is a default value, and is used if the property 'GVFR_FILE_NAME' is not defined
    in the current GVBuffer.

    #NotNull
-->
<!ATTLIST rsh-filereader-call filePathName CDATA #REQUIRED>

<!--
    This plug-in writes the content in the GVBuffer 'object' field into the a file,
    overwriting the target file if already present, through RSH local/remote service.
    Complete file path is the 'filePathName' attribute value.
    The attribute can contain placeholders, that are expanded at plugin call time.
    Attribute 'filePathName' is subject to these constraints:
        - is overridden by 'GVFR_FILE_NAME' property, if present in current GVBuffer.
          If property is not defined in GVBuffer, the 'filePathName' attribute in the
          configuration is used. An exception is thrown if neither the property nor
          the attribute in configuration are set.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: @name
    #Icon: GVRSHFileWriter.png
    #Category: File
    #SelectOnInsert
    #Template:

    <xsl:template match="rsh-filewriter-call">
        <xsl:if test="Description">
            <small><br/><xsl:value-of select="Description"/></small>
        </xsl:if>
        <table cellpadding="0" cellspacing="0">
            <tr valign="top">
                <td><small>Name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@name"/></small></b></td>
            </tr>
            <tr valign="top">
                <td><small>Destination file name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@filePathName"/></small></b></td>
            </tr>
        </table>
    </xsl:template>
-->
<!ELEMENT rsh-filewriter-call (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rsh-filewriter-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST rsh-filewriter-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.rsh.RemoteFileWriterCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST rsh-filewriter-call name CDATA #REQUIRED>
<!--
    RSH client name.

    #References: gvesb:document('GVAdapters')/GVAdapters/RSHServiceClientConfiguration/*[@type='rshClient']/@name
-->
<!ATTLIST rsh-filewriter-call rsh-client-name CDATA #REQUIRED>
<!--
    This value can be static or dynamic, containing placeholders that could be replaced at plugin
    call time. This is a default value, and is used if the property 'GVFW_FILE_NAME' is not defined
    in the current GVBuffer.

    #NotNull
-->
<!ATTLIST rsh-filewriter-call filePathName CDATA #REQUIRED>

<!--
    This plug-in reads the local filesystem file's content, and saves it in output
    GVBuffer 'object' field.
    Complete file path is the concatenation of 'srcPath' attribute, with the 'fileName'
    attribute.
    Both of them can contain placeholders, that are expanded at plugin call time.
    Attributes 'srcPath' and 'fileName' are subject to these constraints:
        - attribute 'srcPath' is overridden by 'GVFR_DIRECTORY' property, if present in
          current GVBuffer. If property is not defined in GVBuffer, the 'srcPath'
          attribute in the configuration is used.
          In both cases, the value of this attribute can be a placeholder, resolved at
          plugin call time, and the result of the expansion, must result in an absolute
          pathname, otherwise an exception is thrown. An exception is also thrown if
          neither the property nor the attribute in configuration are set.
        - attribute 'fileName' is overridden by 'GVFR_FILE_NAME' property, if present in
          current GVBuffer. If property is not defined in GVBuffer, the 'fileName'
          attribute in the configuration is used.
          In both cases, the value of this attribute can be a placeholder, resolved at
          plugin call time, and the result of the expansion, combined with the previous
          attribute, must result in an existent resource in the local filesystem,
          otherwise an exception is thrown. An exception is also thrown if
          neither the property nor the attribute in configuration are set.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}  : execute a select sql statement sql and return the value of
                                 the first field of the first selected record.
                                 The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}}
                                   : execute a select sql statement sql and return the value of
                                     the first field of all selected records as a 'sep' separated list.
                                     The 'conn' parameter is the JNDI name of a DataSource
                                     The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}} : executes a select sql statement and returns all values of
                                     returned cursor as an XML.
                                     The 'conn' parameter is the JNDI name of a DataSource

    #Label: @name
    #Icon: GVFileReader.png
    #Category: File
    #SelectOnInsert
    #Template:

    <xsl:template match="filereader-call">
        <xsl:if test="Description">
            <small><br/><xsl:value-of select="Description"/></small>
        </xsl:if>
        <table cellpadding="0" cellspacing="0">
            <tr valign="top">
                <td><small>Name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@name"/></small></b></td>
            </tr>
            <tr valign="top">
                <td><small>Source directory:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@srcPath"/></small></b></td>
            </tr>
            <tr valign="top">
                <td><small>File name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@fileName"/></small></b></td>
            </tr>
        </table>
    </xsl:template>
-->
<!ELEMENT filereader-call (Description?, xml-processor?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST filereader-call type CDATA #FIXED "call">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST filereader-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.reader.FileReader">

<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST filereader-call name CDATA #REQUIRED>

<!--
    This value can be static or dynamic, containing placeholders that could be replaced at plugin
    call time. This is a default value, and is used if the property 'GVFR_DIRECTORY' is not defined
    in the current GVBuffer.

    #NotNull
-->
<!ATTLIST filereader-call srcPath CDATA #REQUIRED>
<!--
    This value can be static or dynamic, containing placeholders that could be replaced at plugin
    call time. This is a default value, and is used if the property 'GVFR_FILE_NAME' is not defined
    in the current GVBuffer.

    #NotNull
-->
<!ATTLIST filereader-call fileName CDATA #REQUIRED>
<!--
    If this element is specified, the plugin will read the file directly parsed as an XML.
-->
<!ELEMENT xml-processor (Description?)>
<!--
    If true the file is parsed as an XML.
    Default is false.
-->
<!ATTLIST xml-processor as-xml (true|false) #IMPLIED>
<!--
    If true uses AXIOM instead of DOM to parse the file.
    Default is false.
-->
<!ATTLIST xml-processor use-axiom (true|false) #IMPLIED>
<!--
    If true the XML representing the file is validated.
    This option applies only if 'as-xml' is true.
    Default is false.
-->
<!ATTLIST xml-processor validating (true|false) #IMPLIED>
<!--
    If true the DOM keeps informations about the declared namespaces on the file.
    This option applies only if 'as-xml' is true.
    Default is false.
-->
<!ATTLIST xml-processor namespace-aware (true|false) #IMPLIED>

<!--
    This plug-in writes the content in the GVBuffer 'object' field into the local
    filesystem file, overwriting the target file if already present and not specified
    to append.
    Complete file path is the concatenation of 'targetPath' attribute, with the 'fileName'
    attribute.
    Both of them can contain placeholders, that are expanded at plugin call time.
    Attributes 'targetPath' and 'fileName' are subject to these constraints:
        - attribute 'targetPath' is overridden by 'GVFW_DIRECTORY' property, if present in
          current GVBuffer. If property is not defined in GVBuffer, the 'targetPath'
          attribute in the configuration is used.
          In both cases, the value of this attribute can be a placeholder, resolved at
          plugin call time, and the result of the expansion, must result in an absolute
          pathname, otherwise an exception is thrown. An exception is also thrown if
          neither the property nor the attribute in configuration are set.
        - attribute 'fileName' is overridden by 'GVFW_FILE_NAME' property, if present in
          current GVBuffer. If property is not defined in GVBuffer, the 'fileName'
          attribute in the configuration is used.
          In both cases, the value of this attribute can be a placeholder, resolved at
          plugin call time, and the result of the expansion, combined with the previous
          attribute, must result in an existent resource in the local filesystem,
          otherwise an exception is thrown. An exception is also thrown if
          neither the property nor the attribute in configuration are set.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: @name
    #Icon: GVFileWriter.png
    #Category: File
    #SelectOnInsert
    #Template:

    <xsl:template match="filewriter-call">
        <xsl:if test="Description">
            <small><br/><xsl:value-of select="Description"/></small>
        </xsl:if>
        <table cellpadding="0" cellspacing="0">
            <tr valign="top">
                <td><small>Name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@name"/></small></b></td>
            </tr>
            <tr valign="top">
                <td><small>Destination directory:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@targetPath"/></small></b></td>
            </tr>
            <tr valign="top">
                <td><small>File name:</small></td>
                <td width="20"></td>
                <td><b><small><xsl:value-of select="@fileName"/></small></b></td>
            </tr>
        </table>
    </xsl:template>
-->
<!ELEMENT filewriter-call (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST filewriter-call type CDATA #FIXED "call">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST filewriter-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.file.writer.FileWriter">

<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST filewriter-call name CDATA #REQUIRED>

<!--
    This value can be static or dynamic, containing placeholders that could be replaced at plugin
    call time. This is a default value, and is used if the property 'GVFW_DIRECTORY' is not defined
    in the current GVBuffer.

    #NotNull
-->
<!ATTLIST filewriter-call targetPath CDATA #REQUIRED>
<!--
    This value can be static or dynamic, containing placeholders that could be replaced at plugin
    call time. This is a default value, and is used if the property 'GVFW_FILE_NAME' is not defined
    in the current GVBuffer.

    #NotNull
-->
<!ATTLIST filewriter-call fileName CDATA #REQUIRED>
<!--
    If true the data are appended at the end of an existing file.
    Default false.
-->
<!ATTLIST filewriter-call append (true|false) #IMPLIED>
<!--
    If append is true then the attribute defines the EOL chars to append at the end of the input data.
    Default to nothing.

    native : OS native EOL
    LF     : line feed
    CR-LF  : carriage return and line feed
    CR     : carriage return
-->
<!ATTLIST filewriter-call appendEOL (native|LF|CR-LF|CR) #IMPLIED>


<!--
    The SubjectBuilder definition for the Weblogic 8 application server
-->
<!ELEMENT WLSSubjectBuilder (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST WLSSubjectBuilder type CDATA #FIXED "subject-builder">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST WLSSubjectBuilder  class CDATA #FIXED "it.greenvulcano.gvesb.jaas.WLSSubjectBuilder">
<!--
    URL for the application server connection.
    See the application server documentation for the format of this parameter.

    #NotNull
-->
<!ATTLIST WLSSubjectBuilder provider-url CDATA #REQUIRED>
<!--
    User name to connect the application server.

    #NotNull
-->
<!ATTLIST WLSSubjectBuilder security-principal CDATA #REQUIRED>
<!--
    Password to connect the application server.

    #NotNull
    #Encrypted
-->
<!ATTLIST WLSSubjectBuilder  security-credentials CDATA #REQUIRED>

<!--
    This element retrieve a JDBC connection.
-->
<!ELEMENT JdbcConnection (Description?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JdbcConnection	type CDATA #FIXED "db-connection">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JdbcConnection	class CDATA #FIXED "it.greenvulcano.gvesb.j2ee.db.connections.JdbcDataBaseConnection">

<!--
    This attribute defines the name of the connection to be used,
    must be one of the connections configured on the file GVAdapters.xml

    #NotNull
-->
<!ATTLIST JdbcConnection	connectionName CDATA #REQUIRED>

<!--
    This element retrieve a DataSource connection.

    #Icon: default.png
    #Template:
        <xsl:template match="DataSourceConnection">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="top">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@class"/></td>
                </tr>
                <tr valign="top">
                    <td><b>JndiName:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@jndi-name"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT DataSourceConnection (Description?, JNDIHelper?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DataSourceConnection  type CDATA #FIXED "db-connection">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DataSourceConnection  class CDATA #FIXED "it.greenvulcano.gvesb.j2ee.db.connections.DataSourceConnection">

<!--
    This attribute defines the DataSource JNDI name.

    #NotNull
-->
<!ATTLIST DataSourceConnection  jndi-name CDATA #REQUIRED>

<!--
    This element configures an interaction with a database.

    #Table: ! Connection ! *[@type='db-connection'] ! Class  ! @class ! JndiName ! @jndiName ! Name ! @connectionName ! KeyConnection ! @keyConnection ! Description ! Description
    #Table: ! Statement! Statement ! Statement Type  ! @statementType ! Resolver ! */*[@type='resolver']/@class ! Description ! Description
    #Table: ! ResultSet ! ResultSet ! Type ! @rsType ! Concurrency ! @rsConcurrency ! Holdability ! @rsHoldability ! Formatter Class ! *[@type='formatter']/@class ! Description ! Description
    #Icon: default.png
-->
<!ELEMENT DBOperations (Description?, (%connections;), Statement, ResultSet)>

<!--
    #Icon: default.png

    #Template:
        <xsl:template match="ResultSet">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="Type">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@rsType"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Concurrency:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@rsConcurrency"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Holdability:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@rsHoldability"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT ResultSet (Description?, %Formatter;)>

<!--
    This attribute defines the type of result set:

    - TYPE_FORWARD_ONLY       : indicating the type for a ResultSet object whose
                                cursor may move only forward
    - TYPE_SCROLL_INSENSITIVE : indicating the type for a ResultSet object that
                                is scrollable but generally not sensitive to changes
                                to the data that underlies the ResultSet
    - TYPE_SCROLL_SENSITIVE   : indicating the type for a ResultSet object that is
                                scrollable and generally sensitive to changes to the
                                data that underlies the ResultSet

    Default :  TYPE_FORWARD_ONLY

    #Warn: {{../ResultSet[(@rsType) and not(@rsConcurrency)]}} If you set the parameter 'rsType' must be also set the parameter 'rsConcurrency'
    #Choice: TYPE_FORWARD_ONLY | TYPE_SCROLL_INSENSITIVE | TYPE_SCROLL_SENSITIVE

-->
<!ATTLIST ResultSet rsType CDATA #IMPLIED >

<!--
    This attribute defines the access to the result set:

    - CONCUR_READ_ONLY : indicating the concurrency mode for a ResultSet object
                         that may NOT be updated.
    - CONCUR_UPDATABLE : indicating the concurrency mode for a ResultSet object
                         that may be updated.

    Default :   CONCUR_READ_ONLY

    #Warn: {{../ResultSet[(@rsConcurrency) and not(@rsType)]}} If you set the parameter 'rsConcurrency' must be also set the parameter 'rsType'
    #Choice: CONCUR_READ_ONLY | CONCUR_UPDATABLE
-->
<!ATTLIST ResultSet rsConcurrency CDATA #IMPLIED>

<!--
    This attribute defines the opening and closing of cursors:

    - HOLD_CURSORS_OVER_COMMIT : indicating that open ResultSet objects with this
                                 holdability will remain open when the current
                                 transaction is commited
    - CLOSE_CURSORS_AT_COMMIT : indicating that open ResultSet objects with this
                                holdability will be closed when the current
                                transaction is commited

    Default :   HOLD_CURSORS_OVER_COMMIT

    #Warn: {{../ResultSet[(@rsHoldability) and (not(@rsConcurrency) or not(@rsType))]}} If you set the parameter 'rsHoldability' must be also set the parameters 'rsType' and 'rsConcurrency'
    #Choice: HOLD_CURSORS_OVER_COMMIT | CLOSE_CURSORS_AT_COMMIT
-->
<!ATTLIST ResultSet rsHoldability CDATA #IMPLIED>

<!--
    #Warn: {{../Statement[(@statementType='PreparedStatement') and (../CallSPFormatter)]}} PreparedStatement cannot be associated to CallSPFormatter.
    #Warn: {{../Statement[(@statementType='PreparedStatement') and (../CallSPSimpleBaseFormatter)]}} PreparedStatement cannot be associated to CallSPSimpleBaseFormatter.

    #Icon: default.png

    #Template:
        <xsl:template match="Statement">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="top">
                    <td><b>Type:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@statementType"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT Statement (StatementValue, ParamResolvers?)>

<!--
    This element represents the type of statement to use.
    We recommend using a CallableStatement to process stored procedures.
-->
<!ATTLIST Statement statementType ( CallableStatement | PreparedStatement ) #REQUIRED >

<!--
    #Icon: default.png
    #Template:
        <xsl:template match="StatementValue">
            <table>
                <tr valign="top">
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="."/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT StatementValue (#PCDATA)>

<!--
    This element contains the list of Resolver used to resolve
    the parameters included in the statement.
    Resolvers are applied in sequence, the order of definition,
    and can be of different types.

    #Icon: default.png
-->
<!ELEMENT ParamResolvers (ParamResolver+)>

<!--
    This element represents the type of a resolver to use to solve the
    parameters included in the statement.

    #Icon: default.png
-->
<!ELEMENT ParamResolver (Description? , %Resolver;)>

<!--
    Defines the type of Resolver based on XPath.

    #Table: | Parameters | Param | Position | @position | Type | @type | Format  | @format | XPath | @XPath | Description | Description

    #Icon: default.png
    #Template:
        <xsl:template match="XPathParamResolver">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:for-each select="Param">
                <table>
                    <tr valign="top">
                        <xsl:if test="@position">
                            <td><b>Position:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@position"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@type">
                            <td><b>Type:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@type"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@XPath">
                            <td><b>Format:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@XPath"/></td>
                        </xsl:if>
                    </tr>
                </table>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT XPathParamResolver (Description?, Param+)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XPathParamResolver type  CDATA #FIXED "resolver">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST XPathParamResolver class CDATA #FIXED "it.greenvulcano.gvesb.j2ee.db.resolver.XPathResolver">

<!--
    This element defines the parameter to be solved according to
    an XPath expression applied to the body of GVBuffer.

    #Icon: default.png
-->
<!ELEMENT Param (Description?)>

<!--
    This attribute defines the XPath applied to the body of GVBuffer.

    #NotNull
-->
<!ATTLIST Param XPath   CDATA        #REQUIRED >

<!--
    This attribute defines the position parameter has in the statement.

    #NotNull
    #Unique: ../Param/@position
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST Param position CDATA        #REQUIRED >

<!--
    This attribute defines the type of the parameter.

-->
<!ATTLIST Param type     %DataTypes; #REQUIRED >

<!--
    This attribute lets you configure the date format in the event
    that has been defined type = 'date'.

    #NotNull
    #Warn: {{../Param[@format and not(@type='date')]}} If the attribute format is set then type must be 'date'
-->
<!ATTLIST Param format    CDATA        #IMPLIED >

<!--
    This element defines the Resolver based GVBuffer fields.

    #Table: | Parameters | GVBufferParam | Position | @position | Type | @type | Format  | @format | GVBufferMethod | @GVBufferMethod | Property Name | @propertyName | Description | Description
    #Template:
        <xsl:template match="GVBufferParamResolver">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:for-each select="GVBufferParam">
                <table>
                    <tr valign="top">
                        <xsl:if test="@position">
                            <td><b>Position:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@position"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@type">
                            <td><b>Type:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@type"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@format">
                            <td><b>Format:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@format"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@GVBufferMethod">
                            <td><b>GVBufferMethod:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@GVBufferMethod"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@propertyName">
                            <td><b>PropertyName:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@propertyName"/></td>
                        </xsl:if>
                    </tr>
                </table>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT GVBufferParamResolver (Description?, GVBufferParam+)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVBufferParamResolver type  CDATA #FIXED "resolver" >

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVBufferParamResolver class CDATA #FIXED "it.greenvulcano.gvesb.j2ee.db.resolver.GVBufferResolver" >

<!--
    This element represents the field of GVBuffer which is inserted in the statement.

    #Template:
        <xsl:template match="GVBufferParam">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVBufferParam (Description?)>

<!--
    This attribute defines the type of the parameter.

-->
<!ATTLIST GVBufferParam type            %DataTypes;  #REQUIRED >

<!--
   This attribute defines the position parameter has in the statement.

   #Unique: ../GVBufferParam/@position
   #NotNull
   #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST GVBufferParam position        CDATA         #REQUIRED >

<!--
    This attribute lets you configure the date format in the event
    that has been defined type = 'date'.

    #NotNull
    #Warn: {{../GVBufferParam[@format and not(@type='date')]}} If the attribute format is set then type must be 'date'
-->
<!ATTLIST GVBufferParam format      CDATA        #IMPLIED>

<!--
    The attribute defines the GVBuffer method that solves the parameter.

    #Warn: {{../GVBufferParam[not(@propertyName) and @GVBufferMethod='getProperty']}} If the method is getProperty the attribute 'propertyName' must be set
-->
<!ATTLIST GVBufferParam GVBufferMethod    %GVBufferGetMethods;     #REQUIRED >

<!--
    This attribute defines the name of the property if the method is getProperty().

    #NotNull
    #Warn: {{../GVBufferParam[@propertyName and not(@GVBufferMethod='getProperty')]}} If the attribute propertyName is set the method should be 'getProperty'
-->
<!ATTLIST GVBufferParam propertyName CDATA         #IMPLIED >

<!--
    This element is the Formatter to be used if the statement is a simple SQL query.

    #Icon: default.png

    #Template:
        <xsl:template match="Simpleformatter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="top">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@class"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Success:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@success"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Failure:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@failure"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT Simpleformatter (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Simpleformatter type    CDATA        #FIXED "formatter" >

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST Simpleformatter class   CDATA        #FIXED "it.greenvulcano.gvesb.j2ee.db.formatter.SimpleFormatter" >

<!--
    This attribute defines the return value from SQL query
    execution if successfully completed.

    #NotNull
    #Pattern: ! 0|-?[1-9][0-9]* ! set a integer value
-->
<!ATTLIST Simpleformatter success CDATA        #REQUIRED >

<!--
    The attribute defines the return value from SQL query
    if the execution ended with error.

    #NotNull
    #Pattern: ! 0|-?[1-9][0-9]* ! set a integer value
-->
<!ATTLIST Simpleformatter failure CDATA        #REQUIRED >
<!--
    This element represents the Formatter to use if statements required
    is an update, an insert or delete.

    #Template:
        <xsl:template match="DMLWriteFormatter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="top">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@class"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Success:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@success"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT DMLWriteFormatter (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DMLWriteFormatter type    CDATA #FIXED "formatter" >

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DMLWriteFormatter class   CDATA #FIXED "it.greenvulcano.gvesb.j2ee.db.formatter.DMLWriteFormatter" >

<!--
    This attribute defines the return value from SQL query
    execution if successfully completed.

    #NotNull
    #Pattern: ! 0|-?[1-9][0-9]* ! set a integer value
-->
<!ATTLIST DMLWriteFormatter	success CDATA #REQUIRED >
<!--
    This element is the Formatter for calling a store procedure.

    #Template:
        <xsl:template match="CallSPFormatter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="top">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@class"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Success:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@success"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT CallSPFormatter (Description?, SPOutputParams?,GVBufferMapping? )>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CallSPFormatter type    CDATA #FIXED "formatter">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CallSPFormatter class   CDATA #FIXED "it.greenvulcano.gvesb.j2ee.db.formatter.CallSPFormatter">

<!--
    The attribute defines the return value from SQL query
    if the execution ended with success.

    #NotNull
    #Pattern: ! 0|-?[1-9][0-9]* ! set a integer value
-->
<!ATTLIST CallSPFormatter success CDATA #IMPLIED>

<!--
    This element defines the set of output parameters from the store procedure.

    #SelectOnInsert
    #Table: | Output Parameters | SPOutputParam | Position | @position | Type | @type | Description | Description
    #Template:
        <xsl:template match="SPOutputParams">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:for-each select="SPOutputParam">
                <table>
                    <tr valign="top">
                        <xsl:if test="@position">
                            <td><b>Position:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@position"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@type">
                            <td><b>Type:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@type"/></td>
                        </xsl:if>
                    </tr>
                </table>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT SPOutputParams (Description?, SPOutputParam+)>

<!--
    This element defines an output parameter of the store procedure.

    #Template:
        <xsl:template match="SPOutputParam">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT SPOutputParam (Description?)>

<!--
    This attribute identifies the type of the output parameter

    #Warn: {{../SPOutputParam[(@type='Date') and not(@format)]}} If type is set to 'date' format attribute must be defined
-->
<!ATTLIST SPOutputParam	type     %DataTypes;  #REQUIRED >
<!--
    This attribute defines the position parameter has in the statement.

    #Unique: ../SPOutputParam/@position
    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST SPOutputParam position CDATA        #REQUIRED >

<!--
    Specify how to map GVBuffer fields with output parameters by store procedure.

    #SelectOnInsert
    #Table: | GVBuffer Fields | GVBufferFieldOutput | Name | @name | Setter Method | @setterMethod | Property | @property | Type | @type | Description | Description
    #Template:
        <xsl:template match="GVBufferMapping">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <xsl:for-each select="GVBufferFieldOutput">
                <table>
                    <tr valign="top">
                        <xsl:if test="@name">
                            <td><b>Name:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@name"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@setterMethod">
                            <td><b>Setter Method:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@setterMethod"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@property">
                            <td><b>Property:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@property"/></td>
                        </xsl:if>
                    </tr>
                    <tr valign="top">
                        <xsl:if test="@type">
                            <td><b>Type:</b></td>
                            <td width="15"><b></b></td>
                            <td><xsl:value-of select="@type"/></td>
                        </xsl:if>
                    </tr>
                </table>
            </xsl:for-each>
        </xsl:template>
-->
<!ELEMENT GVBufferMapping (Description?, GVBufferFieldOutput+)>

<!--
    Defines the GVBuffer field be mapped with the output parameters
    from the store procedure.

    #Template:
        <xsl:template match="GVBufferFieldOutput">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT GVBufferFieldOutput  (Description?, %CallSPBaseFormatter;) >

<!--
    This attribute defines the name of the field to map.

    #NotNull
-->
<!ATTLIST GVBufferFieldOutput name          CDATA                  #IMPLIED>

<!--
    This attribute defines the method that populates the GVBuffer field
    with the output parameter from store procedure.

    #Warn: {{../GVBufferFieldOutput[not(@property) and @setterMethod='setProperty']}} If the method is setProperty attribute 'property' must be set
-->
<!ATTLIST GVBufferFieldOutput setterMethod  %GVBufferSetMethods;     #REQUIRED>

<!--
    This attribute defines the value of the GVBuffer property
    if the method is setProperty().

    #NotNull
    #Warn: {{../GVBufferFieldOutput[@property and not(@setterMethod='setProperty')]}} If the property attribute is set, the method should be 'setProperty'
-->
<!ATTLIST GVBufferFieldOutput property CDATA                  #IMPLIED>

<!--
    This attribute defines the Java type of the GVBuffer field.
-->
<!ATTLIST GVBufferFieldOutput type          %JavaType;             #REQUIRED>
<!--
    This formatter reads the value of the output parameter
    from a call to store procedures.

    #Template:
        <xsl:template match="CallSPSimpleBaseFormatter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
            <xsl:if test="@stylesheet">
                <tr valign="top">
                    <td><b>Stylesheet:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@stylesheet"/></td>
                </tr>
            </xsl:if>
            <xsl:if test="@structure">
                <tr valign="top">
                    <td><b>Structure:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@structure"/></td>
                </tr>
            </xsl:if>
                <tr valign="top">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@class"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Output Param Index:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@outputParamIndex"/></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT CallSPSimpleBaseFormatter (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CallSPSimpleBaseFormatter type  CDATA  #FIXED "base_formatter" >
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CallSPSimpleBaseFormatter class CDATA  #FIXED "it.greenvulcano.gvesb.j2ee.db.formatter.base.CallSPSimpleBaseFormatter" >
<!--
    Transformation to be applied to the output of the store procedure.
-->
<!ATTLIST CallSPSimpleBaseFormatter stylesheet  CDATA        #IMPLIED >

<!--
    This element defines the structure of the XML document that wraps the query result.

    - ONLY_DATA         Inserts the XML document only the output of the query.

    - METADATA_AND_DATA Inserts the XML document the query output,
                        plus some information about DB objects (table, fields)
-->
<!ATTLIST CallSPSimpleBaseFormatter structure ( ONLY_DATA | METADATA_AND_DATA ) "METADATA_AND_DATA" >

<!--
    This attribute defines the position parameter has in the statement.

    #Unique: ../CallSPSimpleBaseFormatter/@outputParamIndex
    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST CallSPSimpleBaseFormatter outputParamIndex    CDATA  #REQUIRED >
<!--
    This element represents the formatter of an SQL query.

    #Icon: default.png

    #Template:
        <xsl:template match="QueryFormatter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table>
                <tr valign="top">
                    <td><b>Class:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@class"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Success:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@success"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Failure:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@failure"/></td>
                </tr>
                <tr valign="top">
                    <td><b>Base Formatter:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:apply-templates select="*[@type='base_formatter']"/></td>
                </tr>
            </table>
        </xsl:template>

-->
<!ELEMENT QueryFormatter (Description?, %QueryBaseFormatter;)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST QueryFormatter type    CDATA        #FIXED "formatter" >
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST QueryFormatter class   CDATA        #FIXED "it.greenvulcano.gvesb.j2ee.db.formatter.QueryFormatter" >
<!--
    This attribute defines the return value from SQL query
    execution if successfully completed.

    #NotNull
    #Pattern: ! 0|-?[1-9][0-9]* ! set a integer value
-->
<!ATTLIST QueryFormatter success CDATA        #REQUIRED >
<!--
    The attribute defines the return value from SQL query
    if the execution ended with error.

    #NotNull
    #Pattern: ! 0|-?[1-9][0-9]* ! set a integer value
-->
<!ATTLIST QueryFormatter failure CDATA        #REQUIRED >

<!--
    This element defines the formatter of an SQL query based on XML.

    #Icon: default.png

    #Template:
    <xsl:template match="QueryXMLBaseFormatter">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
        <table>
            <tr valign="top">
                <td><b>Class:</b></td>
                <td width="15"><b></b></td>
                <td><xsl:value-of select="@class"/></td>
            </tr>
            <xsl:if test="@encoding">
                <tr valign="top">
                    <td><b>Encoding:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@encoding"/></td>
                </tr>
            </xsl:if>
            <xsl:if test="@stylesheet">
                <tr valign="top">
                    <td><b>Stylesheet:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@stylesheet"/></td>
                </tr>
            </xsl:if>
            <xsl:if test="@structure">
                <tr valign="top">
                    <td><b>Structure:</b></td>
                    <td width="15"><b></b></td>
                    <td><xsl:value-of select="@structure"/></td>
                </tr>
            </xsl:if>
        </table>
    </xsl:template>

-->
<!ELEMENT QueryXMLBaseFormatter (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST QueryXMLBaseFormatter type        CDATA        #FIXED "base_formatter" >

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST QueryXMLBaseFormatter class       CDATA        #FIXED "it.greenvulcano.gvesb.j2ee.db.formatter.base.QueryXMLBaseFormatter" >

<!--
    This element defines the encoding to use for the XML
    document that wraps the query result.
-->
<!ATTLIST QueryXMLBaseFormatter encoding %encodings; #IMPLIED >

<!--
    This element defines the stylesheet to use for the XML
    document that wraps the query result.

    #NotNull
-->
<!ATTLIST QueryXMLBaseFormatter stylesheet  CDATA        #IMPLIED >

<!--
    This element defines the structure of the XML document that
    wraps the query result.

    - ONLY_DATA         Inserts the XML document only the output of the query.

    - METADATA_AND_DATA Inserts the XML document the query output,
                        plus some information about DB objects (table, fields)
-->
<!ATTLIST QueryXMLBaseFormatter structure ( ONLY_DATA | METADATA_AND_DATA ) "METADATA_AND_DATA" >


<!--
    Command to run.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: .
    #SelectOnInsert
    #NotNull
-->
<!ELEMENT cmd (#PCDATA)>
<!--
    List of parameters that make up the command to run.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Label: .
    #SelectOnInsert
    #NotNull
-->
<!ELEMENT cmd-array-elem (#PCDATA)>
<!--
   Defines the property for the environment, in the form of name-value pairs,
   to set before running the command.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{conn::statement}}      : execute a select sql statement sql and return the value of
                                     the first field of the first selected record.
                                     The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}}
                                   : execute a select sql statement sql and return the value of
                                     the first field of all selected records as a 'sep' separated list.
                                     The 'conn' parameter is the JNDI name of a DataSource
                                     The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}} : executes a select sql statement and returns all values of
                                     returned cursor as an XML.
                                     The 'conn' parameter is the JNDI name of a DataSource

   #SelectOnInsert
   #Template:

       <xsl:template match="env-property">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT env-property (Description?)>
<!--
   Environment property name.

   #Unique: ../env-property/@name
   #NotNull
-->
<!ATTLIST env-property name CDATA #REQUIRED>
<!--
   Environment property value.
   Can contains placeholders.

   #NotNull
-->
<!ATTLIST env-property value CDATA #REQUIRED>


<!--
    If the target directory is on a remote file system
    accessible via FTP, this element encapsulates
    the parameters required to connect.

    The parameters hostname, username, password can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope',
                                 the GVBuffer is added to the scope as 'object'
     - ognl{{script}}          : evaluate a OGNL script,
                                 the GVBuffer is added to the scope as 'object' (and is also the object on which execute the script !! NO MORE FROM 3.5 !!),
     - sql{{[conn::]statement}}     : execute a select sql statement sql and return the value of
                                      the first field of the first selected record.
                                      The 'conn' parameter is the JNDI name of a DataSource,
                                      if not defined is used the current connection
     - sqllist{{[conn::]statement}} : execute a select sql statement sql and return the value of
                                      the first field of all selected records as a comma separated list.
                                      The 'conn' parameter is the JNDI name of a DataSource,
                                      if not defined is used the current connection
     - sqltable{{conn::statement}}  : executes a select sql statement and returns all values of
                                      returned cursor as an XML.
                                      The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
    #Template:
        <xsl:template match="FTPManager">
        	<table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="200">FTP Host Type :</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@host-type"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">FTP Hostname :</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@hostname"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">FTP Username:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@username"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">FTP Password:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@password"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">Connect timeout:</td>
                    <td width="20"></td>
                    <xsl:choose>
                        <xsl:when test="@connectTimeout">
                            <td><b><xsl:value-of select="@connectTimeout"/></b></td>
                        </xsl:when>
                        <xsl:otherwise>
                            <td><b>infinite</b></td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
                <tr valign="top">
                    <td width="200">Data transfer timeout:</td>
                    <td width="20"></td>
                    <xsl:choose>
                        <xsl:when test="@dataTimeout">
                            <td><b><xsl:value-of select="@dataTimeout"/></b></td>
                        </xsl:when>
                        <xsl:otherwise>
                            <td><b>infinite</b></td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT FTPManager (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FTPManager type CDATA #FIXED "remote-manager">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FTPManager class CDATA #FIXED "it.greenvulcano.util.remotefs.ftp.FTPManager">
<!--
    The host type. Information used by the FTP client for
    the proper parsing of the responses of the server.
-->
<!ATTLIST FTPManager hostType (UNIX|NT|OS2|OS400|VMS|MVS) #REQUIRED>
<!--
    Server host  name.

    #NotNull
-->
<!ATTLIST FTPManager hostname CDATA #REQUIRED>
<!--
    Server FTP port.

    #NotNull
-->
<!ATTLIST FTPManager port CDATA "21">
<!--
    User name.

    #NotNull
-->
<!ATTLIST FTPManager username CDATA #REQUIRED>
<!--
    User password.

    #NotNull
    #Encrypted
-->
<!ATTLIST FTPManager password CDATA #REQUIRED>
<!--
    Connect timeout (in milliseconds).
    Default: infinite.

    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST FTPManager connectTimeout CDATA #IMPLIED>
<!--
    Data transfer timeout (in milliseconds)
    Default: infinite.

    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST FTPManager dataTimeout CDATA #IMPLIED>
<!--
    If true the instance use autoconnect/disconnect at each method invocation.
    Default: false.
-->
<!ATTLIST FTPManager autoConnect (true|false) #IMPLIED>

<!--
    If the target directory is on a remote file system
    accessible via FTP over SSL, this element encapsulates
    the parameters required to connect.

    The parameters hostname, username, password can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{[conn::]statement}}  : execute a select sql statement sql and return the value of
                                   the first field of the first selected record.
                                   The 'conn' parameter is the JNDI name of a DataSource,
                                   if not defined is used the current connection
     - sqllist{{[conn::]statement}}
                                 : execute a select sql statement sql and return the value of
                                   the first field of all selected records as a comma separated list.
                                   The 'conn' parameter is the JNDI name of a DataSource,
                                   if not defined is used the current connection
     - sqltable{{conn::statement}}
                                 : executes a select sql statement and returns all values of
                                   returned cursor as an XML.
                                   The 'conn' parameter is the JNDI name of a DataSource


    #SelectOnInsert
    #Template:
        <xsl:template match="FTPSManager">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="200">FTPS Host Type :</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@host-type"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">FTPS Hostname :</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@hostname"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">FTPS Username:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@username"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">FTPS Password:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@password"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">Connect timeout:</td>
                    <td width="20"></td>
                    <xsl:choose>
                        <xsl:when test="@connectTimeout">
                            <td><b><xsl:value-of select="@connectTimeout"/></b></td>
                        </xsl:when>
                        <xsl:otherwise>
                            <td><b>infinite</b></td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
                <tr valign="top">
                    <td width="200">Data transfer timeout:</td>
                    <td width="20"></td>
                    <xsl:choose>
                        <xsl:when test="@dataTimeout">
                            <td><b><xsl:value-of select="@dataTimeout"/></b></td>
                        </xsl:when>
                        <xsl:otherwise>
                            <td><b>infinite</b></td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT FTPSManager (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FTPSManager type CDATA #FIXED "remote-manager">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FTPSManager class CDATA #FIXED "it.greenvulcano.util.remotefs.ftp.FTPSManager">
<!--
    The host type. Information used by the FTPS client for
    the proper parsing of the responses of the server.

    #NotNull
-->
<!ATTLIST FTPSManager hostType (UNIX|NT|OS2|OS400|VMS|MVS) #REQUIRED>
<!--
    Server host  name.

    #NotNull
-->
<!ATTLIST FTPSManager hostname CDATA #REQUIRED>
<!--
    Server FTPS port.

    #NotNull
-->
<!ATTLIST FTPSManager port CDATA "21">
<!--
    User name.

    #NotNull
-->
<!ATTLIST FTPSManager username CDATA #REQUIRED>
<!--
    User password.

    #NotNull
    #Encrypted
-->
<!ATTLIST FTPSManager password CDATA #REQUIRED>
<!--
    Connect timeout (in milliseconds).
    Default: infinite.

    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST FTPSManager connectTimeout CDATA #IMPLIED>
<!--
    Data transfer timeout (in milliseconds)
    Default: infinite.

    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST FTPSManager dataTimeout CDATA #IMPLIED>
<!--
    If true the instance use autoconnect/disconnect at each method invocation.
    Default: false.

    #NotNull
-->
<!ATTLIST FTPSManager autoConnect (true|false) #IMPLIED>

<!--
    If the target directory is on a remote file system
    accessible via FTP over SSH, this element encapsulates
    the parameters required to connect.

    The parameters hostname, username, password, privateKey, publicKey and passphrase
    can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{[conn::]statement}}     : execute a select sql statement sql and return the value of
                                      the first field of the first selected record.
                                      The 'conn' parameter is the JNDI name of a DataSource,
                                      if not defined is used the current connection
     - sqllist{{[conn::]statement}} : execute a select sql statement sql and return the value of
                                      the first field of all selected records as a comma separated list.
                                      The 'conn' parameter is the JNDI name of a DataSource,
                                      if not defined is used the current connection
     - sqltable{{conn::statement}}  : executes a select sql statement and returns all values of
                                      returned cursor as an XML.
                                      The 'conn' parameter is the JNDI name of a DataSource

    #SelectOnInsert
    #Template:
        <xsl:template match="SFTPManager">
        	<table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="200">SFTP Hostname :</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@hostname"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">SFTP known host file path:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@knownHostFilePath"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">SFTP Authentication Method:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@authMethod"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">SFTP Username:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@username"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">SFTP Password:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@password"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">Connect timeout:</td>
                    <td width="20"></td>
                    <xsl:choose>
                        <xsl:when test="@connectTimeout">
                            <td><b><xsl:value-of select="@connectTimeout"/></b></td>
                        </xsl:when>
                        <xsl:otherwise>
                            <td><b>infinite</b></td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
                <tr valign="top">
                    <td width="200">Data transfer timeout:</td>
                    <td width="20"></td>
                    <xsl:choose>
                        <xsl:when test="@dataTimeout">
                            <td><b><xsl:value-of select="@dataTimeout"/></b></td>
                        </xsl:when>
                        <xsl:otherwise>
                            <td><b>infinite</b></td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT SFTPManager (Description?, IdentityInfo?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SFTPManager type CDATA #FIXED "remote-manager">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SFTPManager class CDATA #FIXED "it.greenvulcano.util.remotefs.sftp.SFTPManager">
<!--
    Server host name.

    #NotNull
-->
<!ATTLIST SFTPManager hostname CDATA #REQUIRED>
<!--
    Server listening port.
    Default: 22.

    #NotNull
    #Pattern: ! ^(6553[0-5]|655[0-2]\d|65[0-4]\d\d|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}|0)$ ! set a integer value from 0 to 65535
-->
<!ATTLIST SFTPManager port CDATA #IMPLIED>
<!--
    'known_hosts' file path.
    Default: $HOME/.ssh/known_hosts

    #NotNull
-->
<!ATTLIST SFTPManager knownHostFilePath CDATA #IMPLIED>
<!--
    Authentication method for accessing remote host.

    #Warn: {{../SFTPManager[@authMethod='publicKey' and @password]}} Field 'password' should not be specified if chosen 'publicKey' as an authentication method.
    #Warn: {{../SFTPManager[not(@password) and @authMethod='password']}} Field 'password' is required if you chose 'password' as the authentication method.
-->
<!ATTLIST SFTPManager authMethod (password|publicKey) #REQUIRED>
<!--
    Username for the connection.
    If not set, the user is retrieved by which GV was executed
    by the system property 'user.name'.

    #NotNull
-->
<!ATTLIST SFTPManager username CDATA #IMPLIED>
<!--
    Password for the connection.

    #NotNull
    #Encrypted
-->
<!ATTLIST SFTPManager password CDATA #IMPLIED>
<!--
    Connect timeout (in milliseconds).
    Default: infinite.

    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST SFTPManager connectTimeout CDATA #IMPLIED>
<!--
    Data transfer timeout (in milliseconds).
    Default: infinite.

    #NotNull
    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST SFTPManager dataTimeout CDATA #IMPLIED>
<!--
    If true the instance use autoconnect/disconnect at each method invocation.
    Default false.
-->
<!ATTLIST SFTPManager autoConnect (true|false) #IMPLIED>

<!--
    Retrieve information for public and private keys to connect with SSH,
    with authentication method 'publicKey'.

    #SelectOnInsert
-->
<!ELEMENT IdentityInfo EMPTY>
<!--
    Path of file containing the private key.

    #NotNull
-->
<!ATTLIST IdentityInfo privateKey CDATA #REQUIRED>
<!--
    Passphrase to access the private key.

    #NotNull
    #Encrypted
-->
<!ATTLIST IdentityInfo passphrase CDATA #REQUIRED>
<!--
    Path of file containing the public key.

    #NotNull
-->
<!ATTLIST IdentityInfo publicKey CDATA #REQUIRED>

<!--
    Configure a InMemoryMonitorStatus to be used to hold
    a FileSystemMonitor status in memory.

    #SelectOnInsert
-->
<!ELEMENT InMemoryMonitorStatus (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST InMemoryMonitorStatus type CDATA #FIXED "fs-monitor-status">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST InMemoryMonitorStatus class CDATA #FIXED "it.greenvulcano.util.file.monitor.status.InMemoryMonitorStatus">
<!--
    If 'true' (default) the status is dumped on log on
    every update.
-->
<!ATTLIST InMemoryMonitorStatus dumpStatus   (true|false) #IMPLIED>

<!--
    Configure a FileMonitorStatus to be used to hold a
    FileSystemMonitor status in a local file.

    #SelectOnInsert
-->
<!ELEMENT FileMonitorStatus (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileMonitorStatus type CDATA #FIXED "fs-monitor-status">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST FileMonitorStatus class CDATA #FIXED "it.greenvulcano.util.file.monitor.status.FileMonitorStatus">
<!--
    The absolute path of the monitor status file.
    Can contains placeholder to be replaced at runtime.

    #NotNull
-->
<!ATTLIST FileMonitorStatus statusFilePath CDATA #REQUIRED>
<!--
    If 'true' (default) an error is raised for invalid status file.

-->
<!ATTLIST FileMonitorStatus errorOnInvalidFile   (true|false) #IMPLIED>

<!--
    Configure a LocalFileSystemMonitor instance,
    to be used to monitor a local file system directory.

    #SelectOnInsert
    #Template:
        <xsl:template match="LocalFileSystemMonitor">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="200">Directory path:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@path"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">File mask:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="FileFilter/@file-mask"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">File type filter:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="FileFilter/@file-type"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT LocalFileSystemMonitor (Description?, (%fs-monitor-status;), FileFilter, ResultFilter)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST LocalFileSystemMonitor type CDATA #FIXED "fs-monitor">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST LocalFileSystemMonitor class CDATA #FIXED "it.greenvulcano.util.file.monitor.LocalFileSystemMonitor">
<!--
    Absolute path to monitor on local file system.
    Can contains placeholders which will be replaced at runtime.

    #NotNull
-->
<!ATTLIST LocalFileSystemMonitor path CDATA #REQUIRED >

<!--
    Configure a RemoteFileSystemMonitor instance,
    to be used to monitor a remote file system directory.

    #SelectOnInsert
    #Template:
        <xsl:template match="RemoteFileSystemMonitor">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="200">Directory path:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@path"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">File mask:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="FileFilter/@file-mask"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="200">File type filter:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="FileFilter/@file-type"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT RemoteFileSystemMonitor (Description?, (%fs-monitor-status;), FileFilter, ResultFilter, (%remote_managers;))>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteFileSystemMonitor type CDATA #FIXED "fs-monitor">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RemoteFileSystemMonitor class CDATA #FIXED "it.greenvulcano.util.file.monitor.RemoteFileSystemMonitor">
<!--
    Absolute path to monitor on local file system.
    Can contains placeholders which will be replaced at runtime.

    #NotNull
-->
<!ATTLIST RemoteFileSystemMonitor path CDATA #REQUIRED >

<!--
    Define a file filter configuration.

    #SelectOnInsert
-->
<!ELEMENT FileFilter (Description?)>

<!--
    Regular expression for file name matching. Default to all files.

    #NotNull
-->
<!ATTLIST FileFilter file-mask CDATA #IMPLIED>

<!--
    Filter for file type. Default to 'files-only'.
-->
<!ATTLIST FileFilter file-type (files-only|directories-only|all) #IMPLIED>

<!--
    Filter the information in AnalysisReport generated from a FileSystemMonitor.

    #SelectOnInsert
    #Template:
        <xsl:template match="ResultFilter">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="100">Existing</td>
                    <td width="100">Created</td>
                    <td width="100">Modified</td>
                    <td width="100">Deleted</td>
                    <td width="100">Sort</td>
                    <td width="100">Ascending</td>
                </tr>
                <tr valign="top">
                    <td><b><xsl:value-of select="@existing"/></b></td>
                    <td><b><xsl:value-of select="@created"/></b></td>
                    <td><b><xsl:value-of select="@modified"/></b></td>
                    <td><b><xsl:value-of select="@deleted"/></b></td>
                    <td><b><xsl:value-of select="@sort-mode"/></b></td>
                    <td><b><xsl:value-of select="@sort-ascending"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT ResultFilter EMPTY>
<!--
    Returns the existing files if true.

-->
<!ATTLIST  ResultFilter existing (true|false) #REQUIRED>
<!--
    Returns the created files if true.

-->
<!ATTLIST  ResultFilter created (false|true) #REQUIRED>
<!--
    Returns the modified files if true.

-->
<!ATTLIST  ResultFilter modified (false|true) #REQUIRED>
<!--
    Returns the deleted files if true.

-->
<!ATTLIST  ResultFilter deleted (false|true) #REQUIRED>
<!--
    ResultFilter sort mode.

-->
<!ATTLIST  ResultFilter sort-mode (by-name|by-time) #REQUIRED>
<!--
    The ResultFilter will be sortes ascending if true.

-->
<!ATTLIST  ResultFilter sort-ascending (true|false) #REQUIRED>


<!--
    Contains configurations of the systems interfaced to GreenVulcanoESB.
    For each system you can specify the interface used to connect.

    #Icon: systems.png
-->
<!ELEMENT GVSystems (Description?, Systems)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVSystems type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'SYSTEMS'.
-->
<!ATTLIST GVSystems name    CDATA   #FIXED  "SYSTEMS">
<!--
    This section defines the configuration of systems connected
    to GreenVulcanoESB.
    This section shows the technologies used for interfaces,
    the connection parameters, etc.

    #SortChild
    #Icon: systems.png
    #Table: | GreenVulcanoESB System | System | System | @id-system | Channels | Channel/@id-channel | Contacts | Contact/@last-name | Activation | @system-activation | Description | Description
    #Template:

        <xsl:template match="Systems">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT Systems (Description?, System*)>


<!--
    Configuring a system interfaced with GreenVulcanoESB.

    A system is identified by a single name, has an activation state,
    has a number of communication interfaces grouped in channels.
    In addition to operational information for each system you can
    define a list of contacts (Contact).

    #Label: @id-system
    #Table: | Channels | Channel | Id | @id-channel | Operations | *[@type='call' or @type='enqueue' or @type='dequeue']/@name | Description | Description
    #Table: | Contacts | Contact | Last Name | @last-name | First Name | @first-name | Title | @qualification | E-mail | @e-mail | Mobile | @mobile | Telephone | @telephone
    #SelectOnInsert
    #SortChild
    #Icon: system.png
-->
<!ELEMENT System (Description?, Channel*,  Contact*)>
<!--
    System unique identifier.

    #Unique: /GVCore/GVSystems/Systems/System/@id-system
    #NotNull
-->
<!ATTLIST System id-system CDATA #REQUIRED>
<!--
    Activation status of system.

    The status can be:
    - on: system's services are active.
    - paused: system's services are inactive, the asynchronous client's requests
              are tacken in charghe by Greenvulcano ESB. They will be served when
              the system return on state 'on'.
    - off: system's services are inactive and no request are tacken in charghe
           by Greenvulcano ESB.

    The current version don't implement the state 'paused'.

    #Warn: {{../System[@system-activation='paused']}} 'paused' is not yet supported for 'system-activation'
-->
<!ATTLIST System system-activation (on|paused|off) "on">


<!--
    A channel (Channel) brings together a set of interfaces to a system.

    In general for any system there will be a single channel that collects all
    the operations necessary for communication to the system.
    But there may be situations where it is preferable to use multiple channels.

    #Label: @id-channel
    #Icon: channel.png
    #SelectOnInsert
    #SortChild
-->
<!ELEMENT Channel (Description?, (%vcl_ops;)*)>
<!--
    ID of the channel.
    This identifier must be unique within the System.

    #NotNull
    #Unique: ../Channel/@id-channel
-->
<!ATTLIST Channel id-channel CDATA #REQUIRED>


<!--
    Identify a contact for an external system.

    The information contained in this element are optional
    and have no impact on the functioning of GreenVulcanoESB.
    Such information may be used to produce reports.

    #Label: @last-name
    #SelectOnInsert
-->
<!ELEMENT Contact (Description?)>
<!--
    Contact first name.

    #NotNull
-->
<!ATTLIST Contact first-name CDATA #REQUIRED>
<!--
    Contact last name.

    #NotNull
-->
<!ATTLIST Contact last-name CDATA #REQUIRED>
<!--
    Contact role.

    #NotNull
-->
<!ATTLIST Contact role CDATA #IMPLIED>
<!--
    Contact mobile.

    #NotNull
-->
<!ATTLIST Contact mobile CDATA #IMPLIED>
<!--
    Contact telephone.

    #NotNull
-->
<!ATTLIST Contact telephone CDATA #IMPLIED>
<!--
    Contact email.

    #NotNull
-->
<!ATTLIST Contact e-mail CDATA #IMPLIED>

<!--
    Root element for configuring the Pool Manager of GreenVulcanoESB.

    #SortChild
-->
<!ELEMENT GVPoolManager (Description?, GreenVulcanoPool*)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVPoolManager type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'POOL_MANAGER'.
-->
<!ATTLIST GVPoolManager name    CDATA   #FIXED  "POOL_MANAGER">

<!--
    Handle a pool of GreenVulcano Core instances, to be shared among the various
    input adapter (EJB, MDB, WS).

    #CompositeLabel: || @subsystem | / | @initial-size | / | @maximum-size | / | @maximum-creation
    #Template:
        <xsl:template match="GreenVulcanoPool">
            <xsl:value-of select="Description"/>
        </xsl:template>
-->
<!ELEMENT GreenVulcanoPool (Description?)>
<!--
    Subsystem using the pool.

    #NotNull
    #Unique: ../GreenVulcanoPool/@subsystem
-->
<!ATTLIST GreenVulcanoPool subsystem  CDATA   #REQUIRED>
<!--
    #Pattern: ! [0-9]* ! set a integer value > 0
-->
<!ATTLIST GreenVulcanoPool initial-size  CDATA   #REQUIRED>
<!--
    Maximum pool size.
    The default is 10 items.
    A value of -1 equals not limited pool.

    #Pattern: ! (-1)|([1-9][0-9]*) ! set -1 or an integer > 0
    #Warn: {{self::GreenVulcanoPool[(@maximum-size > 0 ) and (@initial-size > @maximum-size)]}} initial-size > maximum-size
-->
<!ATTLIST GreenVulcanoPool maximum-size  CDATA   #REQUIRED>
<!--
    Maximum number of instances to create.
    The default is 50 instances.
    A value of -1 is equivalent to unlimited number of creations.

    #Pattern: ! (-1)|([1-9][0-9]*) ! set -1 or an integer > 0
    #Warn: {{self::GreenVulcanoPool[(@maximum-creation > 0) and (@maximum-size > @maximum-creation)]}} maximum-size > maximum-creation
-->
<!ATTLIST GreenVulcanoPool maximum-creation  CDATA   #REQUIRED>
<!--
   Specifies the default timeout, in milliseconds, to obtain a GreenVulcano
   Core instance.

    #Pattern: ! [1-9][0-9]* ! set a integer value
-->
<!ATTLIST GreenVulcanoPool default-timeout  CDATA   #REQUIRED>
<!--
    Specifies the default timeout, in milliseconds, to activate the
    mechanism of shrinking the pooled GreenVulcano Core instances.
    The default is 15 minutes.
    The value -1 disables resizing of the pool.

    #Pattern: ! (-1)|([1-9][0-9]*) ! set -1 or an integer > 0
-->
<!ATTLIST GreenVulcanoPool shrink-timeout  CDATA   #IMPLIED>
<!--
    Questo elemento contiene la definizione delle proprieta'
    grafiche dell'elemento corrente e dei suoi sottoelementi.

    #Hidden
-->
<!ELEMENT Graph ANY>

<!--
    HTTP VCL plugin to call HTTP methods on remote servers.

    #Label: @name
    #Icon: GVHttpCall.png
    #Category: Web/Mail
    #SelectOnInsert
    #Template:

        <xsl:template match="http-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT http-call (Description?, endpoint, method)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST http-call   type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST http-call    class CDATA #FIXED "it.greenvulcano.gvesb.virtual.http.HTTPCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST http-call    name CDATA #REQUIRED>
<!--
    Endpoint configuration to connect to the server.
-->
<!ELEMENT endpoint (Description?, CustomProtocol?, (BasicHttpAuth | NTLMHttpAuth)?, Proxy?)>
<!--
    Host to connect to.
    Can contain metadata to be resolved at runtime.

    #NotNull
-->
<!ATTLIST endpoint   host CDATA #REQUIRED>
<!--
    Port where the service is exposed.
    Can contain metadata to be resolved at runtime.
    Default port is '80'.

    #NotNull
-->
<!ATTLIST endpoint   port CDATA #IMPLIED>
<!--
    Defines if the endpoint connection is secure or not. If secure is 'true', the default connection protocol will be 'http';
    otherwise, the default connection protocol will be 'https'.
    The default value is 'false'.
-->
<!ATTLIST endpoint   secure (false|true) #IMPLIED>
<!--
    Can be one of those defined locally for this 'http-call', or globally in GreenVulcanoESB on GVSupport configuration.

    #References: CustomProtocol/@name
    #References: gvesb:document('GVSupport')/GVSupport/GVHTTPClientProtocolConfig/CustomProtocol/@name
-->
<!ATTLIST endpoint  custom-protocol CDATA #IMPLIED>
<!--
    Defines the connection timeout, in ms.
    Default to 10000ms.

    #NotNull
-->
<!ATTLIST endpoint  conn-timeout CDATA #IMPLIED>
<!--
    Defines the timeout to wait for a server response, in ms.
    Default to 30000ms.

    #NotNull
-->
<!ATTLIST endpoint  so-timeout CDATA #IMPLIED>
<!--
    Optional context path to prepend to remote URI call.

    #NotNull
-->
<!ATTLIST endpoint  context-path CDATA #IMPLIED>

<!--
    Method to execute to the server.
-->
<!ELEMENT method EMPTY>
<!--
    Method name.

-->
<!ATTLIST method   name (OPTIONS|GET|HEAD|POST|PUT|DELETE) #REQUIRED>
<!--
    Request URI. Can contain placeholders.

    #NotNull
-->
<!ATTLIST method   request-uri CDATA #REQUIRED>
<!--
    If true the request-uri is already escaped, if false (WARNING!!!) the uri is escaped by the plug-in.
    Default to true.
-->
<!ATTLIST method uri-escaped (true|false) #IMPLIED>
<!--
    Name of Data Provider to use to prepare the request.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVDataProviderManager/DataProviders/*[@type='dataProvider']/@name
-->
<!ATTLIST method   ref-dp CDATA #IMPLIED>

<!--
    JMX VCL plugin to invoke MBean methods or set/get attributes on local servers.

    #Label: @name
    #Icon: GVJmxCall.png
    #Category: J2EE
    #SelectOnInsert
    #Template:

        <xsl:template match="jmx-call">
                <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT jmx-call (Description?, %jmx-op;)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST jmx-call   type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST jmx-call   class CDATA #FIXED "it.greenvulcano.gvesb.virtual.jmx.JMXCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='enqueue' or @type='dequeue' or @type='call']/@name
-->
<!ATTLIST jmx-call   name CDATA #REQUIRED>
<!--
    Defines an object name filter to invoke/set/get via JMX server.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #NotNull
-->
<!ATTLIST jmx-call  object-name CDATA #REQUIRED>
<!--
    Invokes a method to the MBean.
-->
<!ELEMENT invoke-method (invoke-parameter*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST invoke-method type CDATA #FIXED "method">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST invoke-method class CDATA #FIXED "it.greenvulcano.gvesb.virtual.jmx.methods.JMXInvokeOperation">
<!--
    MBean's method to invoke.

    #NotNull
-->
<!ATTLIST invoke-method method CDATA #REQUIRED>
<!--
    Sets a MBean's attribute value.
-->
<!ELEMENT set-attribute EMPTY>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST set-attribute type CDATA #FIXED "method">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST set-attribute  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.jmx.methods.JMXSetOperation">
<!--
    Attribute name of the MBean.

    #NotNull
-->
<!ATTLIST set-attribute name CDATA #REQUIRED>
<!--
    Attribute value of the MBean to set.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource
-->
<!ATTLIST set-attribute value CDATA #REQUIRED>
<!--
    Parameter type.
    Only used for invoke method.
-->
<!ATTLIST set-attribute  value-type (byte | boolean | char | double | float | int | long | short | String) #REQUIRED>
<!--
    Gets a MBean's attribute value.
-->
<!ELEMENT get-attribute EMPTY>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST get-attribute type CDATA #FIXED "method">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST get-attribute  class CDATA #FIXED "it.greenvulcano.gvesb.virtual.jmx.methods.JMXGetOperation">
<!--
    Attribute of the MBean to get the value.

    #NotNull
-->
<!ATTLIST get-attribute attribute CDATA #REQUIRED>
<!--
    Specify an invoker method parameter.

    #SelectOnInsert

    #Template:

        <xsl:template match="invoke-parameter">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
            <table cellspacing="0" cellpadding="0">
                <tr valign="top">
                    <td>Type</td>
                    <td width="15"><b/></td>
                    <td><b><xsl:value-of select="@type"/></b></td>
                </tr>
                <tr valign="top">
                    <td>Value</td>
                    <td width="15"><b/></td>
                    <td><b><xsl:value-of select="@value"/></b></td>
                </tr>
            </table>
        </xsl:template>
-->
<!ELEMENT invoke-parameter (Description?)>
<!--
    Parameter type.
    Only used for invoke method.
-->
<!ATTLIST invoke-parameter   type (byte | boolean | char | double | float | int | long | short | String) #REQUIRED>
<!--
    Parameter value.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    #Pattern: {{../invoke-parameter[@type='byte']}}   @ -?\d+ @ set an integer
    #Pattern: {{../invoke-parameter[@type='int']}}    @ -?\d+ @ set an integer
    #Pattern: {{../invoke-parameter[@type='long']}}   @ -?\d+ @ set an integer
    #Pattern: {{../invoke-parameter[@type='short']}}  @ -?\d+ @ set an integer
    #Pattern: {{../invoke-parameter[@type='double']}} @ -?\d+(\.\d+)? @ set a number
    #Pattern: {{../invoke-parameter[@type='float']}}  @ -?\d+(\.\d+)? @ set a number
    #Pattern: {{../invoke-parameter[@type='char']}}   @ . @ set a char
    #Choice: {{../invoke-parameter[@type='boolean']}} true | false
-->
<!ATTLIST invoke-parameter  value CDATA #REQUIRED>

<!--
    Defines the information needed to generate BIRT reports.

    #Label: @name
    #Icon: GVBirtReportCall.png
    #Category: Utils
    #Template:
        <xsl:template match="birt-report-call">
            <xsl:if test="Description">
                <small><br/><xsl:value-of select="Description"/></small>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT birt-report-call (Description?)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST birt-report-call type CDATA #FIXED "call">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST birt-report-call class CDATA #FIXED "it.greenvulcano.gvesb.virtual.birt.report.BIRTReportCallOperation">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='call' or @type='enqueue' or @type='dequeue']/@name
-->
<!ATTLIST birt-report-call name CDATA #REQUIRED>
<!--
    Reference to group name.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVBIRTReportConfiguration/ReportGroups/ReportGroup/@name
-->
<!ATTLIST birt-report-call groupName CDATA #REQUIRED>
<!--
    Reference to report name.

    #References: gvesb:document('GVAdapters')/GVAdapters/GVBIRTReportConfiguration/ReportGroups/ReportGroup[@name = current()/@groupName]/Report/@name
-->
<!ATTLIST birt-report-call reportName CDATA #REQUIRED>
<!--
    Report format, default to 'pdf'.

-->
<!ATTLIST birt-report-call reportType (pdf|excel|html) #IMPLIED>


<!--
    Defines the configuration of the GreenVulcanoESB Default Timer task manager.
-->
<!ELEMENT GVTaskManagerConfiguration (Description?, GVSchedulerBuilder, TaskGroups)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVTaskManagerConfiguration type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'TASK_MANAGER_FACTORY'.
-->
<!ATTLIST GVTaskManagerConfiguration name    CDATA   #FIXED  "GVTASKS">

<!--
    Quartz scheduler configurator.

    #SelectOnInsert
-->
<!ELEMENT GVSchedulerBuilder (Description?, (RamStore|JdbcStore), Calendars?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSchedulerBuilder type CDATA #FIXED "scheduler-builder">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST GVSchedulerBuilder  class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.GVSchedulerBuilder">
<!--
    Defines the max number of threads in the scheduler's thread pool.
    Default to 5.

    #NotNull
-->
<!ATTLIST GVSchedulerBuilder  maxThreads CDATA #IMPLIED>

<!--
    Scheduler state holder in RAM.
    IS NOT CLUSTER-AWARE!!!

    #SelectOnInsert
-->
<!ELEMENT RamStore (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RamStore type CDATA #FIXED "quartz-store">
<!--
    The the number of milliseconds the scheduler will 'tolerate' a trigger to pass its next-fire-time
    by, before being considered "misfired".
    The default value is 60000 (60 seconds).

    #NotNull
-->
<!ATTLIST RamStore  misfireThreshold CDATA #IMPLIED>

<!--
    Scheduler state holder in on DataBase.
    IS CLUSTER-AWARE.

    #SelectOnInsert
-->
<!ELEMENT JdbcStore (Description?, DriverPoolConnectionBuilder)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST JdbcStore type CDATA #FIXED "quartz-store">
<!--
    Driver delegates understand the particular 'dialects' of varies database systems.

    #NotNull
    #Choice: org.quartz.impl.jdbcjobstore.StdJDBCDelegate | org.quartz.impl.jdbcjobstore.MSSQLDelegate | org.quartz.impl.jdbcjobstore.PostgreSQLDelegate | org.quartz.impl.jdbcjobstore.WebLogicDelegate | org.quartz.impl.jdbcjobstore.oracle.OracleDelegate | org.quartz.impl.jdbcjobstore.oracle.WebLogicOracleDelegate | org.quartz.impl.jdbcjobstore.oracle.weblogic.WebLogicOracleDelegate | org.quartz.impl.jdbcjobstore.CloudscapeDelegate | org.quartz.impl.jdbcjobstore.DB2v6Delegate | org.quartz.impl.jdbcjobstore.DB2v7Delegate | org.quartz.impl.jdbcjobstore.HSQLDBDelegate | org.quartz.impl.jdbcjobstore.PointbaseDelegate
-->
<!ATTLIST JdbcStore  driverDelegate CDATA #REQUIRED>
<!--
    Is a string equal to the prefix given to Quartz's tables that were created in your database.
    You can have multiple sets of Quartz's tables within the same database if they use different
    table prefixes.

    #NotNull
-->
<!ATTLIST JdbcStore  tablePrefix CDATA #REQUIRED>
<!--
    The the number of milliseconds the scheduler will 'tolerate' a trigger to pass its next-fire-time
    by, before being considered "misfired".
    The default value is 60000 (60 seconds).

    #NotNull
-->
<!ATTLIST JdbcStore  misfireThreshold CDATA #IMPLIED>
<!--
    Set the frequency (in milliseconds) at which this instance "checks-in" with the other instances of
    the cluster. Affects the quickness of detecting failed instances.
    The default value is 15000 (15 seconds).

    #NotNull
-->
<!ATTLIST JdbcStore  clusterCheckinInterval CDATA #IMPLIED>

<!--
    Calendars do not define actual fire times, but rather are used to limit a Trigger from firing on its
    normal schedule if necessary. Most Calendars include all times by default and allow the user to specify
    times to exclude.

    #SelectOnInsert
-->
<!ELEMENT Calendars ((DailyCalendarBuilder|WeeklyCalendarBuilder|MonthlyCalendarBuilder|AnnualCalendarBuilder|CronCalendarBuilder)*)>

<!--
    This implementation of the Calendar excludes (or includes) a specified time range each day.
    Each DailyCalendar only allows a single time range to be specified, and that time range may
    not cross daily boundaries (i.e. you cannot specify a time range from 8PM - 5AM).
    If the property invertTimeRange is false (default), the time range defines a range of times
    in which triggers are not allowed to fire.
    If invertTimeRange is true, the time range is inverted – that is, all times outside the defined
    time range are excluded.

    #Label: @name
    #SelectOnInsert
    #Icon: GVDailyCalendarBuilder.png
-->
<!ELEMENT DailyCalendarBuilder (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DailyCalendarBuilder type CDATA #FIXED "cron-calendar">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DailyCalendarBuilder  class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.calendar.DailyCalendarBuilder">
<!--
    Calendar name.
    Used in associations with Triggers and other Calendars.

    #NotNull
    #Unique: ../*[@type='cron-calendar']/@name
-->
<!ATTLIST DailyCalendarBuilder  name CDATA #REQUIRED>
<!--
    Range starting time in the format: HH:mm[:ss[:SSS]]

    #NotNull
-->
<!ATTLIST DailyCalendarBuilder  rangeStartingTime CDATA #REQUIRED>
<!--
    Range ending time in the format: HH:mm[:ss[:SSS]]

    #NotNull
-->
<!ATTLIST DailyCalendarBuilder  rangeEndingTime CDATA #REQUIRED>
<!--
    If the property invertTimeRange is false (default), the time range defines a range of times
    in which triggers are not allowed to fire.
    If invertTimeRange is true, the time range is inverted – that is, all times outside the defined
    time range are excluded.

    #NotNull
-->
<!ATTLIST DailyCalendarBuilder  invertTimeRange CDATA #IMPLIED>
<!--
    Calendar TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST DailyCalendarBuilder  timeZone CDATA #IMPLIED>
<!--
    Set a new base calendar.
    The configured Calendars are instantiated in configuration order, so the Calendars whith
    baseCalendarName set MUST be defined AFTER the referenced Calendar.

    #NotNull
    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST DailyCalendarBuilder  baseCalendarName CDATA #IMPLIED>

<!--
    This implementation of the Calendar excludes a set of days of the week.

    #Label: @name
    #SelectOnInsert
    #Icon: GVWeeklyCalendarBuilder.png
-->
<!ELEMENT WeeklyCalendarBuilder (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST WeeklyCalendarBuilder type CDATA #FIXED "cron-calendar">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST WeeklyCalendarBuilder  class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.calendar.WeeklyCalendarBuilder">
<!--
    Calendar name.
    Used in associations with Triggers and other Calendars.

    #NotNull
    #Unique: ../*[@type='cron-calendar']/@name
-->
<!ATTLIST WeeklyCalendarBuilder  name CDATA #REQUIRED>
<!--
    Define the list of days excluded. The list size must be lower or equal 7.
    The values are mapped to days names starting from 1 to 7 in this order:
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY.
    Ex: to exclude SUNDAY and SATURDAY set "1,7"
    Ex: to exclude all days "1,2,3,4,5,6,7"

    #NotNull
-->
<!ATTLIST WeeklyCalendarBuilder  excludedDays CDATA #REQUIRED>
<!--
    Calendar TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST WeeklyCalendarBuilder  timeZone CDATA #IMPLIED>
<!--
    Set a new base calendar.
    The configured Calendars are instantiated in configuration order, so the Calendars whith
    baseCalendarName set MUST be defined AFTER the referenced Calendar.

    #NotNull
    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST WeeklyCalendarBuilder  baseCalendarName CDATA #IMPLIED>

<!--
    This implementation of the Calendar excludes a set of days of the month.

    #Label: @name
    #SelectOnInsert
    #Icon: GVMonthlyCalendarBuilder.png
-->
<!ELEMENT MonthlyCalendarBuilder (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST MonthlyCalendarBuilder type CDATA #FIXED "cron-calendar">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST MonthlyCalendarBuilder  class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.calendar.MonthlyCalendarBuilder">
<!--
    Calendar name.
    Used in associations with Triggers and other Calendars.

    #NotNull
    #Unique: ../*[@type='cron-calendar']/@name
-->
<!ATTLIST MonthlyCalendarBuilder  name CDATA #REQUIRED>
<!--
    Define the list of days excluded. The list size must be lower or equal 31.
    The values are mapped to days index starting from 1 to 31.
    Ex: to exclude 1th and 10th day of the month set "1,10"

    #NotNull
-->
<!ATTLIST MonthlyCalendarBuilder  excludedDays CDATA #REQUIRED>
<!--
    Calendar TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST MonthlyCalendarBuilder  timeZone CDATA #IMPLIED>
<!--
    Set a new base calendar.
    The configured Calendars are instantiated in configuration order, so the Calendars whith
    baseCalendarName set MUST be defined AFTER the referenced Calendar.

    #NotNull
    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST MonthlyCalendarBuilder  baseCalendarName CDATA #IMPLIED>

<!--
    This implementation of the Calendar excludes a set of days of the year.

    #Label: @name
    #SelectOnInsert
    #Icon: GVAnnualCalendarBuilder.png
-->
<!ELEMENT AnnualCalendarBuilder (Description?, ExcludedDay*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST AnnualCalendarBuilder type CDATA #FIXED "cron-calendar">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST AnnualCalendarBuilder  class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.calendar.AnnualCalendarBuilder">
<!--
    Calendar name.
    Used in associations with Triggers and other Calendars.

    #NotNull
    #Unique: ../*[@type='cron-calendar']/@name
-->
<!ATTLIST AnnualCalendarBuilder  name CDATA #REQUIRED>
<!--
    Calendar TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST AnnualCalendarBuilder  timeZone CDATA #IMPLIED>
<!--
    Set a new base calendar.
    The configured Calendars are instantiated in configuration order, so the Calendars whith
    baseCalendarName set MUST be defined AFTER the referenced Calendar.

    #NotNull
    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST AnnualCalendarBuilder  baseCalendarName CDATA #IMPLIED>

<!--
    Defines an excluded day.

    #SelectOnInsert
-->
<!ELEMENT ExcludedDay (Description?)>
<!--
    Excluded year day.
    The format is dd/MM.

    #NotNull
-->
<!ATTLIST ExcludedDay  day CDATA #REQUIRED>

<!--
    This implementation of the Calendar excludes the set of times expressed by a given CronExpression.
    For example, you could use this calendar to exclude all but business hours (8AM - 5PM) every day
    using the expression "* * 0-7,18-23 ? * *".

    #Label: @name
    #SelectOnInsert
    #Icon: GVCronCalendarBuilder.png
-->
<!ELEMENT CronCalendarBuilder (Description?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CronCalendarBuilder type CDATA #FIXED "cron-calendar">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.

-->
<!ATTLIST CronCalendarBuilder  class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.calendar.CronCalendarBuilder">
<!--
    Calendar name.
    Used in associations with Triggers and other Calendars.

    #NotNull
    #Unique: ../*[@type='cron-calendar']/@name
-->
<!ATTLIST CronCalendarBuilder  name CDATA #REQUIRED>
<!--
    Define a cron expression.
    Reference: http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger

    #NotNull
-->
<!ATTLIST CronCalendarBuilder  excludeCronExpression CDATA #REQUIRED>
<!--
    Calendar TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST CronCalendarBuilder  timeZone CDATA #IMPLIED>
<!--
    Set a new base calendar.
    The configured Calendars are instantiated in configuration order, so the Calendars whith
    baseCalendarName set MUST be defined AFTER the referenced Calendar.

    #NotNull
    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST CronCalendarBuilder  baseCalendarName CDATA #IMPLIED>

<!--
    #SelectOnInsert
-->
<!ELEMENT TaskGroups (TaskGroup*)>


<!--
    Defines an group of Timer Tasks.

    #Label: @name
    #SelectOnInsert
    #SortChild
-->
<!ELEMENT TaskGroup (Description?, (ServiceCallerTask|RSHTask|ShellTask|LogCleanerTask|TestTask)*)>
<!--
    Task name.

    #NotNull
    #Unique: ../TaskGroup/@name
-->
<!ATTLIST TaskGroup name         CDATA #REQUIRED>
<!--
    TaskGroup activation status.
    Default to true.
-->
<!ATTLIST TaskGroup enabled      (true|false) #IMPLIED>

<!--
    Defines additional properties of the Task.
    #Table: | Properties | PropertyDef | Name | @name | Value | @value

    #SelectOnInsert
    #SortChild
-->
<!ELEMENT JbProperties (Description?, PropertyDef*)>

<!--
    Test task.

    #Label: @name
    #SelectOnInsert
    #Icon: GVtest.png
-->
<!ELEMENT TestTask (Description?, Triggers, JbProperties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST TestTask type         CDATA #FIXED "task">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST TestTask class        CDATA #FIXED "it.greenvulcano.scheduler.util.test.TestTask">
<!--
    Task name.

    #NotNull
    #Unique: ../*[@type='task']/@name
-->
<!ATTLIST TestTask name         CDATA #REQUIRED>
<!--
    If 'true' Task is automatically registered on the timer.
    Default to true.
-->
<!ATTLIST TestTask auto-start   (true|false) #IMPLIED>
<!--
    Task activation status.
    Default to true.
-->
<!ATTLIST TestTask enabled      (true|false) #IMPLIED>
<!--
    Message displayed to stdout on each invocation.

    #NotNull
-->
<!ATTLIST TestTask message      CDATA #IMPLIED>
<!--
    Simulates the execution of work.

    #NotNull
-->
<!ATTLIST TestTask sleep        CDATA #IMPLIED>

<!--
    Task for invoking GreenVulcanoESB services.

    #Label: @name
    #Icon: GVCoreCall.png
    #SelectOnInsert
    #Template:
    <xsl:template match="ServiceCallerTask">
        <xsl:if test="Description">
            <small><xsl:value-of select="Description"/></small><p/>
        </xsl:if>
    </xsl:template>
-->
<!ELEMENT ServiceCallerTask (Description?, Triggers, JbProperties?, JNDIHelper?, ChangeGVBuffer?, OutputData?, NextAction*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ServiceCallerTask type         CDATA #FIXED "task">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ServiceCallerTask class        CDATA #FIXED "it.greenvulcano.gvesb.core.task.GVServiceCallerTask">
<!--
    Task name.

    #NotNull
    #Unique: ../*[@type='task']/@name
-->
<!ATTLIST ServiceCallerTask name         CDATA #REQUIRED>
<!--
    If 'true' Task is automatically registered on the timer.
    Default to true.
-->
<!ATTLIST ServiceCallerTask auto-start   (true|false) #IMPLIED>
<!--
    Task activation status.
    Default to true.
-->
<!ATTLIST ServiceCallerTask enabled      (true|false) #IMPLIED>
<!--
    ID_SERVICE be used for the invocation.

    #References: /GVCore/GVServices/Services/Service/@id-service
    #NotNull
-->
<!ATTLIST ServiceCallerTask id-service     CDATA #REQUIRED>
<!--
    ID_SYSTEM be used for the invocation.

    #References: /GVCore/GVSystems/Systems/System/@id-system
    #NotNull
-->
<!ATTLIST ServiceCallerTask id-system      CDATA #IMPLIED>
<!--
    Operation name to be used for the invocation.

    #References: /GVCore/GVServices/Services/Service[@id-service=current()/@id-service]/Operation/@name
    #References: /GVCore/GVServices/Services/Service[@id-service=current()/@id-service]/Operation/@forward-name
    #NotNull
-->
<!ATTLIST ServiceCallerTask operation      CDATA #REQUIRED>
<!--
    Performs the invocation in transaction.

-->
<!ATTLIST ServiceCallerTask transacted      (false|true) #IMPLIED>
<!--
    Timeout of the transaction.

    #NotNull
-->
<!ATTLIST ServiceCallerTask timeout         CDATA #IMPLIED>
<!--
    Maximum number of calls in sequence.
    Default: 1

    #NotNull
-->
<!ATTLIST ServiceCallerTask max-calls-sequence  CDATA #IMPLIED>
<!--
    Defines options for saving the output data on file.

    #SelectOnInsert
    #Template:
        <xsl:template match="OutputData">
            <table cellpadding="0" cellspacing="0">
                <tr valign="top">
                    <td width="100">Directory:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@output-directory"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="100">Output Policy:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@output-policy"/></b></td>
                </tr>
                <tr valign="top">
                    <td width="100">Output Type:</td>
                    <td width="20"></td>
                    <td><b><xsl:value-of select="@output-type"/></b></td>
                </tr>
            </table>
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT OutputData (Description?)>
<!--
    The path of the directory containing the file (s) that will
    save the body of GVBuffer output of the service performed.

    #NotNull
-->
<!ATTLIST OutputData output-directory CDATA #REQUIRED>
<!--
    This attribute defines the way in which you saved the output of the service.
    In the case of 'create' the output of the service will be stored on a single
    file whose name is that of the task.
    The file will be overwritten each time the service is invoked.
        Es: 'Taskname'.xxxx

    If 'append' the output of the service will be stored on a single file whose
    name is that of the task: each invocation of the service, the data will be
    appended to the file.

    In the case of 'create-new' output of the service saved to separate files
    whose name is given the name of the task followed by the date/time in
    format dd-MM-yyyy-hh-mm-ss-SSS.
        Es: 'Taskname'-01-01-2010-10-45-05-234.xxxx
-->
<!ATTLIST OutputData output-policy (create|append|create-new) #REQUIRED>
<!--
    This attribute defines the data type of output that will be saved.
    In the case of 'body' will be saved the contents of the body GVBuffer,
    as defined in the parameter 'output-policy': the file extension is '.dat'.
    In case of 'dump' will be made a dump of all GVBuffer, including property,
    as defined in the parameter 'output-policy': the file extension is '.dump'.
    In the case of 'both' will save the body and the dump of GVBuffer.
-->
<!ATTLIST OutputData output-type (body|dump|both) #REQUIRED>
<!--
    Action to be executed after the invocation of GreenVulcanoESB.
    If any condition is checked does the following Action:
    if output is Exception -> 'rollback-exit'
    if output is GVBuffer  -> 'commit-continue'

    #Label: *[@type='condition']/@condition
-->
<!ELEMENT NextAction (Description?, (%conditions;))>
<!--
    The action to execute if the condition is verified.

-->
<!ATTLIST NextAction action         (commit-continue|rollback-exit|commit-exit|rollback-continue) #REQUIRED>

<!--
    Task that invokes a shell command.

    #Label: @name
    #Icon: GVShellID.png
    #Table: | Environment properties | env-property | Name | @name | Value | @value | Description | Description

    #SelectOnInsert
    #Template:
        <xsl:template match="ShellTask">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT ShellTask (Description?, Triggers, JbProperties?, %ShellCommands;)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ShellTask type         CDATA #FIXED "task">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ShellTask class        CDATA #FIXED "it.greenvulcano.scheduler.shell.ShellTask">
<!--
    Task name.

    #NotNull
    #Unique: ../*[@type='task']/@name
-->
<!ATTLIST ShellTask name         CDATA #REQUIRED>
<!--
    If 'true' Task is automatically registered on the timer.
    Default to true.
-->
<!ATTLIST ShellTask auto-start   (true|false) #IMPLIED>
<!--
    Task activation status.
    Default to true.
-->
<!ATTLIST ShellTask enabled      (true|false) #IMPLIED>
<!--
    Pathname of the directory in which the command is executed.

    This pathname can be static or may contain placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    If this attribute is not present, the command is executed
    within the current working directory.

    #NotNull
-->
<!ATTLIST ShellTask directory CDATA #IMPLIED>

<!--
    Task that invokes a R(emote)SH(ell) command.

    #Label: @name
    #Icon: GVRSHCall.png
    #Table: | Environment properties | env-property | Name | @name | Value | @value | Description | Description

    #SelectOnInsert
    #Template:
        <xsl:template match="RSHTask">
            <xsl:if test="Description">
                <small><xsl:value-of select="Description"/></small><p/>
            </xsl:if>
        </xsl:template>
-->
<!ELEMENT RSHTask (Description?, Triggers, JbProperties?, %ShellCommands;)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RSHTask type CDATA #FIXED "task">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST RSHTask class CDATA #FIXED "it.greenvulcano.gvesb.rsh.client.scheduler.RSHTask">
<!--
    Task name.

    #NotNull
    #Unique: ../*[@type='task']/@name
-->
<!ATTLIST RSHTask name CDATA #REQUIRED>
<!--
    If 'true' Task is automatically registered on the timer.
    Default to true.
-->
<!ATTLIST RSHTask auto-start   (true|false) #IMPLIED>
<!--
    Task activation status.
    Default to true.
-->
<!ATTLIST RSHTask enabled      (true|false) #IMPLIED>
<!--
    RSH client name.

    #NotNull
    #References: gvesb:document('GVAdapters')/GVAdapters/RSHServiceClientConfiguration/*[@type='rshClient']/@name
-->
<!ATTLIST RSHTask rsh-client-name CDATA #REQUIRED>
<!--
    Pathname of the directory in which the command is executed.

    This pathname can be static or may contain placeholders that are replaced at runtime.

    Can contains the following placeholders:
     - fixed : a text string;
     - ${{propname}}      : a System property name;
     - sp{{propname}}     : a System property name;
     - env{{varname}}     : an Environment variable value;
     - @{{propname}}      : a inProperties property name;
     - timestamp{{pattern[::tZone]]}} : return the current timestamp, in optional tZone value,
                                        formatted as 'pattern'
     - dateformat{{date::source-pattern::dest-pattern[::source-tZone::dest-tZone]}} :
                               reformat 'date' from 'source-pattern' to 'dest-pattern',
                               and optionally from 'source-tZone' to 'dest-tZone'
     - decode{{field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               evaluate as if-then-else; if 'field' is equal to cond1...n,
                               return the value of val1...n, otherwise 'default'
     - decodeL{{sep::field[::cond1::val1][::cond2::val2][cond...n::val...n]::default}} :
                               is equivalent to 'decode', with the difference that 'condX'
                               can be a list of values separated by 'sep'
     - script{{lang::[scope::]script}} : evaluate a 'lang' script, using the base context 'scope'
     - js{{[scope::]script}}   : evaluate a JavaScript script, using the context 'scope'
     - ognl{{script}}          : evaluate a OGNL script
     - sql{{conn::statement}}            : execute a select sql statement sql and return the value of
                                           the first field of the first selected record.
                                           The 'conn' parameter is the JNDI name of a DataSource
     - sqllist{{conn[::sep]::statement}} : execute a select sql statement sql and return the value of
                                           the first field of all selected records as a 'sep' separated list.
                                           The 'conn' parameter is the JNDI name of a DataSource
                                           The 'sep' parameter defaults to comma
     - sqltable{{conn::statement}}       : executes a select sql statement and returns all values of
                                           returned cursor as an XML.
                                           The 'conn' parameter is the JNDI name of a DataSource

    If this attribute is not present, the command is executed
    within the current (depends on local/remote RSH client used) working directory.

    #NotNull
-->
<!ATTLIST RSHTask directory CDATA #IMPLIED>

<!--
    Log cleaner task.

    #Label: @name
    #SelectOnInsert
    #Icon: GVtest.png
-->
<!ELEMENT LogCleanerTask (Description?, Triggers, JbProperties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST LogCleanerTask type         CDATA #FIXED "task">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST LogCleanerTask class        CDATA #FIXED "it.greenvulcano.scheduler.util.log.LogCleanerTask">
<!--
    Task name.

    #NotNull
    #Unique: ../*[@type='task']/@name
-->
<!ATTLIST LogCleanerTask name         CDATA #REQUIRED>
<!--
    If 'true' Task is automatically registered on the timer.
    Default to true.
-->
<!ATTLIST LogCleanerTask auto-start   (true|false) #IMPLIED>
<!--
    Task activation status.
    Default to true.
-->
<!ATTLIST LogCleanerTask enabled      (true|false) #IMPLIED>
<!--
    The log directory to be searched for files.
    Can contains metadata resolved at runtime and can reference Task and Trigger properties.
    Default to sp{{gv.app.home}}/log.

    #NotNull
-->
<!ATTLIST LogCleanerTask log-directory      CDATA #IMPLIED>
<!--
    If greater than 0 indicates the number of days for the oldest log file to compress.
    Default to 7.

    #NotNull
-->
<!ATTLIST LogCleanerTask zip-older-than     CDATA #IMPLIED>
<!--
    Search pattern for log file to compress.
    Default to: (.*\.log$)|(.*\.log\.\d*$)|(.*\.log\.\d{4}-\d{2}-\d{2}$)

    #NotNull
-->
<!ATTLIST LogCleanerTask zip-filter         CDATA #IMPLIED>
<!--
    Compression mode:
    - zip     (default)
    - gz(ip)
-->
<!ATTLIST LogCleanerTask zip-mode           (gz|zip) #IMPLIED>
<!--
    If greater than 0 indicates the number of days for the oldest log file to delete.
    Default to 14.

    #NotNull
-->
<!ATTLIST LogCleanerTask delete-older-than  CDATA #IMPLIED>
<!--
    Search pattern for log file to delete.
    Default to: (.*\.log$)|(.*\.log\.\d*$)|(.*\.log\..*\.zip$)|(.*\.log\..*\.gz$)

    #NotNull
-->
<!ATTLIST LogCleanerTask delete-filter         CDATA #IMPLIED>


<!--
    Defines an group of Timer Tasks.

    #SelectOnInsert
    #SortChild
-->
<!ELEMENT Triggers (Description?, (SimpleTriggerBuilder|DateIntervalTriggerBuilder|CronTriggerBuilder)*)>

<!--
    Defines additional properties of the Trigger.
    #Table: | Properties | PropertyDef | Name | @name | Value | @value

    #SelectOnInsert
    #SortChild
-->
<!ELEMENT TgProperties (Description?, PropertyDef*)>

<!--
    A Trigger that is used to fire a Task at a given moment in time, and optionally repeated at a specified interval.

    #Label: @name
    #SelectOnInsert
    #Icon: GVSimpleTriggerBuilder.png
-->
<!ELEMENT SimpleTriggerBuilder (Description?, TgProperties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SimpleTriggerBuilder type CDATA #FIXED "cron-trigger">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST SimpleTriggerBuilder class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.trigger.SimpleTriggerBuilder">
<!--
    Trigger name.

    #NotNull
    #Unique: ancestor::TaskGroup//*[@type='cron-trigger']/@name
-->
<!ATTLIST SimpleTriggerBuilder name CDATA #REQUIRED>
<!--
    Trigger activation status.
    Default to true.
-->
<!ATTLIST SimpleTriggerBuilder enabled  (true|false) #IMPLIED>
<!--
    Trigger starting time in ISO format: yyyy-MM-dd HH:mm:ss

    #NotNull
-->
<!ATTLIST SimpleTriggerBuilder  startTime CDATA #IMPLIED>
<!--
    Trigger ending time in ISO format: yyyy-MM-dd HH:mm:ss
    If not defined is the server starting time rounded to the nex minute.

    #NotNull
-->
<!ATTLIST SimpleTriggerBuilder  endTime CDATA #IMPLIED>
<!--
    The period of repetition of the trigger, in ms.
    If not defined the task is executed only once.

    #NotNull
-->
<!ATTLIST SimpleTriggerBuilder  repeatInterval CDATA #IMPLIED>
<!--
    The number of repetitions of the trigger.
    If not defined the task is executed only once.
    If repeatCount == -1, the task is repeated endlessly (or to 'endTime').

    #NotNull
-->
<!ATTLIST SimpleTriggerBuilder  repeatCount CDATA #IMPLIED>
<!--
    Trigger TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST SimpleTriggerBuilder  timeZone CDATA #IMPLIED>
<!--
    Associate the Calendar with the given name with this Trigger.

    #NotNull
    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST SimpleTriggerBuilder  calendarName CDATA #IMPLIED>
<!--
    Defines how to handle misfire situations.
    Default to smart-policy.

    Misfire policy:
    - fire-now : instructs the Scheduler that upon a mis-fire situation, the SimpleTrigger wants to be fired now.
    - reschedule-now-existing-repeat-count  : instructs the Scheduler that upon a mis-fire situation, the SimpleTrigger wants
                                              to be re-scheduled to 'now' (even if the associated Calendar excludes 'now')
                                              with the repeat count left as-is.
    - reschedule-now-remaining-repeat-count : instructs the Scheduler that upon a mis-fire situation, the SimpleTrigger wants
                                              to be re-scheduled to 'now' (even if the associated Calendar excludes 'now') with
                                              the repeat count set to what it would be, if it had not missed any firings.
    - reschedule-next-existing-count  : instructs the Scheduler that upon a mis-fire situation, the SimpleTrigger wants to be
                                        re-scheduled to the next scheduled time after 'now' - taking into account any associated
                                        Calendar, and with the repeat count left unchanged.
    - reschedule-next-remaining-count : instructs the Scheduler that upon a mis-fire situation, the SimpleTrigger wants to be
                                        re-scheduled to the next scheduled time after 'now' - taking into account any associated
                                        Calendar, and with the repeat count set to what it would be, if it had not missed any
                                        firings. WARNING: using this mode with a trigger that has a non-null end-time may cause
                                        the trigger to never fire again if the end-time arrived during the misfire time span.

    If the misfire instruction is set to smart-policy, then the following scheme will be used:
    - if the repeatCount is 0, then the instruction will be interpreted as fire-now.
    - if the repeatCount is -1, then the instruction will be interpreted as reschedule-next-remaining-count.
    - if the repeatCount is > 0, then the instruction will be interpreted as reschedule-now-existing-repeat-count.

    #NotNull
    #Choice: smart-policy|fire-now|reschedule-now-existing-repeat-count|reschedule-now-remaining-repeat-count|reschedule-next-existing-count|reschedule-next-remaining-count
-->
<!ATTLIST SimpleTriggerBuilder  misfireMode CDATA #IMPLIED>

<!--
    A Trigger that is used to fire a Task based upon repeating calendar time intervals.

    #Label: @name
    #SelectOnInsert
    #Icon: GVDateIntervalTriggerBuilder.png
-->
<!ELEMENT DateIntervalTriggerBuilder (Description?, TgProperties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DateIntervalTriggerBuilder type CDATA #FIXED "cron-trigger">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DateIntervalTriggerBuilder class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.trigger.DateIntervalTriggerBuilder">
<!--
    Trigger name.

    #NotNull
    #Unique: ancestor::TaskGroup//*[@type='cron-trigger']/@name
-->
<!ATTLIST DateIntervalTriggerBuilder name CDATA #REQUIRED>
<!--
    Trigger activation status.
    Default to true.
-->
<!ATTLIST DateIntervalTriggerBuilder enabled  (true|false) #IMPLIED>
<!--
    Trigger starting time in ISO format: yyyy-MM-dd HH:mm:ss
    If not defined is the server starting time rounded to the nex minute.

    #NotNull
-->
<!ATTLIST DateIntervalTriggerBuilder  startTime CDATA #IMPLIED>
<!--
    Trigger ending time in ISO format: yyyy-MM-dd HH:mm:ss

    #NotNull
-->
<!ATTLIST DateIntervalTriggerBuilder  endTime CDATA #IMPLIED>
<!--
    The period of repetition of the trigger, in time unit.

    #Choice: SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | YEAR
-->
<!ATTLIST DateIntervalTriggerBuilder  repeatIntervalUnit CDATA #REQUIRED>
<!--
    The number of repeatIntervalUnit for repetitions of the trigger.
    If not defined the default is 1.

    #NotNull
-->
<!ATTLIST DateIntervalTriggerBuilder  repeatInterval CDATA #IMPLIED>
<!--
    Trigger TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST DateIntervalTriggerBuilder  timeZone CDATA #IMPLIED>
<!--
    Associate the Calendar with the given name with this Trigger.

    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST DateIntervalTriggerBuilder  calendarName CDATA #IMPLIED>
<!--
    Defines how to handle misfire situations.
    Default to smart-policy.

    Misfire policy:
    - fire-once-now : instructs the Scheduler that upon a mis-fire situation, the DateIntervalTrigger wants to be fired now.
    - do-nothing    : instructs the Scheduler that upon a mis-fire situation, the DateIntervalTrigger wants to have
                      it's next-fire-time updated to the next time in the schedule after the current time (taking into
                      account any associated Calendar), but it does not want to be fired now.

    If the misfire instruction is set to smart-policy, then the following scheme will be used:
    - fire-once-now

    #NotNull
    #Choice: smart-policy|do-nothing|fire-once-now
-->
<!ATTLIST DateIntervalTriggerBuilder  misfireMode CDATA #IMPLIED>

<!--
    A Trigger that is used to fire a Task at given moments in time, defined with Unix 'cron-like' definitions.

    #Label: @name
    #SelectOnInsert
    #Icon: GVCronTriggerBuilder.png
-->
<!ELEMENT CronTriggerBuilder (Description?, TgProperties?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CronTriggerBuilder type CDATA #FIXED "cron-trigger">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST CronTriggerBuilder class CDATA #FIXED "it.greenvulcano.scheduler.util.quartz.impl.trigger.CronTriggerBuilder">
<!--
    Trigger name.

    #NotNull
    #Unique: ancestor::TaskGroup//*[@type='cron-trigger']/@name
-->
<!ATTLIST CronTriggerBuilder name CDATA #REQUIRED>
<!--
    Trigger activation status.
    Default to true.
-->
<!ATTLIST CronTriggerBuilder enabled  (true|false) #IMPLIED>
<!--
    Define a cron expression.
    Reference: http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger

    #NotNull
-->
<!ATTLIST CronTriggerBuilder  cronExpression CDATA #REQUIRED>
<!--
    Trigger starting time in ISO format: yyyy-MM-dd HH:mm:ss
    If not defined is the server starting time rounded to the nex minute.

    #NotNull
-->
<!ATTLIST CronTriggerBuilder  startTime CDATA #IMPLIED>
<!--
    Trigger ending time in ISO format: yyyy-MM-dd HH:mm:ss

    #NotNull
-->
<!ATTLIST CronTriggerBuilder  endTime CDATA #IMPLIED>
<!--
    Trigger TimeZone.
    If not defined is used the TimeZone defined for DateUtils.

    #NotNull
-->
<!ATTLIST CronTriggerBuilder  timeZone CDATA #IMPLIED>
<!--
    Associate the Calendar with the given name with this Trigger.

    #References: /GVCore/GVTaskManagerConfiguration/GVSchedulerBuilder/Calendars/*[@type='cron-calendar']/@name
-->
<!ATTLIST CronTriggerBuilder  calendarName CDATA #IMPLIED>
<!--
    Defines how to handle misfire situations.
    Default to smart-policy.

    Misfire policy:
    - fire-once-now : instructs the Scheduler that upon a mis-fire situation, the CronTrigger wants to be fired now.
    - do-nothing    : instructs the Scheduler that upon a mis-fire situation, the CronTrigger wants to have
                      it's next-fire-time updated to the next time in the schedule after the current time (taking into
                      account any associated Calendar), but it does not want to be fired now.

    If the misfire instruction is set to smart-policy, then the following scheme will be used:
    - fire-once-now

    #NotNull
    #Choice: smart-policy|do-nothing|fire-once-now
-->
<!ATTLIST CronTriggerBuilder  misfireMode CDATA #IMPLIED>

<!--
    Defines the configuration of the GreenVulcanoESB ACL Policy framework.
-->
<!ELEMENT GVPolicy (Description?, Roles, Addresses, ACLGreenVulcano)>
<!--
    Element type 'module'.
-->
<!ATTLIST GVPolicy type    CDATA   #FIXED  "module">
<!--
    Module ID always set to 'POLICY_MANAGER'.
-->
<!ATTLIST GVPolicy name    CDATA   #FIXED  "POLICY_MANAGER">

<!--
    Defines the roles to be used in ACL configuration.
-->
<!ELEMENT Roles (Role*)>

<!--
    Defines a policy role.

    #SelectOnInsert
    #Label: @name
    #Icon: GVRole.png
-->
<!ELEMENT Role (Description?)>
<!--
    Role name.

    #NotNull
    #Unique: ../Role/@name
-->
<!ATTLIST Role name CDATA #REQUIRED>

<!--
    Defines the address set to be used in ACL configuration.
-->
<!ELEMENT Addresses (AddressSet*)>

<!--
    Defines a policy address set.

    #SelectOnInsert
    #Label: @name
    #Icon: GVRole.png
-->
<!ELEMENT AddressSet (Description?, Address+)>
<!--
    Address set name.

    #NotNull
    #Unique: ../AddressSet/@name
-->
<!ATTLIST AddressSet name CDATA #REQUIRED>
<!--
    Defines an enabled address.

    #SelectOnInsert
    #Label: @address
-->
<!ELEMENT Address (Description?)>
<!--
    An enabled address.

    #NotNull
    #Unique: ../Address/@address
-->
<!ATTLIST Address address CDATA #REQUIRED>


<!--
    An ACL Manager default implementation.

    #SelectOnInsert
-->
<!ELEMENT ACLGreenVulcano (Description?, DefaultRes, ServiceRes*)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ACLGreenVulcano type CDATA #FIXED "acl-manager">
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ACLGreenVulcano class CDATA #FIXED "it.greenvulcano.gvesb.policy.impl.ACLGreenVulcano">

<!--
    Defines a resource ACL.

    #SelectOnInsert
-->
<!ELEMENT ACL ((RoleRef|AddressSetRef)+)>

<!--
    Defines an ACL role reference.

    #SelectOnInsert
    #Label: @name
    #Icon: GVRole.png
-->
<!ELEMENT RoleRef (Description?)>
<!--
    Role name.

    #References: /GVCore/GVPolicy/Roles/Role/@name
    #Unique: ../RoleRef/@name
-->
<!ATTLIST RoleRef name CDATA #REQUIRED>

<!--
    Defines an ACL address set reference.

    #SelectOnInsert
    #Label: @name
    #Icon: GVRole.png
-->
<!ELEMENT AddressSetRef (Description?)>
<!--
    Address set name.

    #References: /GVCore/GVPolicy/Addresses/AddressSet/@name
    #Unique: ../AddressSetRef/@name
-->
<!ATTLIST AddressSetRef name CDATA #REQUIRED>

<!--
    A default ACL definition.

    #SelectOnInsert
    #Icon: GVDefaultRes.png
-->
<!ELEMENT DefaultRes (Description?, ACL?)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST DefaultRes type CDATA #FIXED "resource">

<!--
    A GVCore group/service/operation ACL definition.

    #SelectOnInsert
    #CompositeLabel: || @group | - | @service | - | @operation
    #Icon: GVServiceRes.png
-->
<!ELEMENT ServiceRes (Description?, ACL)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST ServiceRes type CDATA #FIXED "resource">
<!--
    Group name.

    #References: /GVCore/GVServices/Groups/Group/@id-group
-->
<!ATTLIST ServiceRes group CDATA #IMPLIED>
<!--
    Service name.

    #References: {{../ServiceRes[@group]}} /GVCore/GVServices/Services/Service[@group-name=current()/@group]/@id-service
    #References: {{../ServiceRes[not(@group)]}} /GVCore/GVServices/Services/Service/@id-service
-->
<!ATTLIST ServiceRes service CDATA #IMPLIED>
<!--
    Operation name.

    #NotNull
    #References: /GVCore/GVServices/Services/Service[@id-service=current()/@service]/Operation[@name!='Forward']/@name
    #References: /GVCore/GVServices/Services/Service[@id-service=current()/@service]/Operation[@name='Forward']/@forward-name
-->
<!ATTLIST ServiceRes operation CDATA #IMPLIED>

<!--
    This feature allows you to specify a condition on the roles of the Pricipal invoking the service.

    #Label: @condition
-->
<!ELEMENT IdentityCondition (Description?, ACL)>

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST IdentityCondition type CDATA #FIXED "condition">

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST IdentityCondition class CDATA #FIXED "it.greenvulcano.gvesb.identity.condition.IdentityCondition">

<!--
    This attribute defines the name of the condition.
    Unique inside the 'Conditions' element.

    #NotNull
    #Unique: ../*[@type='condition']/@condition
-->
<!ATTLIST IdentityCondition   condition CDATA #REQUIRED>
